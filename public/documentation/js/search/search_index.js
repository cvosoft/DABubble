var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AddUserToChannelComponent.html",[0,0.115,1,0.534]],["body/components/AddUserToChannelComponent.html",[0,0.21,1,0.925,2,0.816,3,0.129,4,0.129,5,0.517,6,0.739,7,0.739,8,0.11,9,6.3,10,0.763,11,6.3,12,2.71,13,0.461,14,1.251,15,1.251,16,1.009,17,2.824,18,0.66,19,0.57,20,0.781,21,1.762,22,2.916,23,0.739,24,4.516,25,1.014,26,4.516,27,0.186,28,0.353,29,5.272,30,4.032,31,5.272,32,3.25,33,6.087,34,4.516,35,0.514,36,4.524,37,2.733,38,6.332,39,2.244,40,5.272,41,3.454,42,4.516,43,2.202,44,2.997,45,5.224,46,4.167,47,2.887,48,3.891,49,0.699,50,3.158,51,3.379,52,3.204,53,0.724,54,3.158,55,2.498,56,1.125,57,2.076,58,2.367,59,3.678,60,2.179,61,2.681,62,3.876,63,3.367,64,3.876,65,0.561,66,0.02,67,0.434,68,0.333,69,0.448,70,0.485,71,1.576,72,3.454,73,2.292,74,3.139,75,0.81,76,0.863,77,0.759,78,3.158,79,3.158,80,3.158,81,3.126,82,3.158,83,3.158,84,1.54,85,3.37,86,2.415,87,1.637,88,1.053,89,0.582,90,0.721,91,3.158,92,1.747,93,2.71,94,2.415,95,2.415,96,3.876,97,1.951,98,3.664,99,2.415,100,1.637,101,3.158,102,4.516,103,1.858,104,3.158,105,1.637,106,2.645,107,3.158,108,0.66,109,3.158,110,3.158,111,3.158,112,2.019,113,1.169,114,2.023,115,2.195,116,3.158,117,3.158,118,2.71,119,4.516,120,1.872,121,2.71,122,3.158,123,3.158,124,3.158,125,3.158,126,2.019,127,2.291,128,2.498,129,3.37,130,3.158,131,3.158,132,3.158,133,3.158,134,3.158,135,0.546,136,3.158,137,3.158,138,0.311,139,1.829,140,2.678,141,0.206,142,2.019,143,0.865,144,1.056,145,1.747,146,2.415,147,1.872,148,1.54,149,2.019,150,1.232,151,0.129,152,0.147,153,3.158,154,3.158,155,3.158,156,2.71,157,0.48,158,0.412,159,3.158,160,2.71,161,3.158,162,3.158,163,3.158,164,0.955,165,3.158,166,3.158,167,1.004,168,3.158,169,3.158,170,4.516,171,4.937,172,3.454,173,4.842,174,4.516,175,3.876,176,3.454,177,4.516,178,4.516,179,2.202,180,2.341,181,2.498,182,4.516,183,2.887,184,0.517,185,0.739,186,0.622,187,0.517,188,0.942,189,0.517,190,0.461,191,0.517,192,0.517,193,0.461,194,0.517,195,0.461,196,0.517,197,0.489,198,0.517,199,0.461,200,0.517,201,0.461,202,0.517,203,0.517,204,0.461,205,0.517,206,0.461,207,0.739,208,0.461,209,0.517,210,0.461,211,0.384,212,0.517,213,0.461,214,0.517,215,0.739,216,0.461,217,0.942,218,0.461,219,0.517,220,0.461,221,0.517,222,0.461,223,0.517,224,0.461,225,0.517,226,0.489,227,0.489,228,0.461,229,0.517,230,0.461,231,0.517,232,0.461,233,0.84,234,0.517,235,0.461,236,0.517,237,0.489,238,0.461,239,0.489,240,0.863,241,0.461,242,0.517,243,0.489,244,0.517,245,0.489,246,0.489,247,0.517,248,0.461,249,0.517,250,0.461,251,0.517,252,0.461,253,0.489,254,0.489,255,0.517,256,0.461,257,0.739,258,0.517,259,0.461,260,0.517,261,0.461,262,0.489,263,0.489,264,0.409,265,0.461,266,0.517,267,0.461,268,0.517,269,0.517,270,0.517,271,0.011,272,0.011]],["title/components/AddchatComponent.html",[0,0.115,190,0.534]],["body/components/AddchatComponent.html",[0,0.184,1,0.334,2,0.55,3,0.093,4,0.093,5,0.375,6,0.375,7,0.375,8,0.08,10,0.699,13,0.334,14,1.224,15,1.224,16,0.822,17,2.882,18,0.519,19,0.63,20,0.614,23,0.581,25,0.797,27,0.312,28,0.278,32,3.348,35,0.404,39,1.913,44,1.633,46,2.271,48,3.136,49,0.759,51,3.409,52,2.001,53,0.702,56,1.293,58,1.461,59,2.271,60,1.64,61,1.461,63,3.942,65,0.623,66,0.02,67,0.464,68,0.336,69,0.529,70,0.572,73,2.236,75,0.862,76,0.785,77,0.794,84,2.739,88,1.048,89,0.604,90,0.758,92,1.965,97,1.816,100,3.409,103,2.018,106,2.763,108,0.334,113,1.816,114,2.188,126,3.874,135,1.177,138,0.282,139,1.926,141,0.149,142,1.463,144,0.765,145,1.266,148,1.732,149,1.463,150,0.893,151,0.093,152,0.107,157,0.676,158,0.384,164,1.7,167,1.129,171,3.048,172,3.751,173,4.297,175,4.209,184,0.375,185,0.581,186,0.489,187,0.375,188,0.803,189,0.375,190,0.821,191,0.375,192,0.375,193,0.334,194,0.375,195,0.334,196,0.375,197,0.354,198,0.375,199,0.334,200,0.375,201,0.334,202,0.375,203,0.375,204,0.334,205,0.375,206,0.334,207,0.581,208,0.334,209,0.375,210,0.334,211,0.278,212,0.375,213,0.334,214,0.375,215,0.581,216,0.334,217,0.803,218,0.334,219,0.375,220,0.334,221,0.375,222,0.334,223,0.375,224,0.334,225,0.375,226,0.354,227,0.354,228,0.334,229,0.375,230,0.334,231,0.375,232,0.334,233,0.716,234,0.375,235,0.334,236,0.375,237,0.354,238,0.334,239,0.354,240,0.712,241,0.334,242,0.375,243,0.354,244,0.375,245,0.354,246,0.354,247,0.375,248,0.334,249,0.375,250,0.334,251,0.375,252,0.334,253,0.354,254,0.354,255,0.375,256,0.334,257,0.581,258,0.375,259,0.334,260,0.375,261,0.334,262,0.354,263,0.354,264,0.296,265,0.334,266,0.375,267,0.334,268,0.375,269,0.375,270,0.375,271,0.009,272,0.009,273,1.964,274,3.552,275,2.716,276,3.552,277,3.552,278,6.662,279,6.662,280,5.862,281,5.031,282,6.475,283,2.001,284,4.634,285,6.475,286,4.352,287,3.735,288,4.352,289,3.552,290,4.905,291,3.552,292,3.552,293,3.552,294,3.552,295,4.905,296,3.552,297,1.591,298,3.592,299,2.255,300,1.786,301,4.634,302,3.552,303,1.591,304,3.108,305,2.782,306,2.782,307,2.716,308,2.018,309,3.552,310,2.736,311,3.243,312,3.552,313,2.289,314,2.468,315,3.136,316,2.716,317,3.048,318,3.409,319,4.419,320,4.297,321,4.419,322,2.633,323,2.716,324,3.552,325,2.289,326,1.732,327,3.494,328,2.08,329,4.297,330,2.289,331,2.908,332,2.716,333,4.209,334,3.409,335,2.908,336,4.209,337,3.331,338,2.786,339,3.048,340,2.468,341,3.552,342,2.289,343,1.965,344,2.255,345,2.716,346,3.552,347,2.716,348,4.905,349,1.279,350,3.048,351,3.735,352,3.048,353,3.048,354,3.552,355,2.289,356,2.583,357,3.552,358,2.753,359,3.331,360,3.552,361,4.822,362,2.106,363,2.716,364,3.552,365,2.289,366,1.461,367,3.048,368,2.908,369,3.409,370,2.289,371,2.58,372,3.552,373,3.552,374,2.289,375,1.913,376,3.552,377,2.271,378,1.315,379,3.048,380,3.552,381,2.468,382,2.271,383,2.289,384,3.048,385,3.048,386,3.552,387,2.289,388,2.468,389,2.271,390,2.468,391,4.352,392,2.289,393,2.289,394,2.289,395,3.025,396,2.289,397,2.289,398,2.289,399,2.289,400,5.31,401,2.289,402,2.271,403,2.289,404,1.591,405,1.964,406,1.052,407,3.039,408,3.243,409,1.964,410,1.463,411,1.463,412,2.468,413,4.905,414,2.289,415,2.289,416,2.289,417,2.289,418,2.289,419,1.75,420,1.463,421,1.75,422,1.964,423,1.964,424,2.289,425,1.591,426,2.289,427,2.289,428,1.463,429,2.289,430,1.75,431,1.135,432,2.289,433,2.289,434,1.964,435,2.122,436,1.357,437,3.552,438,2.289,439,2.289,440,2.289,441,1.266,442,2.289,443,4.905,444,2.289,445,2.289,446,1.964,447,2.289,448,2.289,449,3.552,450,2.716,451,2.289,452,1.463,453,1.357,454,4.074,455,1.75,456,2.289,457,3.552,458,2.289,459,2.289,460,3.552,461,1.633,462,2.289,463,2.289,464,3.552,465,2.289,466,2.289,467,2.289,468,4.352,469,3.552,470,2.289,471,2.289,472,2.289,473,2.289,474,2.289,475,2.289,476,3.048,477,3.048,478,3.048,479,3.552,480,3.552,481,3.409,482,3.552,483,3.048,484,3.552,485,2.716,486,3.048,487,3.552,488,3.552,489,2.271,490,3.552,491,3.048,492,3.552,493,3.048,494,3.048,495,2.289,496,2.289,497,1.841,498,2.716,499,3.552,500,2.289,501,2.289]],["title/components/AppComponent.html",[0,0.115,193,0.534]],["body/components/AppComponent.html",[0,0.177,1,0.518,2,0.759,3,0.144,4,0.144,5,0.581,6,0.581,7,0.581,8,0.124,10,0.699,13,0.518,14,1.259,15,1.259,16,0.549,18,0.716,19,0.629,20,0.848,23,0.802,27,0.209,28,0.383,35,0.558,39,2.362,49,0.869,52,3.022,53,0.699,56,1.046,60,2.125,61,2.31,65,0.377,66,0.02,67,0.366,68,0.314,69,0.302,70,0.326,75,0.683,76,0.851,77,0.748,88,1.099,89,0.451,90,0.639,108,0.518,114,1.248,135,0.614,138,0.314,141,0.231,144,1.186,147,2.104,148,2.738,151,0.144,152,0.262,157,0.521,158,0.383,164,1.832,184,0.581,185,0.802,186,0.675,187,0.581,188,0.992,189,0.581,190,0.518,191,0.581,192,0.581,193,0.96,194,0.581,195,0.518,196,0.581,197,0.549,198,0.581,199,0.518,200,0.581,201,0.518,202,0.581,203,0.581,204,0.518,205,0.581,206,0.518,207,0.802,208,0.518,209,0.581,210,0.518,211,0.431,212,0.581,213,0.518,214,0.581,215,0.802,216,0.518,217,0.992,218,0.518,219,0.581,220,0.518,221,0.581,222,0.518,223,0.581,224,0.518,225,0.581,226,0.549,227,0.549,228,0.518,229,0.581,230,0.518,231,0.581,232,0.518,233,0.885,234,0.581,235,0.518,236,0.581,237,0.549,238,0.518,239,0.549,240,0.919,241,0.518,242,0.581,243,0.549,244,0.581,245,0.549,246,0.549,247,0.581,248,0.518,249,0.581,250,0.518,251,0.581,252,0.518,253,0.549,254,0.549,255,0.581,256,0.518,257,0.802,258,0.581,259,0.518,260,0.581,261,0.518,262,0.549,263,0.549,264,0.46,265,0.518,266,0.581,267,0.518,268,0.581,269,0.581,270,0.581,271,0.012,272,0.012,300,2.216,305,2.269,328,1.814,329,3.749,358,1.84,366,2.016,378,1.814,406,1.632,431,0.925,502,2.104,503,3.046,504,2.39,505,3.099,506,2.927,507,4.82,508,2.906,509,5.616,510,4.902,511,5.616,512,4.21,513,5.616,514,5.616,515,6.866,516,6.057,517,3.046,518,3.439,519,4.902,520,5.455,521,4.029,522,4.207,523,2.254,524,2.016,525,6.057,526,5.641,527,3.549,528,4.207,529,3.157,530,4.632,531,2.541,532,3.749,533,3.134,534,4.207,535,3.749,536,3.407,537,4.902,538,4.207,539,3.591,540,3.549,541,3.407,542,3.407,543,3.549,544,4.902,545,3.549,546,3.549,547,3.407,548,3.549,549,4.902,550,4.902,551,2.104,552,2.016,553,3.549,554,3.549,555,3.549,556,1.314,557,3.046,558,2.714,559,3.549,560,3.549,561,3.549,562,4.902,563,3.549,564,3.046,565,3.046,566,3.549,567,2.714,568,3.549,569,4.902,570,3.549,571,4.902,572,3.549,573,3.549,574,4.902,575,3.549,576,3.549,577,4.902,578,3.749,579,6.057,580,6.057,581,4.902,582,4.902,583,3.046,584,2.104,585,2.104,586,2.104,587,2.269,588,3.046,589,3.549,590,2.466,591,2.906,592,2.466,593,2.906,594,2.714,595,1.963,596,3.046,597,2.714,598,2.269,599,2.269,600,2.906,601,3.046,602,1.963,603,2.104,604,2.906,605,2.466,606,2.466,607,3.749,608,2.714,609,2.269,610,2.104,611,2.714,612,3.549]],["title/components/BuilderComponent.html",[0,0.115,195,0.534]],["body/components/BuilderComponent.html",[0,0.169,1,0.4,2,0.63,3,0.111,4,0.111,5,0.448,6,0.448,7,0.448,8,0.096,10,0.271,13,0.4,14,1.24,15,1.24,16,0.424,18,0.595,19,0.678,20,0.704,21,1.624,23,0.666,27,0.316,28,0.421,35,0.463,39,1.894,49,0.63,53,0.702,55,2.252,56,0.869,57,1.871,58,1.127,59,1.751,65,0.433,66,0.02,67,0.35,68,0.328,69,0.346,70,0.374,71,1.115,75,0.758,76,0.83,77,0.758,84,1.984,87,2.11,88,1.217,89,0.554,90,0.77,97,1.014,106,2.337,108,0.4,115,2.829,135,1.169,138,0.291,141,0.178,143,0.75,151,0.111,152,0.128,157,0.517,158,0.318,164,0.828,167,2.176,184,0.448,185,0.666,186,0.56,187,0.448,188,0.88,189,0.448,190,0.4,191,0.448,192,0.448,193,0.4,194,0.448,195,0.88,196,0.448,197,0.424,198,0.448,199,0.786,200,0.448,201,0.4,202,0.448,203,0.448,204,0.4,205,0.448,206,0.4,207,0.666,208,0.4,209,0.448,210,0.4,211,0.333,212,0.448,213,0.4,214,0.448,215,0.666,216,0.4,217,0.88,218,0.4,219,0.448,220,0.4,221,0.448,222,0.4,223,0.448,224,0.4,225,0.448,226,0.424,227,0.889,228,0.4,229,0.448,230,0.4,231,0.448,232,0.4,233,1.086,234,0.448,235,0.786,236,0.448,237,0.424,238,0.4,239,0.424,240,0.795,241,0.786,242,0.448,243,0.424,244,0.448,245,0.424,246,0.424,247,0.448,248,0.4,249,0.448,250,0.4,251,0.448,252,0.4,253,0.424,254,0.424,255,0.448,256,0.4,257,0.666,258,0.448,259,0.4,260,0.448,261,0.4,262,0.965,263,0.424,264,0.911,265,0.4,266,0.448,267,0.4,268,0.448,269,0.448,270,0.448,271,0.01,272,0.01,308,1.674,326,3.337,328,1.507,344,1.259,356,1.871,375,1.587,378,1.507,382,2.602,388,3.738,389,3.987,461,1.871,502,1.624,508,2.413,524,2.815,529,3.366,530,4.606,536,3.376,539,3.571,584,2.413,585,1.624,586,1.624,587,4.185,591,3.882,593,1.624,598,3.438,599,3.106,600,3.408,602,3.786,603,1.624,604,1.624,613,2.35,614,4.453,615,4.858,616,4.07,617,5.618,618,4.335,619,3.74,620,4.932,621,6.237,622,4.395,623,4.858,624,5.378,625,5.378,626,3.994,627,4.615,628,5.378,629,2.829,630,3.376,631,2.35,632,3.233,633,4.07,634,3.113,635,4.07,636,2.739,637,3.158,638,3.851,639,4.606,640,5.378,641,5.234,642,6.023,643,2.739,644,2.739,645,2.094,646,1.515,647,2.35,648,2.687,649,4.07,650,2.739,651,3.493,652,2.602,653,3.113,654,5.378,655,3.493,656,1.624,657,2.829,658,1.42,659,2.739,660,3.408,661,5.169,662,4.77,663,3.987,664,3.493,665,2.739,666,2.829,667,2.739,668,2.739,669,2.739,670,2.739,671,2.739,672,2.739,673,2.739,674,1.751,675,2.739,676,2.35,677,3.113,678,3.113,679,4.07,680,2.35,681,2.739,682,3.738,683,2.094,684,1.903,685,3.493,686,2.35,687,2.35,688,3.438,689,2.094,690,2.739,691,2.739,692,2.739,693,4.113,694,2.35,695,1.903,696,4.395,697,5.499,698,2.739,699,5.378,700,6.023,701,4.858,702,2.35,703,2.739,704,2.368,705,4.07,706,2.739,707,4.07,708,1.751,709,1.751,710,2.094,711,1.903,712,3.113,713,3.738,714,1.751,715,5.874,716,5.169,717,6.237,718,4.335,719,2.35,720,2.829,721,1.903,722,2.602,723,2.602,724,1.751,725,1.903,726,2.739,727,3.493,728,2.35,729,2.739,730,2.739,731,2.829,732,2.88,733,4.07,734,3.715,735,2.829,736,3.493,737,3.376,738,3.106,739,4.07,740,2.829,741,2.829,742,5.378,743,3.493,744,3.493,745,1.903,746,2.094]],["title/interfaces/Channel.html",[17,1.425,747,1.353]],["body/interfaces/Channel.html",[3,0.227,4,0.227,8,0.195,17,2.555,27,0.328,28,0.512,32,3.497,66,0.019,67,0.467,68,0.348,69,0.629,70,0.659,75,0.937,114,2.522,135,1.203,151,0.227,271,0.017,272,0.017,412,4.985,441,3.968,747,2.067,748,3.09,749,4.793,750,7.173,751,3.605]],["title/components/ChatComponent.html",[0,0.115,199,0.534]],["body/components/ChatComponent.html",[0,0.165,1,0.456,2,0.693,3,0.182,4,0.127,5,0.511,6,0.511,7,0.511,8,0.109,10,0.309,13,0.456,14,1.25,15,1.25,16,0.483,18,0.654,19,0.443,20,0.774,23,0.733,27,0.183,28,0.35,35,0.51,39,2.231,43,2.183,49,0.483,53,0.6,55,2.477,56,0.955,57,2.058,58,1.842,59,2.862,61,2.354,65,0.332,66,0.02,67,0.373,68,0.267,69,0.265,70,0.287,71,1.227,72,3.424,75,0.736,76,0.404,77,0.69,89,0.287,90,0.355,108,0.456,129,1.995,138,0.303,139,1.423,141,0.203,151,0.127,152,0.145,157,0.332,158,0.244,167,2.065,184,0.511,185,0.733,186,0.616,187,0.511,188,0.937,189,0.511,190,0.456,191,0.511,192,0.511,193,0.456,194,0.511,195,0.456,196,0.511,197,0.885,198,0.511,199,0.971,200,0.511,201,0.456,202,0.511,203,0.511,204,0.836,205,0.511,206,0.456,207,0.733,208,0.456,209,0.511,210,0.456,211,0.379,212,0.511,213,0.456,214,0.511,215,0.733,216,0.456,217,0.937,218,0.456,219,0.511,220,0.456,221,0.511,222,0.456,223,0.511,224,0.456,225,0.511,226,0.885,227,0.976,228,0.456,229,0.511,230,0.456,231,0.511,232,0.456,233,0.836,234,0.511,235,0.456,236,0.511,237,0.483,238,0.456,239,0.483,240,0.857,241,0.456,242,0.511,243,0.885,244,0.511,245,0.483,246,0.483,247,0.511,248,0.456,249,0.511,250,0.456,251,0.511,252,0.456,253,0.483,254,0.483,255,0.511,256,0.456,257,0.733,258,0.511,259,0.456,260,0.511,261,0.836,262,0.976,263,0.483,264,0.404,265,0.456,266,0.511,267,0.456,268,0.511,269,0.511,270,0.511,271,0.011,272,0.011,326,2.183,375,1.746,382,4.031,446,2.677,461,2.058,502,1.85,504,2.183,505,2.553,508,2.654,512,2.168,529,3.111,556,1.155,584,2.654,585,1.85,586,1.85,587,4.152,590,4.514,591,3.94,592,3.976,593,3.739,595,1.726,596,2.677,597,2.386,598,2.862,599,4.49,600,4.012,602,3.798,603,3.851,604,4.164,605,3.639,606,2.168,608,2.386,609,3.658,610,3.105,614,4.514,646,2.477,660,3.392,708,1.995,709,1.995,710,4.376,711,3.976,712,4.633,713,3.976,714,2.862,719,3.842,720,3.976,721,3.112,722,4.594,723,4.49,724,2.862,725,3.639,731,3.639,732,3.105,734,2.386,735,4.382,737,4.514,740,3.112,741,3.112,745,4.618,746,2.386,752,2.677,753,5.236,754,4.477,755,5.199,756,5.807,757,2.386,758,3.348,759,4.477,760,3.12,761,3.12,762,3.842,763,4.477,764,3.12,765,3.12,766,3.12,767,2.677,768,3.842,769,1.85,770,3.12,771,2.386,772,3.12,773,3.12,774,4.477,775,4.477,776,3.12,777,3.12,778,4.772,779,3.112,780,3.424,781,3.658,782,5.236,783,4.633,784,4.477,785,4.477,786,3.12,787,3.12,788,3.12,789,2.677,790,3.12,791,2.677,792,3.12,793,3.12,794,3.12,795,2.677,796,3.12,797,5.412,798,5.175,799,3.12,800,5.807,801,6.495,802,2.677,803,2.677,804,4.477,805,4.633,806,4.91,807,4.494,808,4.91,809,4.91,810,3.12,811,3.12,812,3.424,813,2.677,814,3.842,815,5.199,816,3.842,817,3.12,818,3.12,819,3.12,820,4.477,821,3.12,822,3.12,823,3.12,824,2.386,825,3.12,826,3.112,827,4.477,828,2.168,829,2.168,830,2.386,831,2.386,832,3.12,833,2.677,834,4.376,835,2.168,836,2.386,837,3.12,838,5.236,839,3.424,840,4.477,841,3.12,842,2.386,843,3.12,844,1.356,845,3.12,846,3.12,847,3.12,848,3.12,849,3.12,850,3.12,851,4.477,852,3.12,853,2.677,854,3.12,855,2.677,856,3.12,857,3.12,858,3.12,859,3.12,860,2.386,861,3.12]],["title/components/ChooseAvatarComponent.html",[0,0.115,201,0.534]],["body/components/ChooseAvatarComponent.html",[0,0.181,1,0.542,2,0.782,3,0.151,4,0.151,5,0.607,6,0.607,7,0.607,8,0.13,10,0.569,13,0.542,14,1.262,15,1.262,16,0.574,18,0.738,19,0.569,20,0.874,21,1.921,23,0.827,25,1.135,27,0.392,28,0.395,35,0.575,43,2.464,44,2.324,47,3.231,49,0.89,53,0.711,56,0.792,65,0.537,66,0.02,67,0.434,68,0.323,69,0.429,70,0.465,71,1.575,75,0.699,76,0.836,77,0.735,81,3.408,85,3.946,87,2.62,88,1.067,89,0.567,90,0.703,105,2.62,106,2.196,108,0.542,120,3.659,127,2.196,129,4.436,135,0.874,138,0.288,139,1.607,140,2.997,141,0.242,143,1.017,151,0.151,152,0.173,157,0.611,158,0.29,184,0.607,185,0.827,186,0.696,187,0.607,188,1.01,189,0.607,190,0.542,191,0.607,192,0.607,193,0.542,194,0.607,195,0.542,196,0.607,197,0.574,198,0.607,199,0.542,200,0.607,201,0.973,202,1.116,203,0.607,204,0.542,205,0.607,206,0.542,207,0.827,208,0.542,209,0.607,210,0.542,211,0.451,212,0.607,213,0.542,214,0.607,215,0.827,216,0.542,217,1.01,218,0.542,219,0.607,220,0.542,221,0.607,222,0.542,223,0.607,224,0.542,225,0.607,226,0.574,227,0.574,228,0.542,229,0.607,230,0.542,231,0.607,232,0.542,233,0.902,234,0.607,235,0.542,236,0.607,237,0.574,238,0.542,239,0.574,240,0.941,241,0.542,242,0.607,243,0.574,244,0.607,245,0.574,246,0.574,247,0.607,248,0.542,249,0.607,250,0.542,251,0.607,252,0.542,253,0.574,254,0.574,255,0.607,256,0.542,257,1.091,258,0.607,259,0.542,260,0.607,261,0.542,262,0.574,263,0.574,264,0.48,265,0.542,266,0.607,267,0.542,268,0.607,269,0.607,270,0.607,271,0.013,272,0.013,299,2.643,300,2.053,328,1.871,344,2.324,359,2.997,406,1.706,408,2.796,461,2.324,497,2.62,518,3.009,523,2.324,552,1.526,556,1.373,862,5.031,863,6.212,864,5.536,865,3.184,866,5.055,867,5.055,868,5.055,869,3.866,870,5.748,871,5.748,872,4.26,873,6.172,874,5.055,875,6.172,876,3.675,877,6.458,878,2.838,879,5.055,880,2.796,881,4.338,882,3.711,883,3.711,884,3.711,885,5.055,886,5.055,887,5.055,888,3.711,889,4.72,890,5.055,891,3.711,892,3.946,893,3.711,894,6.172,895,3.711,896,5.055,897,2.997,898,5.055,899,3.711,900,5.055,901,3.711,902,5.055,903,3.711,904,3.711,905,3.711,906,2.2,907,3.711,908,3.711,909,3.711,910,3.711,911,5.055,912,3.711,913,3.711,914,3.711,915,3.711,916,3.711,917,5.055,918,5.055,919,5.055,920,4.338,921,5.055,922,5.055,923,3.866]],["title/components/CreatemessageComponent.html",[0,0.115,204,0.534]],["body/components/CreatemessageComponent.html",[0,0.201,1,0.366,2,0.589,3,0.102,4,0.102,5,0.41,6,0.41,7,0.41,8,0.088,10,0.717,13,0.366,14,1.232,15,1.232,16,0.388,17,2.583,18,0.556,19,0.548,20,0.659,21,1.54,22,2.548,23,0.624,25,0.855,27,0.147,28,0.298,30,2.913,35,0.434,39,2.007,49,0.589,53,0.701,55,2.107,56,0.813,57,1.751,58,2.116,60,2.086,62,3.269,63,2.107,64,4.415,65,0.49,66,0.02,67,0.394,68,0.304,69,0.391,70,0.423,71,1.881,73,2.049,75,0.896,76,0.827,77,0.71,88,0.659,89,0.599,90,0.727,97,1.904,106,2.236,108,0.366,114,2.129,120,2.259,127,1.655,135,0.659,138,0.282,139,2.106,141,0.163,143,0.687,150,0.978,151,0.102,152,0.117,157,0.663,158,0.433,167,2.032,183,2.435,184,0.41,185,0.624,186,0.524,187,0.41,188,0.842,189,0.41,190,0.366,191,0.41,192,0.41,193,0.366,194,0.41,195,0.366,196,0.41,197,0.388,198,0.41,199,0.366,200,0.41,201,0.366,202,0.41,203,0.41,204,0.851,205,0.41,206,0.366,207,0.624,208,0.366,209,0.41,210,0.366,211,0.305,212,0.41,213,0.366,214,0.41,215,0.624,216,0.366,217,0.842,218,0.366,219,0.41,220,0.366,221,0.41,222,0.366,223,0.41,224,0.366,225,0.41,226,0.388,227,0.388,228,0.366,229,0.41,230,0.366,231,0.41,232,0.366,233,0.752,234,0.41,235,0.366,236,0.41,237,0.388,238,0.366,239,0.388,240,0.754,241,0.366,242,0.41,243,0.388,244,0.41,245,0.388,246,0.388,247,0.41,248,0.366,249,0.41,250,0.366,251,0.41,252,0.366,253,0.388,254,0.388,255,0.41,256,0.366,257,0.624,258,0.41,259,0.366,260,0.41,261,0.366,262,0.388,263,0.388,264,0.325,265,0.366,266,0.41,267,0.366,268,0.41,269,0.41,270,0.41,271,0.018,272,0.016,283,1.751,287,3.269,300,1.984,304,3.664,315,2.435,318,4.336,319,5.338,320,2.913,321,4.049,328,2.157,344,2.679,345,3.935,349,0.993,356,2.679,358,3.668,359,3.051,362,3.281,375,2.007,377,2.435,378,2.309,381,3.576,406,1.153,407,3.139,431,0.654,461,2.679,504,1.857,505,2.246,523,1.751,524,2.116,634,3.935,645,2.913,646,2.107,652,3.289,666,3.576,755,3.269,758,3.042,769,1.487,779,4.336,844,3.159,897,2.259,924,2.152,925,3.809,926,3.809,927,3.953,928,4.607,929,3.953,930,6.39,931,5.684,932,3.953,933,5.145,934,3.809,935,3.809,936,5.145,937,5.145,938,5.145,939,5.145,940,5.145,941,2.259,942,2.507,943,4.208,944,3.989,945,3.809,946,3.809,947,4.336,948,4.415,949,4.772,950,2.913,951,3.269,952,2.507,953,3.809,954,2.647,955,3.269,956,3.809,957,2.667,958,2.507,959,4.415,960,3.809,961,5.339,962,5.145,963,3.576,964,4.415,965,5,966,5.354,967,3.809,968,2.507,969,3.269,970,3.269,971,2.507,972,2.647,973,2.913,974,3.809,975,2.259,976,2.107,977,2.507,978,3.809,979,3.809,980,2.507,981,3.809,982,3.269,983,5.354,984,2.507,985,5.826,986,5.826,987,5.826,988,5,989,4.415,990,3.289,991,2.507,992,4.415,993,2.507,994,2.507,995,2.507,996,2.507,997,2.507,998,2.507,999,2.507,1000,2.507,1001,2.507,1002,4.607,1003,2.507,1004,2.152,1005,2.507,1006,2.507,1007,2.507,1008,3.809,1009,2.507,1010,3.809,1011,2.507,1012,3.809,1013,2.507,1014,5.145,1015,2.507,1016,4.607,1017,2.507,1018,2.507,1019,2.507,1020,3.809,1021,2.507,1022,4.607,1023,2.507,1024,2.152,1025,2.507,1026,2.507,1027,3.809,1028,2.507,1029,2.507,1030,2.507,1031,4.607,1032,4.607,1033,2.507,1034,2.152,1035,2.507,1036,3.809,1037,2.507,1038,2.507,1039,2.152,1040,2.507,1041,3.809,1042,3.809,1043,5.145,1044,5.826,1045,3.809]],["title/interfaces/CustomUser.html",[747,1.353,1046,2.795]],["body/interfaces/CustomUser.html",[3,0.108,4,0.108,8,0.092,10,0.765,17,1.547,19,0.471,27,0.156,28,0.31,32,1.289,37,2.936,44,1.823,46,2.535,52,3.215,56,1.431,58,1.088,61,2.826,66,0.02,67,0.452,68,0.264,71,1.087,73,2.508,74,1.838,75,0.927,76,0.733,77,0.301,87,1.371,88,1.097,89,0.662,90,0.451,92,3.133,94,2.023,96,2.27,98,4.132,99,2.023,100,2.056,105,3.288,113,2.482,114,2.554,127,3.116,128,3.8,129,3.379,135,0.979,138,0.296,141,0.172,144,0.884,146,2.023,147,1.568,148,3.381,149,1.691,151,0.161,152,0.123,157,0.792,158,0.372,164,2.098,253,0.876,271,0.01,272,0.01,283,1.216,299,2.188,304,2.194,305,2.535,308,1.088,310,2.747,315,1.691,317,3.403,322,1.149,331,2.351,333,3.403,334,1.838,335,1.568,336,3.403,338,2.835,343,2.194,344,1.216,349,1.749,356,1.823,358,3.288,362,2.351,363,2.023,366,1.088,371,2.821,375,2.061,377,2.535,378,0.979,402,3.042,407,3.78,408,3.411,420,3.379,421,3.639,431,1.879,435,1.289,441,2.194,506,1.149,520,2.27,523,2.188,539,2.351,556,0.979,557,2.27,558,2.023,595,2.632,637,1.723,646,1.463,648,2.632,653,2.023,658,1.371,747,0.979,748,1.463,751,2.056,802,3.403,831,2.023,876,2.535,880,3.758,889,2.023,897,2.821,954,1.838,957,2.74,963,2.756,972,1.838,990,1.691,1046,4.331,1047,2.27,1048,1.142,1049,2.756,1050,2.27,1051,2.645,1052,2.645,1053,3.508,1054,2.645,1055,3.033,1056,2.645,1057,2.645,1058,2.645,1059,2.645,1060,2.645,1061,2.645,1062,2.645,1063,2.27,1064,3.006,1065,1.691,1066,1.216,1067,1.933,1068,2.645,1069,3.966,1070,2.645,1071,3.403,1072,2.645,1073,2.645,1074,2.27,1075,2.27,1076,2.645,1077,2.645,1078,2.645,1079,2.645,1080,2.645,1081,2.645,1082,2.645,1083,2.645,1084,2.645,1085,2.645,1086,2.645,1087,2.645,1088,2.645,1089,2.645,1090,2.645,1091,3.966,1092,2.645,1093,2.645,1094,2.645,1095,4.758,1096,2.645,1097,2.645,1098,2.645,1099,2.645,1100,2.27,1101,2.645,1102,2.645,1103,2.27,1104,2.27,1105,2.645,1106,4.331,1107,2.645,1108,4.083,1109,2.645,1110,4.758,1111,3.966,1112,4.86,1113,2.645,1114,2.27,1115,2.023,1116,4.86,1117,2.756,1118,2.27,1119,2.756,1120,4.533,1121,4.407,1122,2.645,1123,2.645,1124,3.358,1125,2.645,1126,2.645,1127,2.27,1128,2.023,1129,4.758,1130,4.758,1131,4.758,1132,2.645,1133,4.132,1134,3.966,1135,2.645,1136,2.645,1137,2.645,1138,3.403,1139,4.86,1140,2.645,1141,2.645,1142,2.645,1143,2.023,1144,3.307,1145,2.645,1146,2.645,1147,5.663,1148,2.645,1149,3.966,1150,3.966,1151,2.645,1152,2.645,1153,2.27,1154,2.645,1155,2.27,1156,2.023,1157,2.645,1158,2.645,1159,2.645,1160,4.132,1161,3.936,1162,3.403,1163,2.645,1164,2.645,1165,2.27,1166,2.645,1167,3.082,1168,2.645,1169,3.966,1170,3.966,1171,3.966,1172,2.645,1173,2.645,1174,3.966,1175,3.966,1176,3.403,1177,2.645,1178,2.645,1179,2.645,1180,1.463,1181,2.645,1182,2.27,1183,2.645,1184,2.645,1185,4.758,1186,2.645,1187,2.645,1188,3.966,1189,4.758,1190,2.645,1191,2.535,1192,2.645,1193,2.645,1194,3.966,1195,2.645,1196,2.645,1197,2.645,1198,2.645,1199,2.645,1200,2.27,1201,2.645,1202,2.645,1203,2.645,1204,2.645,1205,2.645,1206,2.645,1207,4.86,1208,4.758,1209,2.645,1210,2.27,1211,2.756,1212,2.756,1213,3.966,1214,2.194,1215,2.194,1216,1.691,1217,2.756,1218,2.645,1219,2.645,1220,2.645,1221,2.645]],["title/components/DialogComponent.html",[0,0.115,206,0.534]],["body/components/DialogComponent.html",[0,0.183,1,0.556,2,0.796,3,0.155,4,0.155,5,0.623,6,0.623,7,0.623,8,0.133,10,0.665,13,0.556,14,1.264,15,1.264,16,0.589,18,0.751,19,0.509,20,0.889,21,1.947,22,3.221,23,0.842,25,1.154,27,0.224,28,0.402,35,0.585,41,3.932,43,2.507,47,3.287,49,0.589,53,0.645,56,0.812,57,2.364,65,0.405,66,0.02,67,0.424,68,0.291,69,0.323,70,0.35,71,1.596,73,1.808,76,0.493,77,0.433,81,3.453,85,3.287,88,0.889,89,0.35,90,0.433,97,1.903,103,2.115,108,0.556,112,3.287,135,0.658,138,0.304,139,1.635,140,3.049,141,0.248,143,1.043,150,1.484,151,0.155,152,0.177,157,0.405,158,0.298,176,5.338,179,3.273,180,3.48,181,3.45,184,0.623,185,0.842,186,0.708,187,0.623,188,1.021,189,0.623,190,0.556,191,0.623,192,0.623,193,0.556,194,0.623,195,0.556,196,0.623,197,0.589,198,0.623,199,0.556,200,0.623,201,0.556,202,0.623,203,0.623,204,0.556,205,0.623,206,0.981,207,0.842,208,0.556,209,0.623,210,0.556,211,0.463,212,0.623,213,0.556,214,0.623,215,0.842,216,0.556,217,1.021,218,0.556,219,0.623,220,0.556,221,0.623,222,0.556,223,0.623,224,0.556,225,0.623,226,0.589,227,0.589,228,0.556,229,0.623,230,0.556,231,0.623,232,0.556,233,0.911,234,0.623,235,0.556,236,0.623,237,0.589,238,0.556,239,0.589,240,0.953,241,0.556,242,0.623,243,0.589,244,0.623,245,0.589,246,0.589,247,0.623,248,0.556,249,0.623,250,0.556,251,0.623,252,0.556,253,0.589,254,0.589,255,0.623,256,0.556,257,0.842,258,0.623,259,0.556,260,0.623,261,0.556,262,0.589,263,0.589,264,0.493,265,0.556,266,0.623,267,0.556,268,0.623,269,0.623,270,0.623,271,0.013,272,0.013,275,4.454,283,2.364,311,3.796,331,3.049,334,3.574,428,3.987,435,2.507,436,3.049,491,5.352,505,1.856,552,1.566,619,2.844,646,2.844,990,3.287,1115,3.932,1180,2.844,1222,3.266,1223,3.221,1224,5.142,1225,5.142,1226,5.59,1227,6.237,1228,4.998,1229,4.998,1230,3.266,1231,4.522,1232,5.142,1233,4.413,1234,5.142,1235,3.574,1236,5.824,1237,4.998,1238,5.824,1239,3.806,1240,3.806,1241,3.932,1242,3.806,1243,3.266,1244,3.266,1245,2.911,1246,3.806,1247,3.806,1248,5.142,1249,5.142,1250,4.77,1251,4.77,1252,5.352,1253,5.142,1254,6.237,1255,5.142,1256,4.77,1257,5.142,1258,4.413,1259,5.142,1260,5.142,1261,3.932,1262,5.142,1263,6.237,1264,6.237,1265,6.237,1266,3.574,1267,4.413,1268,3.287,1269,5.142,1270,5.142,1271,5.142,1272,3.932,1273,5.142,1274,5.142,1275,4.413]],["title/components/EditmessageComponent.html",[0,0.115,208,0.534]],["body/components/EditmessageComponent.html",[0,0.185,1,0.335,2,0.55,3,0.093,4,0.093,5,0.375,6,0.375,7,0.375,8,0.08,10,0.686,13,0.335,14,1.224,15,1.224,16,0.355,18,0.519,19,0.526,20,0.615,23,0.582,25,0.798,27,0.135,28,0.44,35,0.405,39,1.914,44,2.257,49,0.55,52,2.925,53,0.686,55,1.967,56,1.2,57,1.635,58,2.313,60,1.189,65,0.598,66,0.02,67,0.395,68,0.329,69,0.478,70,0.517,71,1.54,73,2.569,75,0.835,84,2.741,87,1.844,88,0.615,89,0.636,90,0.794,103,2.494,106,2.443,108,0.776,113,2.081,114,2.132,126,2.785,128,2.716,135,1.077,138,0.283,141,0.149,150,0.894,151,0.093,152,0.107,157,0.709,158,0.44,164,1.701,183,4.067,184,0.375,185,0.582,186,0.489,187,0.375,188,0.804,189,0.375,190,0.335,191,0.375,192,0.375,193,0.335,194,0.375,195,0.335,196,0.375,197,0.355,198,0.375,199,0.335,200,0.375,201,0.335,202,0.375,203,0.375,204,0.335,205,0.375,206,0.335,207,0.582,208,0.821,209,0.375,210,0.335,211,0.279,212,0.375,213,0.335,214,0.375,215,0.582,216,0.335,217,0.804,218,0.335,219,0.375,220,0.335,221,0.375,222,0.335,223,0.375,224,0.335,225,0.375,226,0.355,227,0.355,228,0.335,229,0.375,230,0.335,231,0.375,232,0.335,233,0.717,234,0.375,235,0.335,236,0.375,237,0.355,238,0.335,239,0.355,240,0.713,241,0.335,242,0.375,243,0.355,244,0.375,245,0.355,246,0.355,247,0.375,248,0.335,249,0.375,250,0.335,251,0.375,252,0.335,253,0.355,254,0.355,255,0.375,256,0.335,257,0.582,258,0.375,259,0.335,260,0.375,261,0.335,262,0.355,263,0.355,264,0.948,265,0.335,266,0.375,267,0.335,268,0.375,269,0.375,270,0.375,271,0.009,272,0.009,275,2.72,283,2.585,284,4.3,297,1.593,298,3.594,299,2.257,300,1.787,301,4.064,306,2.785,308,2.019,311,3.443,321,3.907,322,2.443,326,3.287,327,3.659,328,1.817,332,2.72,335,2.108,337,3.333,338,2.925,339,3.052,340,2.471,343,1.967,344,1.635,347,3.754,349,2.016,356,2.585,366,2.313,375,2.193,377,3.138,378,1.817,395,3.693,402,1.465,404,1.593,405,1.967,406,1.054,410,1.465,411,1.465,425,2.471,431,1.386,434,1.967,435,1.118,436,1.359,450,4.064,452,3.138,453,2.911,497,3.143,523,1.635,535,2.72,539,2.108,638,2.273,639,2.72,647,3.052,648,3.354,651,4.825,656,1.359,704,1.118,758,2.86,769,1.359,844,2.443,949,3.754,963,3.412,972,3.907,976,1.967,990,2.273,1064,2.393,1065,1.465,1117,2.471,1160,4.213,1161,4.076,1180,3.11,1215,3.11,1233,4.213,1235,2.471,1237,3.052,1256,1.753,1276,1.967,1277,3.556,1278,3.556,1279,3.556,1280,5.034,1281,5.866,1282,5.034,1283,4.213,1284,3.556,1285,4.909,1286,5.645,1287,3.052,1288,4.909,1289,4.909,1290,4.909,1291,5.622,1292,3.052,1293,4.213,1294,2.634,1295,3.556,1296,4.213,1297,4.326,1298,5.207,1299,4.909,1300,4.357,1301,3.556,1302,2.915,1303,2.273,1304,3.739,1305,4.357,1306,2.292,1307,4.213,1308,3.412,1309,4.3,1310,3.556,1311,4.357,1312,2.292,1313,6.062,1314,4.213,1315,3.556,1316,3.556,1317,3.556,1318,3.556,1319,3.556,1320,3.556,1321,4.909,1322,4.064,1323,3.556,1324,2.292,1325,4.3,1326,5.622,1327,5.459,1328,5.459,1329,2.292,1330,3.556,1331,2.292,1332,3.691,1333,2.471,1334,2.273,1335,3.556,1336,3.556,1337,2.292,1338,3.556,1339,2.292,1340,2.292,1341,2.292,1342,3.556,1343,2.292,1344,3.556,1345,2.72,1346,3.052,1347,3.052,1348,1.967,1349,2.292,1350,2.471,1351,3.052,1352,2.292,1353,2.292,1354,2.292,1355,2.292,1356,2.292,1357,2.292,1358,1.967,1359,1.593,1360,4.909,1361,2.292,1362,2.292,1363,4.357,1364,1.967,1365,5.313,1366,2.292,1367,4.357,1368,3.412,1369,2.292,1370,2.292,1371,1.967,1372,2.292,1373,2.292,1374,3.556,1375,4.357,1376,2.292,1377,1.967,1378,2.292,1379,2.292,1380,3.052,1381,3.052,1382,2.471,1383,2.273,1384,2.292,1385,1.967,1386,1.967,1387,3.556,1388,4.213,1389,2.72,1390,3.754,1391,3.052,1392,1.967,1393,2.292,1394,3.052,1395,2.292,1396,3.052,1397,5.313,1398,3.556,1399,3.556,1400,3.556,1401,2.292,1402,2.292,1403,2.292,1404,3.556,1405,2.471,1406,2.292,1407,2.292,1408,2.471,1409,3.052,1410,1.465,1411,2.292,1412,1.967,1413,1.967,1414,1.753,1415,2.292,1416,2.292,1417,2.292,1418,3.556,1419,3.052,1420,2.292,1421,2.292,1422,2.292,1423,3.556,1424,3.556,1425,4.909]],["title/components/EmojiPickerComponent.html",[0,0.115,210,0.534]],["body/components/EmojiPickerComponent.html",[0,0.197,1,0.641,2,0.874,3,0.179,4,0.179,5,0.719,6,0.719,7,0.719,8,0.153,10,0.435,13,0.641,14,1.272,15,1.272,16,0.68,18,0.825,19,0.653,20,0.977,23,0.925,25,1.269,27,0.258,35,0.643,43,2.755,47,3.613,53,0.619,56,0.937,65,0.467,66,0.02,67,0.407,68,0.291,69,0.373,70,0.404,73,1.987,81,3.705,89,0.404,90,0.5,105,2.93,106,2.866,108,0.641,138,0.263,139,1.396,140,3.35,141,0.286,151,0.179,152,0.205,157,0.467,158,0.343,164,1.328,184,0.719,185,0.925,186,0.778,187,0.719,188,1.08,189,0.719,190,0.641,191,0.719,192,0.719,193,0.641,194,0.719,195,0.641,196,0.719,197,0.68,198,0.719,199,0.641,200,0.719,201,0.641,202,0.719,203,0.719,204,0.641,205,0.719,206,0.641,207,0.925,208,0.641,209,0.719,210,0.964,211,0.92,212,0.719,213,0.641,214,0.719,215,0.925,216,0.641,217,1.08,218,0.641,219,0.719,220,0.641,221,0.719,222,0.641,223,0.719,224,0.641,225,0.719,226,0.68,227,0.68,228,0.641,229,0.719,230,0.641,231,0.719,232,0.641,233,0.964,234,0.719,235,0.641,236,0.719,237,0.68,238,0.641,239,0.68,240,1.023,241,0.641,242,0.719,243,0.68,244,0.719,245,0.68,246,0.68,247,0.719,248,0.641,249,0.719,250,0.641,251,0.719,252,0.641,253,0.68,254,0.68,255,0.719,256,0.641,257,0.925,258,0.719,259,0.641,260,0.719,261,0.641,262,0.68,263,0.68,264,0.569,265,0.641,266,0.719,267,0.641,268,0.719,269,0.719,270,0.719,271,0.014,272,0.014,310,2.204,322,2.455,359,3.35,966,4.85,1024,5.662,1426,5.662,1427,5.662,1428,3.769,1429,5.662,1430,6.249,1431,5.651,1432,5.651,1433,5.651,1434,7.107,1435,6.597,1436,4.391,1437,4.391,1438,4.391,1439,5.651,1440,4.391,1441,3.769,1442,3.769,1443,4.391,1444,4.391,1445,4.391,1446,4.391]],["title/injectables/EmojiStorageService.html",[1048,1.052,1447,2.795]],["body/injectables/EmojiStorageService.html",[3,0.2,4,0.2,8,0.172,27,0.29,28,0.475,35,0.691,53,0.652,65,0.523,66,0.02,67,0.321,68,0.283,69,0.418,70,0.452,75,0.886,76,0.637,77,0.56,89,0.605,90,0.691,92,3.359,100,3.148,138,0.229,141,0.321,151,0.2,152,0.229,157,0.523,158,0.515,179,2.4,186,0.907,211,0.926,271,0.015,272,0.015,303,3.421,308,2.998,314,4.221,315,3.882,316,4.644,371,4.366,378,2.248,431,1.584,481,4.221,506,2.139,531,2.552,666,4.221,1048,1.748,1066,2.263,1156,5.259,1322,4.644,1447,4.644,1448,2.4,1449,5.901,1450,4.225,1451,6.586,1452,6.876,1453,6.073,1454,4.923,1455,7.363,1456,7.289,1457,7.421,1458,6.876,1459,6.073,1460,4.221,1461,5.212,1462,6.073,1463,4.923,1464,5.212,1465,6.073,1466,6.073,1467,6.073,1468,6.073,1469,6.073,1470,5.212,1471,6.073,1472,6.073,1473,4.923,1474,4.923,1475,4.923,1476,4.923,1477,4.923,1478,4.923,1479,4.923,1480,4.923,1481,4.923,1482,4.923]],["title/components/ForgetPasswordComponent.html",[0,0.115,213,0.534]],["body/components/ForgetPasswordComponent.html",[0,0.175,1,0.51,2,0.75,3,0.142,4,0.142,5,0.571,6,0.571,7,0.571,8,0.122,10,0.551,13,0.51,14,1.258,15,1.258,16,0.54,18,0.708,19,0.551,20,0.838,21,1.86,22,3.079,23,0.793,25,1.088,27,0.205,28,0.379,35,0.551,49,0.93,53,0.688,60,1.86,65,0.515,66,0.02,67,0.392,68,0.305,69,0.412,70,0.445,71,1.525,75,0.424,76,0.721,77,0.634,88,0.838,89,0.553,90,0.634,108,0.51,127,2.841,135,0.838,138,0.313,141,0.227,143,0.956,150,1.36,151,0.142,152,0.163,157,0.592,158,0.524,167,1.769,179,3.427,180,3.645,181,3.326,184,0.571,185,0.793,186,0.667,187,0.571,188,0.984,189,0.571,190,0.51,191,0.571,192,0.571,193,0.51,194,0.571,195,0.51,196,0.571,197,0.54,198,0.571,199,0.51,200,0.571,201,0.51,202,0.571,203,0.571,204,0.51,205,0.571,206,0.51,207,0.793,208,0.51,209,0.571,210,0.51,211,0.424,212,0.571,213,0.955,214,1.098,215,0.793,216,0.51,217,0.984,218,0.51,219,0.571,220,0.51,221,0.571,222,0.51,223,0.571,224,0.51,225,0.571,226,0.54,227,0.54,228,0.51,229,0.571,230,0.51,231,0.571,232,0.51,233,0.878,234,0.571,235,0.51,236,0.571,237,0.54,238,0.51,239,0.54,240,0.911,241,0.51,242,0.571,243,0.54,244,0.571,245,0.54,246,0.54,247,0.571,248,0.51,249,0.571,250,0.51,251,0.571,252,0.51,253,0.861,254,0.54,255,0.571,256,0.51,257,0.793,258,0.571,259,0.51,260,0.571,261,0.51,262,0.54,263,0.54,264,0.452,265,0.878,266,0.571,267,0.51,268,0.571,269,0.571,270,0.571,271,0.012,272,0.012,300,1.54,310,1.36,322,2.105,327,3.117,349,1.451,431,0.91,435,2.362,436,2.872,485,3.705,489,3.844,518,3.427,523,1.604,552,1.435,567,2.668,704,1.701,736,4.157,872,4.18,876,3.558,880,3.326,892,3.097,906,2.872,941,2.872,955,4.157,982,4.157,1067,3.269,1143,3.705,1191,3.097,1261,3.705,1266,4.179,1268,3.097,1294,2.914,1302,2.885,1359,2.424,1383,3.097,1390,2.668,1408,3.367,1483,6.033,1484,6.033,1485,2.668,1486,4.157,1487,4.157,1488,6.943,1489,5.565,1490,5.565,1491,4.844,1492,6.013,1493,3.275,1494,2.23,1495,4.157,1496,3.488,1497,3.367,1498,3.705,1499,2.68,1500,4.844,1501,4.391,1502,3.488,1503,3.488,1504,6.013,1505,4.844,1506,3.097,1507,4.844,1508,4.844,1509,2.994,1510,2.994,1511,2.994,1512,2.668,1513,3.488,1514,3.705,1515,2.668,1516,2.424,1517,2.668,1518,3.488,1519,4.844,1520,3.488,1521,2.424,1522,3.488,1523,3.488,1524,3.488,1525,3.488,1526,2.668,1527,5.565,1528,3.488,1529,3.488,1530,3.488,1531,3.488,1532,3.488,1533,2.424,1534,4.844,1535,4.544,1536,4.157,1537,3.705,1538,3.705,1539,3.705,1540,3.367,1541,3.705,1542,3.705,1543,5.16,1544,4.157,1545,4.157,1546,4.157,1547,4.157,1548,4.157,1549,4.157,1550,4.844,1551,4.844,1552,4.844,1553,4.844,1554,4.844,1555,3.367,1556,4.844,1557,4.844,1558,4.157,1559,4.844]],["title/components/HeaderComponent.html",[0,0.115,216,0.534]],["body/components/HeaderComponent.html",[0,0.188,1,0.504,2,0.744,3,0.14,4,0.14,5,0.565,6,0.565,7,0.565,8,0.121,10,0.342,13,0.504,14,1.257,15,1.257,16,0.534,18,0.702,19,0.623,20,0.832,21,1.85,23,0.787,25,1.08,27,0.203,28,0.433,35,0.547,39,2.158,49,0.856,53,0.708,58,1.42,59,2.207,60,2.178,61,2.462,65,0.367,66,0.02,67,0.36,68,0.279,69,0.293,70,0.317,71,1.64,75,0.728,76,0.844,77,0.761,88,1.198,89,0.55,90,0.761,97,1.78,103,1.978,105,1.79,108,0.504,138,0.318,139,1.097,141,0.225,143,0.946,151,0.14,152,0.258,157,0.511,158,0.376,184,0.565,185,0.787,186,0.662,187,0.565,188,0.98,189,0.565,190,0.504,191,0.565,192,0.565,193,0.504,194,0.565,195,0.504,196,0.565,197,0.534,198,0.565,199,0.504,200,0.565,201,0.504,202,0.565,203,0.565,204,0.504,205,0.565,206,0.504,207,0.787,208,0.504,209,0.565,210,0.504,211,0.42,212,0.565,213,0.504,214,0.565,215,0.787,216,0.952,217,0.98,218,0.504,219,0.565,220,0.504,221,0.565,222,0.504,223,0.565,224,0.874,225,0.565,226,0.534,227,0.534,228,0.504,229,0.565,230,0.504,231,0.565,232,0.504,233,1.035,234,0.565,235,0.504,236,0.565,237,0.534,238,0.504,239,0.534,240,0.906,241,0.874,242,0.565,243,0.534,244,0.565,245,0.534,246,0.534,247,0.565,248,0.504,249,0.565,250,0.504,251,0.565,252,0.504,253,0.534,254,0.926,255,0.565,256,0.504,257,0.787,258,0.565,259,0.504,260,0.565,261,0.504,262,0.534,263,0.534,264,0.447,265,0.504,266,0.565,267,0.874,268,0.565,269,0.565,270,0.565,271,0.012,272,0.012,326,2.698,328,2.412,337,2.851,344,2.544,345,3.678,366,1.978,378,1.78,388,3.342,389,4.166,390,3.342,518,3.377,521,2.66,524,2.462,529,2.996,533,2.207,536,3.846,552,1.42,556,1.278,564,2.962,617,5.593,618,4.971,619,3.699,622,4.232,626,4.529,627,5.137,629,3.342,630,3.846,632,3.736,637,2.734,648,3.061,656,2.047,657,3.342,658,1.79,660,2.851,662,3.678,663,4.023,674,2.207,676,2.962,680,2.962,682,4.529,683,4.232,684,3.846,688,3.538,689,4.232,693,2.64,695,2.399,696,4.577,697,4.127,762,4.127,1104,4.127,1106,4.577,1223,3.061,1297,4.16,1494,2.207,1499,3.605,1560,2.962,1561,3.342,1562,3.678,1563,3.678,1564,5.738,1565,6.687,1566,5.985,1567,4.809,1568,4.809,1569,3.452,1570,4.809,1571,6.517,1572,4.809,1573,5.137,1574,5.137,1575,3.452,1576,3.452,1577,4.809,1578,4.809,1579,4.809,1580,3.452,1581,3.452,1582,3.452,1583,3.452,1584,3.452,1585,3.452,1586,3.452,1587,3.452,1588,3.452,1589,2.64,1590,3.452,1591,3.452,1592,3.452,1593,3.452,1594,4.809,1595,4.809]],["title/components/ImprintComponent.html",[0,0.115,218,0.534]],["body/components/ImprintComponent.html",[0,0.203,1,0.684,2,0.911,3,0.191,4,0.191,5,0.766,6,0.766,7,0.766,8,0.163,10,0.464,13,0.684,14,1.276,15,1.276,16,0.725,18,0.86,19,0.583,20,1.018,23,0.964,25,1.322,66,0.019,67,0.383,108,0.684,138,0.3,141,0.305,151,0.191,152,0.218,158,0.366,179,2.87,180,3.052,184,0.766,185,0.964,186,0.81,187,0.766,188,1.106,189,0.766,190,0.684,191,0.766,192,0.766,193,0.684,194,0.766,195,0.684,196,0.766,197,0.725,198,0.766,199,0.684,200,0.766,201,0.684,202,0.766,203,0.766,204,0.684,205,0.766,206,0.684,207,0.964,208,0.684,209,0.766,210,0.684,211,0.569,212,0.766,213,0.684,214,0.766,215,0.964,216,0.987,217,1.106,218,0.987,219,0.766,220,0.684,221,0.766,222,0.684,223,0.766,224,0.684,225,0.766,226,0.725,227,0.725,228,0.684,229,0.766,230,0.684,231,0.766,232,0.684,233,0.987,234,0.766,235,0.684,236,0.766,237,0.725,238,0.684,239,0.725,240,1.054,241,0.684,242,0.766,243,0.725,244,0.766,245,0.725,246,0.725,247,0.766,248,0.684,249,0.766,250,0.684,251,0.766,252,0.684,253,0.725,254,0.725,255,0.766,256,0.684,257,0.964,258,0.766,259,0.684,260,0.766,261,0.684,262,0.725,263,0.725,264,0.606,265,0.684,266,0.766,267,0.684,268,0.766,269,0.766,270,0.766,271,0.015,272,0.015,552,1.926,1223,3.561,1250,4.502,1574,5.052,1596,4.018,1597,5.886,1598,5.886,1599,3.581,1600,5.052,1601,5.886,1602,5.886,1603,5.886,1604,5.886,1605,5.886,1606,5.886,1607,5.886,1608,5.886,1609,5.886,1610,5.886,1611,4.682,1612,5.886,1613,4.682]],["title/components/LegalnoticeComponent.html",[0,0.115,220,0.534]],["body/components/LegalnoticeComponent.html",[0,0.08,1,0.158,2,0.294,3,0.044,4,0.044,5,0.177,6,0.177,7,0.177,8,0.038,10,0.107,13,0.158,14,1.124,15,1.124,16,0.167,18,0.278,19,0.188,20,0.329,23,0.311,25,0.427,66,0.016,67,0.2,108,0.158,138,0.119,141,0.07,151,0.044,152,0.05,158,0.085,167,0.605,179,2.768,180,2.829,181,1.052,184,0.177,185,0.311,186,0.262,187,0.177,188,0.502,189,0.177,190,0.158,191,0.177,192,0.177,193,0.158,194,0.177,195,0.158,196,0.177,197,0.167,198,0.177,199,0.158,200,0.177,201,0.158,202,0.177,203,0.177,204,0.158,205,0.177,206,0.158,207,0.311,208,0.158,209,0.177,210,0.158,211,0.131,212,0.177,213,0.158,214,0.177,215,0.311,216,0.448,217,0.502,218,0.158,219,0.177,220,0.448,221,0.177,222,0.158,223,0.177,224,0.158,225,0.177,226,0.167,227,0.167,228,0.158,229,0.177,230,0.158,231,0.177,232,0.158,233,0.448,234,0.177,235,0.158,236,0.177,237,0.167,238,0.158,239,0.167,240,0.417,241,0.158,242,0.177,243,0.167,244,0.177,245,0.167,246,0.167,247,0.177,248,0.158,249,0.177,250,0.158,251,0.177,252,0.158,253,0.167,254,0.167,255,0.177,256,0.158,257,0.311,258,0.177,259,0.158,260,0.177,261,0.158,262,0.167,263,0.167,264,0.14,265,0.158,266,0.177,267,0.158,268,0.177,269,0.177,270,0.177,271,0.005,272,0.005,428,3.748,430,5.379,435,3.107,453,2.286,455,4.795,461,3.166,476,1.633,477,6.062,485,5.004,486,1.633,489,4.77,493,5.469,494,1.633,497,3.872,498,3.967,531,1.999,552,0.445,583,2.633,738,3.102,791,5.829,844,0.827,920,4.164,923,2.949,1106,1.455,1112,1.633,1133,1.322,1223,1.409,1251,3.383,1267,3.309,1268,4.567,1272,2.346,1368,3.605,1382,3.372,1383,4.871,1405,4.643,1409,2.186,1410,4.646,1526,3.383,1537,3.383,1538,5.266,1539,4.873,1540,4.492,1542,5.327,1543,1.633,1544,3.796,1545,5.615,1546,3.796,1547,3.309,1549,4.683,1558,2.633,1573,1.633,1599,0.827,1600,1.633,1614,0.928,1615,1.902,1616,1.902,1617,1.081,1618,7.315,1619,5.457,1620,1.902,1621,3.856,1622,4.423,1623,4.423,1624,1.902,1625,1.081,1626,1.081,1627,4.706,1628,3.068,1629,7.034,1630,7.577,1631,1.902,1632,6.841,1633,1.902,1634,5.187,1635,4.872,1636,3.856,1637,1.902,1638,3.068,1639,5.457,1640,1.081,1641,4.852,1642,3.856,1643,3.856,1644,4.423,1645,3.068,1646,1.902,1647,1.081,1648,4.423,1649,3.856,1650,7.001,1651,1.902,1652,1.902,1653,5.187,1654,6.543,1655,6.27,1656,4.423,1657,5.165,1658,3.068,1659,1.902,1660,3.068,1661,4.423,1662,1.902,1663,1.081,1664,3.856,1665,1.081,1666,4.423,1667,1.902,1668,1.902,1669,3.856,1670,3.856,1671,6.615,1672,1.902,1673,3.068,1674,4.852,1675,5.457,1676,4.852,1677,4.852,1678,3.068,1679,1.902,1680,1.902,1681,3.068,1682,4.423,1683,5.862,1684,6.965,1685,6.841,1686,3.068,1687,3.068,1688,1.902,1689,3.856,1690,3.068,1691,1.902,1692,1.902,1693,3.068,1694,3.068,1695,1.902,1696,3.068,1697,1.902,1698,1.902,1699,1.902,1700,2.633,1701,1.902,1702,5.457,1703,1.902,1704,3.068,1705,5.783,1706,1.081,1707,3.068,1708,4.852,1709,1.902,1710,3.068,1711,6.019,1712,4.423,1713,1.081,1714,3.068,1715,1.902,1716,1.081,1717,5.187,1718,1.902,1719,3.068,1720,3.856,1721,1.902,1722,4.852,1723,3.068,1724,3.856,1725,5.829,1726,1.081,1727,6.372,1728,6.543,1729,1.902,1730,3.856,1731,3.068,1732,1.902,1733,4.852,1734,3.856,1735,1.902,1736,2.548,1737,3.856,1738,4.161,1739,5.678,1740,1.902,1741,1.902,1742,4.852,1743,1.902,1744,1.081,1745,4.423,1746,6.841,1747,4.423,1748,3.856,1749,3.856,1750,4.483,1751,1.902,1752,1.902,1753,4.852,1754,4.423,1755,3.068,1756,3.856,1757,2.633,1758,1.081,1759,1.902,1760,1.902,1761,1.902,1762,1.902,1763,3.068,1764,1.902,1765,3.068,1766,1.902,1767,1.902,1768,1.902,1769,3.856,1770,1.902,1771,3.068,1772,1.902,1773,3.068,1774,1.902,1775,1.902,1776,1.902,1777,1.902,1778,1.902,1779,3.856,1780,3.796,1781,1.081,1782,3.068,1783,3.068,1784,3.068,1785,1.902,1786,1.902,1787,1.902,1788,2.633,1789,1.902,1790,1.902,1791,3.068,1792,4.852,1793,2.548,1794,1.081,1795,3.068,1796,1.902,1797,1.902,1798,3.068,1799,6.886,1800,4.943,1801,6.927,1802,6.615,1803,5.678,1804,6.927,1805,6.27,1806,4.423,1807,5.457,1808,1.902,1809,1.902,1810,1.902,1811,3.068,1812,1.902,1813,1.902,1814,5.187,1815,1.902,1816,3.068,1817,1.081,1818,6.372,1819,1.902,1820,3.856,1821,4.423,1822,5.187,1823,3.068,1824,3.856,1825,1.902,1826,1.902,1827,3.068,1828,1.902,1829,1.902,1830,3.856,1831,1.902,1832,4.852,1833,5.187,1834,1.902,1835,5.187,1836,5.457,1837,3.068,1838,3.068,1839,1.902,1840,1.902,1841,1.902,1842,1.902,1843,1.902,1844,1.902,1845,3.068,1846,3.068,1847,1.902,1848,3.068,1849,3.068,1850,3.068,1851,1.902,1852,3.068,1853,1.081,1854,1.902,1855,1.081,1856,1.902,1857,3.068,1858,1.902,1859,4.423,1860,1.081,1861,1.902,1862,1.902,1863,1.902,1864,1.902,1865,1.902,1866,3.068,1867,1.902,1868,1.902,1869,1.902,1870,1.902,1871,1.902,1872,1.902,1873,1.902,1874,1.902,1875,1.902,1876,1.902,1877,1.081,1878,1.902,1879,4.852,1880,1.081,1881,1.902,1882,1.081,1883,1.902,1884,1.902,1885,2.548,1886,4.161,1887,3.068,1888,3.856,1889,3.068,1890,1.902,1891,1.902,1892,1.633,1893,1.081,1894,1.081,1895,1.902,1896,3.068,1897,1.902,1898,1.902,1899,4.852,1900,1.902,1901,1.902,1902,1.081,1903,1.902,1904,3.856,1905,1.902,1906,3.068,1907,1.902,1908,1.902,1909,3.856,1910,4.423,1911,1.902,1912,3.856,1913,1.081,1914,1.902,1915,1.902,1916,2.548,1917,1.902,1918,1.081,1919,2.548,1920,1.902,1921,1.902,1922,3.068,1923,1.902,1924,1.902,1925,1.902,1926,3.068,1927,3.068,1928,2.633,1929,1.902,1930,1.902,1931,3.856,1932,1.902,1933,2.548,1934,3.068,1935,1.902,1936,1.902,1937,1.081,1938,1.902,1939,3.068,1940,1.902,1941,3.068,1942,1.902,1943,1.902,1944,1.902,1945,3.068,1946,3.068,1947,1.902,1948,1.902,1949,1.902,1950,1.081,1951,1.081,1952,1.902,1953,3.068,1954,3.856,1955,1.081,1956,1.902,1957,1.902,1958,3.068,1959,3.856,1960,1.902,1961,1.902,1962,1.902,1963,1.081,1964,1.902,1965,1.902,1966,1.902,1967,3.068,1968,1.081,1969,3.856,1970,1.902,1971,1.633,1972,1.902,1973,1.902,1974,4.852,1975,1.081,1976,3.856,1977,1.902,1978,1.902,1979,1.902,1980,1.902,1981,4.423,1982,1.902,1983,1.902,1984,3.068,1985,3.068,1986,1.902,1987,3.068,1988,3.068,1989,3.068,1990,2.548,1991,1.902,1992,4.852,1993,1.902,1994,3.068,1995,2.548,1996,4.423,1997,4.423,1998,2.548,1999,1.902,2000,1.902,2001,5.187,2002,3.068,2003,3.068,2004,3.856,2005,1.081,2006,3.068,2007,1.902,2008,3.068,2009,1.902,2010,3.068,2011,3.856,2012,1.902,2013,1.902,2014,3.068,2015,1.081,2016,1.902,2017,3.856,2018,1.902,2019,1.902,2020,1.902,2021,3.856,2022,2.548,2023,3.856,2024,2.548,2025,1.902,2026,1.902,2027,1.902,2028,1.902,2029,1.902,2030,3.068,2031,1.902,2032,1.902,2033,1.081,2034,1.081,2035,1.081,2036,3.068,2037,1.902,2038,1.081,2039,1.902,2040,1.902,2041,1.902,2042,1.081,2043,1.081,2044,3.068,2045,1.902,2046,1.902,2047,1.902,2048,1.902,2049,1.902,2050,1.081,2051,1.902,2052,3.068,2053,1.902,2054,1.081,2055,1.902,2056,1.455,2057,1.081,2058,1.902,2059,1.902,2060,3.068,2061,1.902,2062,1.902,2063,1.902,2064,1.902,2065,1.902,2066,1.902,2067,1.902,2068,2.548,2069,1.902,2070,1.902,2071,1.081,2072,1.902,2073,1.081,2074,1.081,2075,1.902,2076,3.068,2077,1.902,2078,1.902,2079,1.902,2080,1.081,2081,1.902,2082,3.068,2083,1.902,2084,1.633,2085,1.902,2086,1.902,2087,1.081,2088,1.081,2089,3.497,2090,1.902,2091,1.081,2092,1.902,2093,1.902,2094,1.081,2095,1.081,2096,1.902,2097,1.902,2098,3.856,2099,3.856,2100,2.548,2101,1.902,2102,1.081,2103,1.902,2104,3.068,2105,1.902,2106,1.902,2107,1.081,2108,1.902,2109,1.902,2110,1.902,2111,1.902,2112,1.081,2113,1.081,2114,1.902,2115,1.902,2116,1.633,2117,1.902,2118,1.902,2119,1.081,2120,1.902,2121,1.902,2122,3.856,2123,3.856,2124,3.068,2125,1.902,2126,1.902,2127,1.902,2128,1.633,2129,1.081,2130,1.902,2131,1.902,2132,1.902,2133,1.902,2134,1.902,2135,1.902,2136,1.902,2137,1.902,2138,1.081,2139,1.902,2140,1.633,2141,1.902,2142,1.902,2143,1.902,2144,1.902,2145,1.902,2146,4.423,2147,3.068,2148,1.902,2149,1.902,2150,1.902,2151,1.902,2152,1.902,2153,3.856,2154,3.068,2155,1.902,2156,1.081,2157,1.902,2158,1.081,2159,1.902,2160,1.902,2161,1.902,2162,1.081,2163,1.902,2164,1.902,2165,1.902,2166,3.068,2167,1.902,2168,1.081,2169,1.902,2170,1.902,2171,1.902,2172,1.902,2173,1.902,2174,1.902,2175,1.902,2176,1.902,2177,1.902,2178,1.081,2179,1.902,2180,4.852,2181,1.902,2182,1.902,2183,1.902,2184,1.902,2185,1.081,2186,1.902,2187,1.902,2188,1.902,2189,1.902,2190,1.902,2191,1.902,2192,1.902,2193,1.902,2194,1.081,2195,1.081,2196,1.081,2197,1.902,2198,1.081,2199,1.081,2200,3.796,2201,1.902,2202,1.081,2203,1.081,2204,1.081,2205,1.081,2206,2.548,2207,4.161,2208,1.081,2209,4.423,2210,1.902,2211,1.902,2212,1.081,2213,1.081,2214,2.548,2215,1.081,2216,1.081,2217,1.902,2218,3.068,2219,1.902,2220,1.902,2221,1.081,2222,1.081,2223,1.081,2224,1.902,2225,1.081,2226,1.081,2227,1.081,2228,1.902,2229,1.081,2230,1.081,2231,1.902,2232,1.081,2233,1.081,2234,2.548,2235,1.902,2236,2.548,2237,1.081,2238,1.902,2239,1.902,2240,1.081,2241,1.081,2242,1.081,2243,1.081,2244,1.081,2245,1.081,2246,1.902,2247,1.902,2248,2.548,2249,2.548,2250,2.548,2251,1.081,2252,1.081,2253,1.902,2254,2.548,2255,2.548,2256,1.081,2257,1.081,2258,1.081,2259,1.081,2260,1.081,2261,1.081,2262,1.081,2263,1.081,2264,1.081,2265,2.548,2266,0.928,2267,1.081,2268,1.081,2269,1.081,2270,1.081,2271,1.081,2272,1.081,2273,1.081,2274,1.081,2275,2.548,2276,1.081,2277,1.081,2278,1.081,2279,1.081,2280,1.081,2281,1.081,2282,1.081,2283,1.902,2284,1.081,2285,1.081,2286,1.081,2287,1.081,2288,1.081,2289,1.081]],["title/components/LoginComponent.html",[0,0.115,222,0.534]],["body/components/LoginComponent.html",[0,0.14,1,0.348,2,0.566,3,0.097,4,0.097,5,0.39,6,0.39,7,0.39,8,0.083,10,0.236,13,0.348,14,1.227,15,1.227,16,0.368,18,0.535,19,0.589,20,0.633,23,0.599,27,0.295,28,0.286,35,0.417,49,0.69,53,0.589,60,1.807,65,0.253,66,0.02,67,0.29,68,0.252,69,0.202,70,0.219,71,1.481,75,0.289,76,0.648,77,0.508,88,0.987,89,0.336,90,0.271,108,0.348,135,0.935,138,0.252,139,1.815,141,0.155,143,0.652,151,0.097,152,0.111,157,0.389,158,0.286,167,1.418,184,0.39,185,0.599,186,0.504,187,0.39,188,0.82,189,0.39,190,0.348,191,0.39,192,0.39,193,0.348,194,0.39,195,0.348,196,0.39,197,0.368,198,0.39,199,0.348,200,0.39,201,0.348,202,0.39,203,0.39,204,0.348,205,0.39,206,0.348,207,0.599,208,0.348,209,0.39,210,0.348,211,0.289,212,0.39,213,0.348,214,0.599,215,0.599,216,0.348,217,0.82,218,0.348,219,0.39,220,0.348,221,0.39,222,0.834,223,0.39,224,0.348,225,0.39,226,0.368,227,0.368,228,0.348,229,0.39,230,0.348,231,0.39,232,0.348,233,0.731,234,0.39,235,0.348,236,0.39,237,0.368,238,0.348,239,0.368,240,0.73,241,0.348,242,0.39,243,0.368,244,0.39,245,0.368,246,0.368,247,0.39,248,0.348,249,0.39,250,0.348,251,0.39,252,0.348,253,0.566,254,0.368,255,0.39,256,0.348,257,0.599,258,0.39,259,0.348,260,0.39,261,0.348,262,0.368,263,0.368,264,0.308,265,0.731,266,0.39,267,0.348,268,0.39,269,0.39,270,0.39,271,0.009,272,0.009,283,1.683,327,2.312,349,1.41,366,1.506,375,1.427,382,4.485,431,0.621,454,2.544,461,1.094,502,1.411,507,3.828,508,2.17,512,3.1,518,3.312,521,2.025,528,2.042,529,3.343,531,1.898,533,2.34,534,2.042,538,3.141,547,3.48,552,0.979,567,1.82,578,1.82,584,2.17,585,1.411,586,1.411,587,2.851,588,3.141,590,4.375,591,3.525,592,3.757,593,3.525,594,4.547,595,3.157,597,4.134,598,4.455,599,4.343,600,4.132,601,4.297,602,3.671,603,3.81,604,4.349,605,3.757,606,2.544,607,3.829,608,3.411,609,4.581,610,3.984,611,2.799,637,1.59,641,4.814,660,1.411,688,1.521,704,1.16,708,1.521,709,1.521,711,2.544,713,4.67,714,3.201,715,5.612,716,2.042,718,2.544,720,3.48,721,3.967,722,4.422,723,3.801,724,3.923,725,3.48,731,1.654,732,1.411,734,4.814,735,3.757,737,4.612,738,2.851,740,3.757,741,3.1,743,5.266,744,5.266,745,4.375,746,4.365,778,4.957,781,3.649,783,4.547,797,4.297,798,1.82,800,5.515,803,3.828,805,3.411,806,2.042,807,2.042,808,4.297,809,4.639,812,3.411,813,3.141,814,4.297,815,2.042,824,2.799,826,1.654,828,4.375,829,4.132,830,4.365,833,2.042,834,2.799,835,3.48,836,1.82,839,4.547,842,1.82,844,1.59,853,3.828,855,3.141,860,4.134,869,1.82,906,2.644,941,2.17,975,2.969,1167,1.234,1191,2.34,1223,2.467,1235,1.654,1245,1.82,1250,2.799,1251,2.799,1294,2.735,1302,2.802,1359,1.654,1414,1.82,1493,2.802,1494,1.521,1499,2.025,1512,1.82,1514,2.799,1515,1.82,1533,1.654,1561,3.48,1750,2.799,2290,2.042,2291,3.828,2292,2.38,2293,3.66,2294,3.66,2295,4.639,2296,4.46,2297,5.007,2298,3.66,2299,2.38,2300,3.141,2301,2.38,2302,2.38,2303,2.38,2304,2.38,2305,3.66,2306,3.66,2307,2.38,2308,2.38,2309,3.66,2310,2.38,2311,3.66,2312,2.38,2313,2.38,2314,2.38,2315,2.042,2316,3.66,2317,3.66,2318,3.66,2319,3.66,2320,3.141,2321,2.38,2322,2.38,2323,2.38,2324,6.794,2325,6.636,2326,5.886,2327,2.38,2328,3.141,2329,2.38,2330,2.38,2331,6.72,2332,3.828,2333,2.644,2334,2.38,2335,3.141,2336,2.38,2337,2.38,2338,3.66,2339,3.828,2340,3.66,2341,2.38,2342,2.38,2343,2.38,2344,2.38,2345,2.38,2346,2.38,2347,5.945,2348,1.82,2349,2.38,2350,2.042,2351,2.38,2352,2.042,2353,5.007,2354,5.405,2355,2.38,2356,2.38,2357,2.38,2358,4.46,2359,5.405,2360,2.042,2361,5.405,2362,4.46,2363,5.405,2364,5.007,2365,5.708,2366,2.38,2367,3.66,2368,2.38,2369,2.38,2370,2.38,2371,2.38,2372,2.38,2373,2.38,2374,2.38,2375,2.042,2376,2.38,2377,4.46,2378,5.405,2379,2.38,2380,2.38,2381,2.38,2382,2.38,2383,2.38,2384,2.38,2385,3.828,2386,2.38,2387,2.042,2388,2.042,2389,2.38,2390,2.38,2391,2.38,2392,2.38,2393,2.38,2394,4.46,2395,3.66,2396,2.38,2397,3.66,2398,2.38,2399,2.042,2400,2.38,2401,2.38,2402,2.38,2403,3.141,2404,2.38,2405,2.38,2406,2.38,2407,2.042,2408,3.66,2409,2.38,2410,2.38,2411,2.38,2412,2.38,2413,2.042]],["title/components/LogoComponent.html",[0,0.115,224,0.534]],["body/components/LogoComponent.html",[0,0.206,1,0.711,2,0.933,3,0.198,4,0.198,5,0.797,6,0.797,7,0.797,8,0.17,10,0.482,13,0.711,14,1.278,15,1.278,16,0.753,18,0.881,19,0.597,20,0.842,23,0.987,25,1.354,66,0.019,67,0.393,108,0.711,138,0.227,141,0.317,151,0.198,152,0.227,158,0.381,184,0.797,185,0.987,186,0.83,187,0.797,188,1.121,189,0.797,190,0.711,191,0.797,192,0.797,193,0.711,194,0.797,195,0.711,196,0.797,197,0.753,198,0.797,199,0.711,200,0.797,201,0.711,202,0.797,203,0.797,204,0.711,205,0.797,206,0.711,207,0.987,208,0.711,209,0.797,210,0.711,211,0.592,212,0.797,213,0.711,214,0.797,215,0.987,216,0.711,217,1.121,218,0.711,219,0.797,220,0.711,221,0.797,222,0.711,223,0.797,224,1,225,0.797,226,0.753,227,0.753,228,0.711,229,0.797,230,0.711,231,0.797,232,0.711,233,1,234,0.797,235,0.711,236,0.797,237,0.753,238,0.711,239,0.753,240,1.073,241,0.711,242,0.797,243,0.753,244,0.797,245,0.753,246,0.753,247,0.797,248,0.711,249,0.797,250,0.711,251,0.797,252,0.711,253,0.753,254,0.753,255,0.797,256,0.711,257,0.987,258,0.797,259,0.711,260,0.797,261,0.711,262,0.753,263,0.753,264,0.63,265,0.711,266,0.797,267,0.711,268,0.797,269,0.797,270,0.797,271,0.015,272,0.015,547,4.191,2360,5.175,2414,4.176,2415,6.03,2416,6.03]],["title/components/MainComponent.html",[0,0.115,228,0.534]],["body/components/MainComponent.html",[0,0.195,1,0.633,2,0.867,3,0.176,4,0.176,5,0.709,6,0.709,7,0.709,8,0.151,10,0.429,13,0.633,14,1.271,15,1.271,16,0.67,18,0.818,19,0.555,20,0.969,21,2.075,23,0.917,25,1.257,27,0.255,28,0.438,35,0.638,39,2.559,49,0.867,53,0.689,65,0.46,66,0.02,67,0.404,68,0.202,69,0.368,76,0.725,77,0.638,88,0.749,89,0.515,90,0.707,108,0.633,138,0.33,141,0.282,143,1.187,151,0.176,152,0.202,158,0.485,184,0.709,185,0.917,186,0.771,187,0.709,188,1.074,189,0.709,190,0.633,191,0.709,192,0.709,193,0.633,194,0.709,195,0.959,196,0.709,197,0.67,198,0.709,199,0.633,200,0.709,201,0.633,202,0.709,203,0.709,204,0.633,205,0.709,206,0.633,207,0.917,208,0.633,209,0.709,210,0.633,211,0.526,212,0.709,213,0.633,214,0.709,215,0.917,216,0.959,217,1.074,218,0.633,219,0.709,220,0.633,221,0.709,222,0.633,223,0.709,224,0.633,225,0.709,226,0.67,227,0.67,228,0.959,229,0.709,230,0.633,231,0.709,232,0.633,233,0.959,234,0.709,235,0.633,236,0.709,237,0.67,238,0.633,239,0.67,240,1.016,241,0.633,242,0.709,243,0.67,244,0.709,245,0.67,246,0.67,247,0.709,248,0.633,249,0.709,250,0.633,251,0.709,252,0.633,253,0.67,254,0.67,255,0.709,256,0.633,257,0.917,258,0.709,259,0.633,260,0.709,261,0.633,262,0.67,263,0.67,264,0.561,265,0.959,266,0.709,267,0.633,268,0.709,269,0.709,270,0.709,271,0.014,272,0.014,299,2.854,300,2.252,406,1.991,431,1.129,504,2.73,505,3.026,551,2.568,704,2.111,941,3.32,1294,3.025,1325,4.283,1359,3.01,1493,3.523,1512,3.312,1515,3.312,1533,3.01,1599,3.312,2417,3.716,2418,5.6,2419,5.6,2420,6.207,2421,6.563,2422,3.716,2423,4.331,2424,4.331,2425,4.331,2426,3.892,2427,4.331,2428,5.6,2429,4.331,2430,4.331,2431,4.331,2432,4.331,2433,4.331,2434,4.331]],["title/components/MentionComponent.html",[0,0.115,230,0.534]],["body/components/MentionComponent.html",[0,0.203,1,0.444,2,0.68,3,0.124,4,0.124,5,0.498,6,0.498,7,0.498,8,0.106,10,0.666,13,0.444,14,1.248,15,1.248,16,0.47,17,2.75,18,0.642,19,0.685,20,0.76,21,1.725,23,0.719,25,0.987,27,0.179,28,0.442,32,3.53,35,0.5,43,2.142,44,3.139,49,0.875,51,2.931,53,0.676,61,2.123,63,4.229,65,0.601,66,0.02,67,0.445,68,0.322,69,0.48,70,0.52,73,2.109,75,0.849,76,0.809,77,0.644,88,1.181,89,0.52,90,0.644,93,3.771,94,3.361,97,2.314,100,3.539,103,2.571,108,0.444,113,1.626,114,2.569,126,2.809,128,3.127,135,0.893,138,0.308,139,1.397,141,0.198,142,1.943,143,0.833,144,1.016,145,1.682,151,0.124,152,0.142,157,0.702,158,0.469,164,0.92,167,1.397,172,3.361,184,0.498,185,0.719,186,0.605,187,0.498,188,0.925,189,0.498,190,0.444,191,0.498,192,0.498,193,0.444,194,0.498,195,0.444,196,0.498,197,0.47,198,0.498,199,0.444,200,0.498,201,0.444,202,0.498,203,0.498,204,0.444,205,0.498,206,0.444,207,0.719,208,0.444,209,0.498,210,0.444,211,0.37,212,0.498,213,0.444,214,0.498,215,0.719,216,0.444,217,0.925,218,0.444,219,0.498,220,0.444,221,0.498,222,0.444,223,0.498,224,0.444,225,0.498,226,0.47,227,0.47,228,0.444,229,0.498,230,0.913,231,0.498,232,0.444,233,0.826,234,0.498,235,0.444,236,0.498,237,0.47,238,0.444,239,0.47,240,0.845,241,0.444,242,0.498,243,0.47,244,0.498,245,0.47,246,0.47,247,0.498,248,0.444,249,0.498,250,0.444,251,0.498,252,0.444,253,0.47,254,0.47,255,0.498,256,0.444,257,0.719,258,0.498,259,0.444,260,0.498,261,0.444,262,0.47,263,0.47,264,0.394,265,0.444,266,0.498,267,0.444,268,0.498,269,0.498,270,0.498,271,0.011,272,0.011,299,2.373,300,1.987,308,1.808,310,1.714,314,4.344,316,5.221,322,1.909,328,2.587,359,2.605,362,3.352,366,2.571,367,4.852,368,2.605,375,1.714,389,4.365,406,1.398,408,3.127,419,3.361,420,2.809,421,3.361,425,2.113,481,3.054,489,2.809,524,2.326,614,4.805,878,2.325,944,4.603,948,3.771,950,5.563,1004,2.609,1067,3.329,1100,3.771,1108,2.609,1114,3.771,1167,2.278,1180,2.431,1405,3.054,1460,3.054,1516,2.113,1635,3.771,2435,2.609,2436,4.394,2437,4.394,2438,5.161,2439,5.161,2440,4.394,2441,5.653,2442,5.653,2443,4.394,2444,4.78,2445,4.394,2446,4.324,2447,4.324,2448,3.771,2449,4.394,2450,3.04,2451,3.04,2452,3.04,2453,7.201,2454,3.771,2455,4.394,2456,4.394,2457,3.04,2458,3.04,2459,3.04,2460,3.04,2461,3.771,2462,3.771,2463,3.771,2464,4.394,2465,3.04,2466,3.04,2467,3.04,2468,2.609,2469,3.04,2470,4.394,2471,3.04,2472,3.04,2473,3.04,2474,3.04,2475,3.04,2476,3.04,2477,3.04,2478,3.04,2479,3.04,2480,3.04,2481,5.161,2482,4.394,2483,3.04,2484,3.04,2485,5.161,2486,3.04,2487,3.04,2488,3.04,2489,3.04,2490,3.04,2491,4.394,2492,4.394,2493,4.394]],["title/injectables/MentionService.html",[944,2.337,1048,1.052]],["body/injectables/MentionService.html",[0,0.227,3,0.154,4,0.154,8,0.132,10,0.735,19,0.617,27,0.223,28,0.401,35,0.584,49,0.587,53,0.728,58,2.111,63,2.838,65,0.742,66,0.02,67,0.46,68,0.341,69,0.593,70,0.641,75,0.894,76,0.807,77,0.709,84,2.502,87,2.66,88,1.206,89,0.657,90,0.781,100,3.229,106,2.229,113,2.721,114,2.19,120,3.042,128,2.838,135,1.125,138,0.239,139,2.132,141,0.247,143,1.039,151,0.154,152,0.177,156,3.256,157,0.729,158,0.572,167,1.206,186,1,227,0.794,262,0.794,271,0.013,272,0.013,310,2.001,318,2.637,320,5.129,335,3.042,358,1.967,366,2.562,378,2.305,420,2.425,431,1.338,506,1.648,551,2.249,614,4.661,844,2.526,944,3.982,950,5.695,959,4.99,961,5.334,969,3.256,970,3.256,973,5.129,975,3.977,1048,1.477,1066,1.744,1074,4.403,1167,1.967,1180,3.446,1334,4.609,1429,6.133,1448,1.85,2116,3.256,2454,5.584,2462,4.403,2463,4.403,2468,3.256,2494,3.256,2495,6.858,2496,5.131,2497,5.131,2498,5.131,2499,5.131,2500,6.229,2501,5.131,2502,3.794,2503,6.229,2504,6.229,2505,5.131,2506,5.131,2507,5.756,2508,5.131,2509,5.131,2510,3.794,2511,3.794,2512,5.814,2513,3.794,2514,3.794,2515,5.131,2516,5.131,2517,5.131,2518,3.794,2519,3.794,2520,3.794,2521,5.131,2522,6.975,2523,3.794,2524,6.229,2525,5.131,2526,3.794,2527,6.707,2528,3.794,2529,6.229,2530,5.131,2531,3.794,2532,6.229,2533,3.794,2534,5.814,2535,5.131,2536,3.794,2537,3.794,2538,3.794,2539,3.794,2540,3.794,2541,5.814,2542,3.794,2543,3.794,2544,3.794,2545,3.794,2546,3.794,2547,3.794,2548,3.794,2549,3.794,2550,3.794,2551,3.794,2552,3.794,2553,4.403,2554,3.794,2555,3.794,2556,3.794,2557,3.794,2558,3.794,2559,3.794,2560,3.794,2561,3.794]],["title/components/MenuChannelsComponent.html",[0,0.115,232,0.534]],["body/components/MenuChannelsComponent.html",[0,0.198,1,0.414,2,0.646,3,0.115,4,0.115,5,0.464,6,0.464,7,0.464,8,0.099,10,0.491,13,0.414,14,1.243,15,1.243,16,0.976,17,2.91,18,0.61,19,0.577,20,0.722,21,1.657,23,0.684,27,0.167,28,0.327,30,4.459,35,0.475,39,2.379,44,1.304,49,0.846,51,3.641,52,2.9,53,0.689,56,0.891,58,1.718,65,0.444,66,0.02,67,0.38,68,0.308,69,0.355,70,0.456,71,1.499,75,0.741,76,0.755,77,0.664,88,0.946,89,0.536,90,0.776,97,1.546,103,1.718,108,0.414,112,2.67,114,1.923,120,2.476,135,0.946,138,0.302,141,0.185,142,1.813,143,0.777,145,1.568,150,1.106,151,0.115,152,0.132,157,0.62,158,0.493,167,2.005,173,3.194,184,0.464,185,0.684,186,0.575,187,0.464,188,0.895,189,0.464,190,0.891,191,0.464,192,0.464,193,0.414,194,0.464,195,0.414,196,0.464,197,0.439,198,0.464,199,0.414,200,0.464,201,0.414,202,0.464,203,0.464,204,0.414,205,0.464,206,0.414,207,0.684,208,0.414,209,0.464,210,0.414,211,0.345,212,0.464,213,0.414,214,0.464,215,0.684,216,0.414,217,0.895,218,0.414,219,0.464,220,0.414,221,0.464,222,0.414,223,0.464,224,0.414,225,0.464,226,0.439,227,0.439,228,0.414,229,0.464,230,0.414,231,0.464,232,0.891,233,1.007,234,0.464,235,0.414,236,0.464,237,0.439,238,0.414,239,0.439,240,0.812,241,0.414,242,0.464,243,0.439,244,0.464,245,0.439,246,0.439,247,0.464,248,0.414,249,0.464,250,0.414,251,0.464,252,0.414,253,0.439,254,0.439,255,0.464,256,0.414,257,0.684,258,0.464,259,0.414,260,0.464,261,0.414,262,0.439,263,0.439,264,0.367,265,0.414,266,0.464,267,0.414,268,0.464,269,0.464,270,0.464,271,0.011,272,0.011,281,5.004,283,2.279,297,1.971,298,3.899,304,3.965,305,3.17,306,3.17,307,3.194,311,3.716,326,2.036,343,2.31,356,1.92,371,2.476,375,1.629,382,4.137,395,3.446,404,1.971,409,2.433,410,1.813,411,1.813,412,1.971,481,2.903,502,1.681,504,2.036,505,2.417,508,2.476,529,2.976,578,4.459,584,2.476,585,1.681,586,1.681,587,1.813,591,3.616,593,3.917,595,1.568,598,3.728,599,3.17,600,3.616,602,2.743,603,2.94,604,3.983,605,2.903,606,4.239,609,3.497,610,2.476,611,2.168,652,2.67,660,1.681,663,1.813,684,2.903,708,1.813,709,1.813,710,4.95,711,1.971,712,4.183,720,4.239,722,3.497,723,3.17,724,3.17,725,1.971,731,1.971,732,1.681,740,4.239,741,4.239,758,3.275,769,1.681,778,2.903,779,4.239,780,2.168,781,3.17,783,3.792,798,2.168,812,3.792,824,2.168,826,2.903,828,2.903,829,2.903,831,4.183,834,2.168,835,2.903,836,2.168,839,2.168,842,4.95,844,1.232,860,2.168,869,4.459,947,2.903,957,2.165,975,1.681,1075,4.694,1167,3.355,1506,2.67,2333,2.94,2352,2.433,2385,3.584,2403,2.433,2413,2.433,2447,3.194,2461,3.584,2507,3.584,2562,5.371,2563,5.371,2564,2.433,2565,4.958,2566,4.958,2567,4.176,2568,4.958,2569,4.958,2570,4.958,2571,5.47,2572,6.1,2573,4.183,2574,4.176,2575,5.235,2576,4.176,2577,3.194,2578,4.255,2579,4.176,2580,2.835,2581,4.176,2582,4.694,2583,5.47,2584,5.47,2585,2.835,2586,4.176,2587,4.176,2588,4.176,2589,4.176,2590,2.835,2591,2.835,2592,3.584,2593,4.176,2594,4.176,2595,4.176,2596,4.176,2597,2.835,2598,5.47,2599,2.835,2600,2.835,2601,2.835,2602,2.835,2603,2.835,2604,2.835,2605,2.168,2606,2.835,2607,2.835,2608,4.958,2609,4.176,2610,2.835,2611,4.255,2612,2.835,2613,2.835,2614,2.835,2615,2.835,2616,2.835,2617,2.835,2618,2.835,2619,4.176,2620,4.176,2621,3.584,2622,3.584,2623,2.835,2624,2.835,2625,2.835,2626,2.835,2627,2.835,2628,2.835,2629,2.835,2630,2.835,2631,2.835,2632,4.958,2633,2.835,2634,4.958,2635,2.835,2636,2.835,2637,2.835,2638,2.835,2639,4.176,2640,2.835]],["title/components/MenuComponent.html",[0,0.115,235,0.534]],["body/components/MenuComponent.html",[0,0.195,1,0.631,2,0.865,3,0.176,4,0.176,5,0.707,6,0.707,7,0.707,8,0.151,10,0.428,13,0.631,14,1.271,15,1.271,16,0.669,18,0.817,19,0.554,20,0.967,23,0.915,25,1.256,27,0.254,35,0.637,49,0.959,53,0.554,56,1.193,65,0.459,66,0.02,67,0.404,68,0.201,69,0.367,70,0.397,71,1.906,89,0.397,90,0.492,108,0.631,138,0.33,141,0.281,151,0.176,152,0.289,157,0.595,158,0.513,184,0.707,185,0.915,186,0.77,187,0.707,188,1.073,189,0.707,190,0.631,191,0.707,192,0.707,193,0.631,194,0.707,195,0.631,196,0.707,197,0.669,198,0.707,199,0.631,200,0.707,201,0.631,202,0.707,203,0.707,204,0.631,205,0.707,206,0.631,207,0.915,208,0.631,209,0.707,210,0.631,211,0.525,212,0.707,213,0.631,214,0.707,215,0.915,216,0.631,217,1.073,218,0.631,219,0.707,220,0.631,221,0.707,222,0.631,223,0.707,224,0.631,225,0.707,226,0.669,227,0.669,228,0.631,229,0.707,230,0.631,231,0.707,232,0.958,233,1.076,234,0.707,235,1.016,236,0.707,237,0.669,238,0.958,239,1.015,240,1.015,241,0.631,242,0.707,243,0.669,244,0.707,245,0.669,246,0.669,247,0.707,248,0.631,249,0.707,250,0.631,251,0.707,252,0.631,253,0.669,254,0.865,255,0.707,256,0.631,257,0.915,258,0.707,259,0.631,260,0.707,261,0.631,262,0.669,263,0.669,264,0.559,265,0.631,266,0.707,267,0.631,268,0.707,269,0.707,270,0.707,271,0.014,272,0.014,328,2.07,331,3.316,335,3.316,349,1.71,524,2.3,556,1.599,632,3.841,637,2.43,674,2.762,757,3.305,758,3.591,768,3.708,769,2.562,947,3.887,975,3.316,1297,4.557,2563,3.305,2641,3.708,2642,5.593,2643,5.593,2644,5.627,2645,4.321,2646,5.593,2647,5.593,2648,4.321,2649,5.593,2650,5.593,2651,3.305,2652,4.321,2653,3.708,2654,4.321,2655,3.708,2656,3.305,2657,4.321,2658,4.321]],["title/components/MenuHeaderComponent.html",[0,0.115,238,0.534]],["body/components/MenuHeaderComponent.html",[0,0.186,1,0.575,2,0.814,3,0.16,4,0.16,5,0.644,6,0.644,7,0.644,8,0.137,10,0.39,13,0.575,14,1.266,15,1.266,16,0.609,18,0.768,19,0.521,20,0.909,23,0.861,25,1.181,27,0.231,28,0.515,35,0.599,49,0.916,53,0.671,60,1.758,65,0.418,66,0.02,67,0.386,68,0.183,69,0.334,70,0.362,71,1.732,76,0.681,77,0.599,88,1.093,89,0.483,90,0.674,97,1.946,103,2.163,108,0.575,115,2.734,135,1.024,138,0.295,141,0.256,151,0.16,152,0.276,157,0.559,158,0.411,184,0.644,185,0.861,186,0.724,187,0.644,188,1.035,189,0.644,190,0.575,191,0.644,192,0.644,193,0.575,194,0.644,195,0.575,196,0.644,197,0.609,198,0.644,199,0.575,200,0.644,201,0.575,202,0.644,203,0.644,204,0.575,205,0.644,206,0.575,207,0.861,208,0.575,209,0.644,210,0.575,211,0.478,212,0.644,213,0.575,214,0.644,215,0.861,216,0.575,217,1.035,218,0.575,219,0.644,220,0.575,221,0.644,222,0.575,223,0.644,224,0.575,225,0.644,226,0.609,227,0.609,228,0.575,229,0.644,230,0.575,231,0.644,232,0.575,233,1.099,234,0.644,235,0.575,236,0.644,237,0.609,238,0.99,239,0.609,240,0.969,241,0.575,242,0.644,243,0.609,244,0.644,245,0.609,246,0.609,247,0.644,248,0.575,249,0.644,250,0.575,251,0.644,252,0.575,253,0.609,254,0.978,255,0.644,256,0.575,257,0.861,258,0.644,259,0.575,260,0.644,261,0.575,262,0.609,263,0.609,264,0.767,265,0.575,266,0.644,267,0.575,268,0.644,269,0.644,270,0.644,271,0.013,272,0.013,326,3.429,328,1.946,344,2.723,388,2.734,389,3.361,478,4.512,521,2.909,524,1.618,529,3.274,530,4.021,533,3.786,536,4.711,556,1.456,619,3.98,620,5.817,626,4.711,629,3.654,630,4.116,632,3.73,637,1.71,648,3.276,656,2.333,657,3.654,658,2.04,660,2.333,661,4.512,662,4.021,663,4.212,664,3.377,674,2.515,682,4.95,683,4.529,684,4.116,685,5.082,686,5.082,687,5.082,688,3.786,689,4.529,694,3.377,695,2.734,757,3.009,758,3.472,769,2.333,1297,4.393,1561,3.654,1562,4.021,1563,4.021,1564,4.512,1589,3.009,2562,5.293,2644,5.082,2651,5.293,2655,3.377,2656,3.009,2659,3.009,2660,4.512,2661,5.258,2662,3.935,2663,3.377]],["title/components/MenutogglerComponent.html",[0,0.115,241,0.534]],["body/components/MenutogglerComponent.html",[0,0.193,1,0.617,2,0.853,3,0.172,4,0.172,5,0.692,6,0.692,7,0.692,8,0.148,10,0.418,13,0.617,14,1.27,15,1.27,16,0.654,18,0.805,19,0.546,20,0.953,23,0.902,25,1.238,27,0.249,28,0.431,35,0.627,43,2.687,49,0.949,53,0.685,58,2.267,66,0.02,67,0.359,68,0.197,75,0.67,76,0.714,77,0.627,86,4.215,88,1.124,89,0.388,90,0.627,97,2.04,103,2.267,108,0.617,138,0.257,139,1.752,141,0.275,143,1.158,151,0.172,152,0.197,158,0.33,184,0.692,185,0.902,186,0.759,187,0.692,188,1.064,189,0.692,190,0.617,191,0.692,192,0.692,193,0.617,194,0.692,195,0.617,196,0.692,197,0.654,198,0.692,199,0.617,200,0.692,201,0.617,202,0.692,203,0.692,204,0.617,205,0.692,206,0.617,207,0.902,208,0.617,209,0.692,210,0.617,211,0.514,212,0.692,213,0.617,214,0.692,215,0.902,216,0.617,217,1.064,218,0.617,219,0.692,220,0.617,221,0.692,222,0.617,223,0.692,224,0.617,225,0.692,226,0.654,227,0.654,228,0.617,229,0.692,230,0.617,231,0.692,232,0.617,233,1.084,234,0.692,235,0.617,236,0.692,237,0.654,238,0.617,239,0.654,240,1.004,241,1.01,242,0.692,243,0.654,244,0.692,245,0.654,246,0.654,247,0.692,248,0.617,249,0.692,250,0.617,251,0.692,252,0.617,253,0.654,254,0.654,255,0.692,256,0.617,257,0.902,258,0.692,259,0.617,260,0.692,261,0.617,262,0.654,263,0.654,264,0.547,265,0.617,266,0.692,267,0.617,268,0.692,269,0.692,270,0.692,271,0.014,272,0.014,308,2.523,328,2.271,356,2.534,366,2.523,369,4.263,524,2.267,529,2.82,533,3.922,539,3.268,610,3.268,618,4.263,619,4.031,626,4.806,629,3.831,630,4.263,656,2.505,657,3.831,658,2.191,674,2.701,682,4.687,688,3.922,693,3.232,695,2.937,696,4.215,976,3.393,990,3.524,1506,3.922,1589,3.232,2291,5.264,2664,3.626,2665,5.512,2666,5.512,2667,5.512,2668,6.134,2669,5.512,2670,4.226,2671,5.512,2672,6.134,2673,6.134,2674,6.134,2675,6.134,2676,4.226,2677,5.512,2678,5.512]],["title/interfaces/Message.html",[349,0.953,747,1.353]],["body/interfaces/Message.html",[3,0.207,4,0.207,8,0.177,27,0.298,28,0.484,32,3.388,66,0.02,68,0.354,69,0.637,70,0.639,75,0.95,135,1.232,138,0.237,144,1.696,151,0.272,211,0.617,271,0.016,272,0.016,349,1.913,441,3.941,747,2.471,748,2.807,751,3.602,957,3.693,1053,3.844,1064,2.474,1119,3.527,1211,4.951,1212,4.951,1214,3.941,1215,3.941,1216,3.244,1217,4.951,1332,4.224,2679,3.527,2680,5.314,2681,5.314,2682,4.224,2683,3.244]],["title/components/ProfileviewComponent.html",[0,0.115,248,0.534]],["body/components/ProfileviewComponent.html",[0,0.215,1,0.45,2,0.687,3,0.125,4,0.125,5,0.504,6,0.504,7,0.504,8,0.108,10,0.7,13,0.45,14,1.249,15,1.249,16,0.477,17,2.884,18,0.648,19,0.515,20,0.767,21,1.738,23,0.726,25,0.996,27,0.181,28,0.347,32,3.061,35,0.505,36,4.882,37,3.632,43,2.163,44,2.391,46,3.854,49,0.88,51,3.433,53,0.7,63,3.473,65,0.553,66,0.02,67,0.446,68,0.323,69,0.442,70,0.523,73,2.408,75,0.832,76,0.575,77,0.505,84,2.163,85,3.637,88,0.899,89,0.609,90,0.351,100,2.3,108,0.45,113,2.106,114,2.208,126,1.97,127,2.472,128,3.147,135,0.533,138,0.302,139,1.653,141,0.201,143,0.844,145,1.704,151,0.125,152,0.144,157,0.688,158,0.518,164,1.899,167,0.98,176,3.393,179,2.163,180,2.3,181,2.454,183,2.836,184,0.504,185,0.726,186,0.783,187,0.504,188,0.931,189,0.504,190,0.45,191,0.504,192,0.504,193,0.45,194,0.504,195,0.45,196,0.504,197,0.477,198,0.504,199,0.45,200,0.504,201,0.45,202,0.504,203,0.504,204,0.45,205,0.504,206,0.45,207,0.726,208,0.45,209,0.504,210,0.45,211,0.375,212,0.504,213,0.45,214,0.504,215,0.726,216,0.45,217,0.931,218,0.45,219,0.504,220,0.45,221,0.504,222,0.45,223,0.504,224,0.45,225,0.504,226,0.477,227,0.477,228,0.45,229,0.504,230,0.45,231,0.504,232,0.45,233,0.831,234,0.504,235,0.45,236,0.504,237,0.477,238,0.45,239,0.477,240,0.851,241,0.45,242,0.504,243,0.477,244,0.504,245,0.477,246,0.477,247,0.504,248,0.917,249,0.504,250,0.45,251,0.504,252,0.45,253,0.477,254,0.477,255,0.504,256,0.45,257,0.726,258,0.504,259,0.45,260,0.504,261,0.45,262,0.477,263,0.477,264,0.399,265,0.45,266,0.504,267,0.45,268,0.504,269,0.504,270,0.504,271,0.011,272,0.011,283,3.221,284,4.802,300,2.265,301,5.065,303,2.141,304,2.876,308,2.817,310,2.67,311,2.454,331,2.631,338,2.04,349,1.483,351,2.644,353,3.808,358,2.696,359,2.631,361,5.389,362,2.631,363,3.393,371,3.373,384,4.882,404,2.141,407,2.949,408,3.147,412,2.141,428,1.97,430,2.356,431,1.157,435,2.163,441,1.704,450,2.356,452,1.97,453,1.827,454,2.141,455,2.356,497,2.3,551,1.827,656,1.827,666,3.084,965,4.882,976,3.147,1039,2.644,1067,3.339,1115,3.393,1120,3.637,1121,3.084,1124,3.574,1143,4.35,1153,3.808,1167,1.597,1258,3.808,1351,3.808,1358,2.644,1382,2.141,1410,1.97,1657,3.808,1780,3.808,2266,2.644,2444,4.802,2575,4.462,2684,2.644,2685,4.437,2686,4.437,2687,4.437,2688,4.437,2689,5.689,2690,5.689,2691,4.437,2692,3.081,2693,3.081,2694,5.689,2695,4.462,2696,3.081,2697,3.081,2698,3.081,2699,4.437,2700,6.623,2701,3.081,2702,4.437,2703,3.081,2704,4.437,2705,4.437,2706,3.081,2707,4.437,2708,4.437,2709,4.437,2710,3.081,2711,5.2,2712,3.081,2713,3.081,2714,3.081,2715,3.081,2716,3.081,2717,3.081,2718,3.081,2719,2.644,2720,3.081,2721,3.081,2722,4.437,2723,3.081,2724,3.081,2725,4.437,2726,3.081,2727,4.437,2728,4.437,2729,3.081,2730,4.437,2731,4.437,2732,4.437,2733,3.081,2734,3.081,2735,3.081,2736,3.081,2737,3.081,2738,2.356,2739,3.081,2740,3.081,2741,3.081,2742,3.081,2743,2.356,2744,3.081,2745,3.081,2746,3.081,2747,3.081,2748,4.437,2749,3.081,2750,3.081,2751,3.081,2752,4.437,2753,4.437,2754,4.437]],["title/interfaces/Reaction.html",[747,1.353,2682,2.167]],["body/interfaces/Reaction.html",[3,0.224,4,0.224,8,0.192,27,0.324,28,0.508,32,2.683,66,0.019,68,0.303,70,0.506,75,0.946,135,1.195,138,0.256,144,1.839,151,0.281,211,0.868,271,0.016,272,0.016,349,1.802,441,3.593,747,2.558,748,3.044,751,3.367,957,3.367,1053,3.593,1064,2.683,1119,4.961,1211,4.514,1212,4.514,1214,3.593,1215,3.593,1216,3.518,1217,4.514,1332,3.851,2679,3.824,2680,4.208,2681,4.208,2682,4.232,2683,3.518]],["title/components/ReactionsComponent.html",[0,0.115,250,0.534]],["body/components/ReactionsComponent.html",[0,0.169,1,0.476,2,0.714,3,0.133,4,0.133,5,0.533,6,0.533,7,0.533,8,0.114,10,0.732,13,0.476,14,1.253,15,1.253,16,0.83,18,0.674,19,0.578,20,0.798,21,1.792,23,0.756,25,1.036,27,0.376,35,0.526,37,2.393,43,2.251,44,2.682,46,3.73,47,2.951,49,0.504,53,0.694,56,0.695,61,2.936,65,0.68,66,0.02,67,0.468,68,0.327,69,0.543,70,0.566,75,0.892,76,0.755,77,0.664,81,3.179,88,0.798,89,0.661,90,0.371,92,2.554,97,1.709,98,3.208,105,3.593,106,2.006,108,0.476,113,2.368,114,2.051,135,1.009,138,0.287,139,1.958,140,2.737,141,0.212,143,0.892,144,1.089,151,0.133,152,0.152,157,0.68,158,0.255,164,1.396,167,1.035,184,0.533,185,0.756,186,0.635,187,0.533,188,0.955,189,0.533,190,0.476,191,0.533,192,0.533,193,0.476,194,0.533,195,0.476,196,0.533,197,0.504,198,0.533,199,0.476,200,0.533,201,0.476,202,0.533,203,0.533,204,0.476,205,0.533,206,0.476,207,0.756,208,0.476,209,0.533,210,0.476,211,0.874,212,0.533,213,0.476,214,0.533,215,0.756,216,0.476,217,0.955,218,0.476,219,0.533,220,0.476,221,0.533,222,0.476,223,0.533,224,0.476,225,0.533,226,0.504,227,0.504,228,0.476,229,0.533,230,0.476,231,0.533,232,0.476,233,0.852,234,0.533,235,0.476,236,0.533,237,0.504,238,0.476,239,0.504,240,0.878,241,0.476,242,0.533,243,0.504,244,0.533,245,0.504,246,0.504,247,0.533,248,0.476,249,0.533,250,0.852,251,0.533,252,0.476,253,0.504,254,0.504,255,0.533,256,0.476,257,0.756,258,0.533,259,0.476,260,0.533,261,0.476,262,0.504,263,0.504,264,0.422,265,0.476,266,0.533,267,0.476,268,0.533,269,0.533,270,0.533,271,0.012,272,0.012,303,2.263,310,2.275,322,2.006,323,3.53,343,2.554,349,1.521,356,2.122,358,3.024,371,3.459,381,4.28,407,2.393,420,2.082,431,1.807,461,2.465,531,2.393,556,1.205,892,3.428,1055,2.491,1065,2.082,1067,3.118,1118,3.962,1127,5.489,1128,4.462,1180,2.554,1207,4.602,1215,3.638,1216,4.089,1268,3.73,1555,3.727,1725,5.007,2140,2.795,2682,4.527,2683,4.089,2719,2.795,2755,2.795,2756,4.616,2757,4.616,2758,4.616,2759,4.616,2760,4.616,2761,4.616,2762,4.616,2763,6.159,2764,3.257,2765,4.616,2766,3.257,2767,3.257,2768,3.257,2769,3.257,2770,4.616,2771,3.257,2772,5.834,2773,3.257,2774,4.616,2775,6.836,2776,3.962,2777,3.53,2778,3.962,2779,4.616,2780,4.616,2781,3.257,2782,4.616,2783,3.257,2784,4.616,2785,3.257,2786,4.616,2787,4.616,2788,4.616,2789,3.257,2790,3.257,2791,3.257,2792,3.257,2793,4.616,2794,3.257,2795,3.257,2796,3.257,2797,3.257,2798,3.257,2799,3.257,2800,3.257,2801,3.257,2802,3.257,2803,5.363,2804,2.795,2805,6.396,2806,4.616,2807,4.616,2808,3.257,2809,5.363,2810,5.363,2811,4.616,2812,3.257,2813,6.159,2814,3.257,2815,4.616]],["title/pipes/RelativeDatePipe.html",[2816,2.337,2817,2.54]],["body/pipes/RelativeDatePipe.html",[3,0.18,4,0.18,8,0.155,13,0.647,18,0.917,19,0.621,35,0.504,53,0.439,56,1.461,60,1.9,65,0.471,66,0.02,67,0.431,68,0.207,69,0.376,70,0.407,75,0.928,77,0.857,89,0.577,138,0.265,139,2.104,141,0.289,147,2.627,151,0.231,152,0.265,157,0.604,164,1.34,271,0.014,272,0.014,340,4.6,378,2.323,431,1.826,504,2.771,531,2.297,532,4.799,658,2.297,714,4.232,751,4.024,892,4.695,1214,4.15,1521,3.95,2056,3.388,2333,2.627,2777,4.799,2816,4.011,2817,3.95,2818,3.388,2819,4.347,2820,3.388,2821,4.877,2822,5.385,2823,4.431,2824,4.799,2825,6.01,2826,6.01,2827,6.19,2828,5.681,2829,5.681,2830,5.681,2831,6.303,2832,5.681,2833,5.681,2834,5.385,2835,5.385,2836,6.112,2837,6.112,2838,6.01,2839,5.385,2840,3.802,2841,3.079,2842,3.802,2843,3.802,2844,3.802,2845,3.802,2846,4.799,2847,4.877,2848,5.385,2849,5.385,2850,4.877,2851,4.347,2852,3.802,2853,3.802,2854,3.802,2855,3.802,2856,3.802,2857,3.802,2858,3.802,2859,3.802,2860,3.802,2861,3.802,2862,3.802,2863,3.802,2864,3.802,2865,3.802]],["title/components/ResetPasswordComponent.html",[0,0.115,252,0.534]],["body/components/ResetPasswordComponent.html",[0,0.177,1,0.518,2,0.758,3,0.144,4,0.144,5,0.581,6,0.581,7,0.581,8,0.124,10,0.351,13,0.518,14,1.259,15,1.259,16,0.549,18,0.716,19,0.651,20,0.847,21,1.877,22,3.106,23,0.802,25,1.1,27,0.209,28,0.474,35,0.558,39,2.563,49,0.869,53,0.706,56,1.046,65,0.644,66,0.02,67,0.394,68,0.32,69,0.416,70,0.45,71,1.659,73,1.723,75,0.834,76,0.851,77,0.748,88,1.137,89,0.584,90,0.689,108,0.518,135,1.047,138,0.306,141,0.231,143,0.972,150,1.383,151,0.144,152,0.165,157,0.644,158,0.474,184,0.581,185,0.802,186,0.674,187,0.581,188,0.991,189,0.581,190,0.518,191,0.581,192,0.581,193,0.518,194,0.581,195,0.518,196,0.581,197,0.549,198,0.581,199,0.518,200,0.581,201,0.518,202,0.581,203,0.581,204,0.518,205,0.581,206,0.518,207,0.802,208,0.518,209,0.581,210,0.518,211,0.431,212,0.581,213,0.518,214,0.581,215,0.802,216,0.518,217,0.991,218,0.518,219,0.581,220,0.518,221,0.581,222,0.518,223,0.581,224,0.518,225,0.581,226,0.549,227,0.549,228,0.518,229,0.581,230,0.518,231,0.581,232,0.518,233,0.884,234,0.581,235,0.518,236,0.581,237,0.549,238,0.518,239,0.549,240,0.919,241,0.518,242,0.581,243,0.549,244,0.581,245,0.549,246,0.549,247,0.581,248,0.518,249,0.581,250,0.518,251,0.581,252,0.96,253,1.042,254,0.549,255,0.581,256,0.518,257,0.802,258,0.581,259,0.518,260,0.581,261,0.518,262,0.549,263,0.549,264,0.459,265,0.518,266,0.581,267,0.518,268,0.581,269,0.581,270,0.581,271,0.012,272,0.012,299,2.784,300,2.021,310,1.383,322,2.129,327,2.54,366,2.016,378,1.814,406,1.631,428,3.133,431,1.278,504,2.389,505,2.737,518,3.439,521,3.636,523,2.253,541,3.406,542,3.406,552,1.459,556,1.313,646,2.711,652,3.133,872,4.201,880,3.636,897,2.905,906,2.905,954,3.406,1067,3.284,1176,4.818,1405,2.465,1408,2.465,1410,2.267,1485,2.712,1486,4.205,1487,4.205,1494,2.267,1495,3.044,1497,3.406,1498,3.747,1499,2.711,1501,4.682,1509,3.044,1510,3.044,1511,3.044,1516,2.465,1517,2.712,1526,2.712,1535,4.417,1536,4.205,1538,3.747,1548,4.205,2399,3.044,2866,6.166,2867,6.166,2868,5.614,2869,5.614,2870,6.968,2871,5.614,2872,6.355,2873,4.9,2874,6.056,2875,5.454,2876,4.9,2877,4.205,2878,4.205,2879,4.205,2880,3.547,2881,4.9,2882,3.547,2883,3.547,2884,6.056,2885,3.547,2886,4.205,2887,4.9,2888,4.9,2889,4.9,2890,4.9,2891,3.547,2892,3.547,2893,4.9,2894,3.547,2895,4.9,2896,3.547,2897,3.547,2898,3.044,2899,3.044,2900,3.547,2901,3.547,2902,3.547,2903,3.547,2904,3.547,2905,3.547,2906,3.547,2907,3.547,2908,4.9]],["title/injectables/SaveEditMessageService.html",[1048,1.052,2909,2.795]],["body/injectables/SaveEditMessageService.html",[3,0.152,4,0.152,8,0.13,10,0.738,19,0.612,27,0.219,28,0.396,35,0.577,44,2.843,49,0.957,52,2.843,53,0.661,57,3.194,60,2.067,65,0.726,66,0.02,67,0.421,68,0.311,69,0.55,70,0.594,73,2.442,75,0.906,88,0.877,89,0.613,90,0.656,103,2.085,108,0.903,113,2.289,114,2.547,135,1.243,138,0.301,141,0.243,150,1.453,151,0.152,152,0.174,157,0.78,158,0.483,164,1.743,183,3.953,264,0.971,271,0.013,272,0.013,297,2.59,298,4.265,299,2.843,300,2.121,306,3.683,308,2.93,335,3.006,338,2.331,343,2.804,349,2.015,356,2.331,366,2.543,368,3.006,375,1.977,378,1.876,395,4.004,410,2.383,411,2.383,425,2.59,431,1.322,452,3.241,453,3.006,497,2.987,506,1.619,638,3.241,639,3.877,648,3.42,704,1.817,844,2.899,976,2.804,1048,1.459,1066,1.714,1117,3.523,1160,3.523,1161,3.523,1180,2.804,1215,2.804,1235,3.523,1256,2.85,1282,5.55,1283,4.351,1292,4.351,1293,4.95,1294,3.094,1298,5.497,1302,3.459,1303,3.241,1307,5.306,1308,4.895,1309,3.877,1322,4.729,1328,4.351,1332,4.176,1333,4.297,1334,3.953,1348,3.198,1350,3.523,1364,3.198,1368,2.59,1371,3.198,1377,3.198,1380,3.198,1381,3.198,1382,2.59,1383,2.383,1385,3.198,1386,3.198,1388,4.351,1389,3.877,1390,3.877,1391,4.351,1392,3.198,1394,4.944,1396,4.944,1412,3.198,1413,3.198,1414,2.85,1448,1.817,2605,2.85,2909,4.729,2910,5.858,2911,3.198,2912,6.183,2913,5.07,2914,5.07,2915,5.07,2916,3.727,2917,5.761,2918,5.07,2919,3.727,2920,5.07,2921,5.07,2922,3.727,2923,3.727,2924,3.198,2925,2.85,2926,3.198,2927,3.727,2928,3.727,2929,5.07,2930,3.727,2931,3.727,2932,3.727,2933,3.727,2934,3.727]],["title/injectables/SearchService.html",[943,2.54,1048,1.052]],["body/injectables/SearchService.html",[3,0.103,4,0.103,8,0.089,10,0.737,17,2.923,27,0.149,28,0.301,35,0.438,51,2.407,52,2.88,53,0.731,56,1.395,60,2.094,61,1.582,63,3.239,65,0.666,66,0.02,67,0.439,68,0.35,69,0.532,70,0.576,74,4.353,75,0.925,76,0.923,77,0.811,88,0.439,89,0.601,90,0.807,92,2.128,95,2.942,97,1.917,98,3.599,99,4.79,100,3.627,103,1.582,113,1.917,114,2.299,127,2.017,138,0.292,141,0.165,144,0.849,145,1.405,148,2.263,149,1.623,151,0.103,152,0.118,157,0.724,158,0.59,164,1.84,167,0.807,264,0.847,271,0.018,272,0.01,283,3.277,300,1.646,304,4.041,308,2.13,318,2.673,319,5.23,337,2.28,338,1.768,349,1.756,356,3.096,358,3.389,375,2.283,377,4.305,379,4.444,381,4.954,390,2.673,407,3.627,419,1.942,422,2.179,423,2.179,431,1.756,506,1.103,551,1.506,816,4.444,844,3.201,927,3.984,929,3.984,931,5.779,932,3.984,943,2.673,957,1.994,988,5.025,989,3.301,992,4.444,1048,1.107,1053,3.675,1055,1.942,1064,2.263,1065,1.623,1066,1.168,1116,3.301,1117,2.673,1139,3.984,1144,2.673,1210,2.179,1293,1.765,1303,4.654,1304,3.301,1448,1.238,1460,2.673,2375,5.611,2426,2.673,2444,3.551,2446,2.942,2447,4.79,2448,4.444,2621,3.984,2924,2.179,2925,1.942,2935,2.179,2936,5.564,2937,5.564,2938,5.564,2939,5.564,2940,4.643,2941,6.264,2942,4.643,2943,4.643,2944,4.643,2945,6.082,2946,4.643,2947,4.643,2948,4.643,2949,5.855,2950,5.179,2951,3.846,2952,3.846,2953,3.846,2954,3.846,2955,3.846,2956,3.846,2957,3.846,2958,3.846,2959,2.539,2960,3.846,2961,3.846,2962,3.846,2963,2.539,2964,6.644,2965,3.846,2966,3.846,2967,2.539,2968,3.846,2969,2.539,2970,3.846,2971,2.539,2972,3.846,2973,3.846,2974,2.539,2975,5.179,2976,3.846,2977,2.539,2978,3.846,2979,2.539,2980,3.846,2981,2.539,2982,3.846,2983,2.539,2984,3.846,2985,2.539,2986,2.539,2987,2.539,2988,2.539,2989,2.539,2990,3.846,2991,2.539,2992,2.539,2993,3.846,2994,2.539,2995,2.539,2996,3.846,2997,2.539,2998,2.539,2999,3.846,3000,2.539,3001,3.846,3002,2.539,3003,2.539,3004,2.539,3005,3.846,3006,2.539,3007,2.539,3008,3.846,3009,2.539,3010,2.539,3011,2.539,3012,2.539,3013,2.539,3014,2.539,3015,3.846,3016,2.539,3017,4.643,3018,2.539,3019,3.846,3020,2.539,3021,3.846,3022,2.539,3023,2.539,3024,2.539,3025,2.539,3026,2.539,3027,2.539,3028,2.539,3029,2.539,3030,2.539,3031,2.539,3032,2.539,3033,2.539,3034,2.539,3035,2.539,3036,3.846,3037,2.539,3038,2.539,3039,2.539,3040,3.846,3041,2.539,3042,3.846,3043,2.539,3044,2.539,3045,2.539,3046,2.539,3047,3.846,3048,2.539,3049,2.539,3050,2.539,3051,2.539,3052,2.539,3053,2.539,3054,4.643,3055,4.643,3056,4.643,3057,3.846,3058,2.539,3059,3.846,3060,2.539]],["title/injectables/SharedService.html",[758,1.782,1048,1.052]],["body/injectables/SharedService.html",[3,0.116,4,0.116,8,0.1,10,0.717,16,0.849,17,2.691,19,0.415,27,0.168,28,0.328,35,0.477,37,3.43,49,0.441,52,3.331,53,0.733,56,1.59,58,1.725,65,0.715,66,0.02,67,0.438,68,0.314,69,0.572,70,0.618,71,1.503,74,4.886,75,0.94,76,0.902,77,0.863,88,0.948,89,0.687,90,0.696,108,0.893,113,2.262,114,2.625,138,0.272,141,0.186,144,0.953,146,2.18,147,1.69,151,0.116,152,0.133,157,0.758,158,0.554,164,1.268,264,0.946,271,0.011,272,0.011,305,1.822,310,2.383,314,2.914,319,4.505,322,1.822,323,3.206,343,3.586,349,1.974,362,4.228,369,3.811,375,2.623,407,3.36,431,1.69,498,2.18,506,1.238,539,4.374,556,1.055,558,2.18,595,2.319,751,3.487,756,5.244,758,2.674,947,3.811,957,2.578,961,5.277,964,4.706,972,3.811,983,3.598,1048,1.207,1050,2.446,1053,3.66,1064,3.225,1065,1.822,1066,1.31,1120,4.411,1121,4.247,1124,2.949,1144,4.247,1165,4.268,1200,2.446,1214,3.66,1280,5.015,1286,3.598,1287,3.598,1298,4.831,1303,1.822,1309,3.206,1327,5.244,1332,3.251,1333,1.981,1334,3.506,1368,1.981,1448,1.39,1461,3.598,1506,3.506,1521,1.981,2578,3.598,2592,3.598,2683,2.68,2824,3.206,2846,2.18,3061,2.446,3062,4.973,3063,4.973,3064,4.973,3065,4.973,3066,4.973,3067,4.973,3068,4.193,3069,4.193,3070,5.484,3071,5.484,3072,5.484,3073,5.484,3074,5.484,3075,4.193,3076,4.193,3077,4.193,3078,4.193,3079,4.193,3080,2.85,3081,4.193,3082,4.193,3083,2.85,3084,4.193,3085,2.85,3086,4.193,3087,4.193,3088,2.85,3089,4.193,3090,4.973,3091,4.193,3092,5.844,3093,2.85,3094,2.85,3095,2.85,3096,2.85,3097,5.484,3098,2.85,3099,2.85,3100,4.193,3101,4.193,3102,2.85,3103,4.193,3104,2.85,3105,4.193,3106,2.85,3107,4.193,3108,2.85,3109,4.193,3110,2.85,3111,3.598,3112,4.193,3113,4.193,3114,2.85,3115,4.193,3116,2.85,3117,2.85,3118,4.193,3119,2.85,3120,4.193,3121,2.85,3122,4.193,3123,2.85,3124,2.85,3125,4.193,3126,2.85,3127,2.85,3128,2.85,3129,2.85,3130,2.85,3131,2.85,3132,2.85,3133,2.85,3134,2.85,3135,2.85,3136,2.85,3137,2.85,3138,2.85,3139,2.85,3140,2.85,3141,2.85,3142,2.85,3143,2.85,3144,2.85,3145,4.193,3146,2.85,3147,2.85,3148,2.85,3149,2.85,3150,4.973,3151,2.85,3152,2.85,3153,2.85]],["title/components/SignInComponent.html",[0,0.115,256,0.534]],["body/components/SignInComponent.html",[0,0.175,1,0.508,2,0.748,3,0.142,4,0.142,5,0.57,6,0.57,7,0.57,8,0.122,10,0.664,13,0.508,14,1.258,15,1.258,16,0.539,18,0.706,19,0.55,20,0.836,21,1.858,22,3.075,23,0.792,25,1.086,27,0.205,28,0.47,35,0.551,37,3.598,39,2.548,49,0.929,53,0.677,65,0.639,66,0.02,67,0.391,68,0.28,69,0.411,70,0.444,71,1.646,73,1.701,75,0.423,76,0.626,77,0.551,89,0.58,90,0.684,108,0.508,127,2.101,138,0.305,141,0.227,143,0.954,150,1.357,151,0.142,152,0.162,157,0.639,158,0.534,164,1.053,179,3.077,180,3.272,181,3.323,184,0.57,185,0.792,186,0.666,187,0.57,188,0.983,189,0.57,190,0.508,191,0.57,192,0.57,193,0.508,194,0.57,195,0.508,196,0.57,197,0.539,198,0.57,199,0.508,200,0.57,201,0.508,202,0.57,203,0.57,204,0.508,205,0.57,206,0.508,207,0.792,208,0.508,209,0.57,210,0.508,211,0.423,212,0.57,213,0.508,214,0.57,215,0.792,216,0.508,217,0.983,218,0.508,219,0.57,220,0.508,221,0.57,222,0.508,223,0.57,224,0.508,225,0.57,226,0.539,227,0.539,228,0.508,229,0.57,230,0.508,231,0.57,232,0.508,233,0.877,234,0.57,235,0.508,236,0.57,237,0.539,238,0.508,239,0.539,240,0.91,241,0.508,242,0.57,243,0.539,244,0.57,245,0.539,246,0.539,247,0.57,248,0.508,249,0.57,250,0.508,251,0.57,252,0.508,253,0.539,254,0.539,255,0.57,256,0.954,257,1.119,258,0.57,259,0.508,260,0.57,261,0.508,262,0.539,263,0.539,264,0.451,265,0.508,266,0.57,267,0.508,268,0.57,269,0.57,270,0.57,271,0.012,272,0.012,300,2.173,310,1.357,322,2.101,327,2.507,334,3.361,337,3.874,338,3.081,406,1.6,435,2.358,436,2.867,497,2.507,504,2.358,505,2.71,517,2.987,518,3.461,521,3.614,523,2.762,526,4.77,541,3.361,542,3.361,552,1.432,565,2.987,652,3.092,862,4.823,880,2.675,897,2.867,906,2.867,954,3.361,1067,3.267,1071,5.417,1120,4.177,1124,3.295,1191,4.492,1223,3.075,1266,2.419,1383,3.84,1410,3.553,1499,2.675,1501,4.658,1516,2.419,1535,3.863,1540,3.361,1541,3.699,1542,3.699,1555,3.361,1627,3.699,1700,4.15,1705,4.15,1750,3.699,2084,2.987,2738,4.251,2743,4.251,2875,5.417,2877,4.15,2878,4.15,2879,4.15,2886,4.15,2898,2.987,2899,2.987,3154,5.955,3155,2.987,3156,4.836,3157,4.836,3158,5.558,3159,6.007,3160,6.007,3161,6.007,3162,4.836,3163,4.836,3164,3.48,3165,4.836,3166,3.48,3167,5.558,3168,3.48,3169,6.312,3170,3.48,3171,3.48,3172,4.836,3173,3.48,3174,3.48,3175,6.007,3176,3.48,3177,3.48,3178,3.48,3179,5.558,3180,3.48,3181,3.48,3182,3.48,3183,3.48,3184,4.836,3185,3.48,3186,3.48,3187,3.48,3188,3.48,3189,3.48,3190,3.48,3191,3.48,3192,4.836,3193,4.836,3194,4.836,3195,4.836,3196,4.836,3197,4.836,3198,6.007,3199,4.836]],["title/components/SignUpComponent.html",[0,0.115,259,0.534]],["body/components/SignUpComponent.html",[0,0.182,1,0.551,2,0.791,3,0.153,4,0.153,5,0.617,6,0.617,7,0.617,8,0.132,10,0.574,13,0.551,14,1.263,15,1.263,16,0.583,18,0.746,19,0.574,20,0.884,21,1.937,22,3.206,23,0.836,25,1.147,27,0.222,28,0.399,35,0.582,48,3.971,49,0.897,53,0.663,65,0.543,66,0.02,67,0.454,68,0.29,69,0.434,70,0.47,71,1.702,73,1.796,76,0.662,77,0.582,84,2.491,88,1.123,89,0.533,90,0.66,108,0.551,120,3.969,127,2.22,129,4.151,135,0.884,138,0.312,141,0.245,143,1.033,150,1.47,151,0.153,152,0.176,157,0.616,158,0.399,179,3.029,180,3.221,181,3.437,184,0.617,185,0.836,186,0.703,187,0.617,188,1.017,189,0.617,190,0.551,191,0.617,192,0.617,193,0.551,194,0.617,195,0.551,196,0.617,197,0.583,198,0.617,199,0.551,200,0.617,201,0.907,202,0.836,203,0.617,204,0.551,205,0.617,206,0.551,207,0.836,208,0.551,209,0.617,210,0.551,211,0.458,212,0.617,213,0.551,214,0.617,215,0.836,216,0.551,217,1.017,218,0.551,219,0.617,220,0.551,221,0.617,222,0.551,223,0.617,224,0.551,225,0.617,226,0.583,227,0.583,228,0.551,229,0.617,230,0.551,231,0.617,232,0.551,233,0.907,234,0.617,235,0.551,236,0.617,237,0.583,238,0.551,239,0.583,240,0.949,241,0.551,242,0.617,243,0.583,244,0.617,245,0.583,246,0.583,247,0.617,248,0.551,249,0.617,250,0.551,251,0.617,252,0.551,253,0.583,254,0.583,255,0.617,256,0.551,257,1.188,258,0.617,259,0.978,260,0.617,261,0.551,262,0.583,263,0.583,264,0.488,265,0.551,266,0.617,267,0.551,268,0.617,269,0.617,270,0.617,271,0.013,272,0.013,299,2.856,300,2.064,310,1.47,322,2.22,327,3.221,344,2.349,385,4.384,406,1.733,408,2.826,435,2.491,436,3.029,454,3.551,483,4.384,489,3.971,518,3.48,523,2.349,547,3.551,552,1.551,556,1.395,862,4.758,864,2.883,872,4.28,876,3.705,880,2.826,881,4.384,889,3.907,906,3.029,923,3.907,1223,3.206,1261,3.907,1266,4.318,1268,3.971,1494,2.41,1497,3.551,1498,3.907,1499,2.826,1501,4.513,1517,2.883,1535,3.551,1537,4.751,1539,4.751,1540,3.551,1541,3.907,1555,3.551,1627,4.751,1788,4.384,1800,3.907,1971,4.384,2200,4.384,2320,5.331,2804,4.384,3200,5.875,3201,3.235,3202,5.109,3203,5.109,3204,5.109,3205,5.109,3206,3.77,3207,3.77,3208,5.109,3209,3.77,3210,3.77,3211,3.77,3212,3.77,3213,3.77,3214,5.109,3215,5.109,3216,5.109,3217,5.109,3218,5.109,3219,5.109,3220,5.109,3221,5.109,3222,5.109,3223,5.109,3224,5.109]],["title/injectables/StateService.html",[632,1.895,1048,1.052]],["body/injectables/StateService.html",[3,0.195,4,0.195,8,0.167,27,0.281,28,0.467,35,0.679,48,3.814,53,0.717,56,1.563,61,2.8,65,0.634,66,0.02,67,0.389,68,0.278,69,0.507,70,0.548,75,0.868,76,0.881,77,0.834,89,0.598,90,0.813,97,2.52,105,3.703,113,2.52,138,0.278,141,0.312,144,1.599,151,0.195,152,0.223,157,0.634,158,0.559,233,1.07,264,0.948,271,0.015,272,0.015,326,3.57,328,2.644,506,2.079,524,3.114,618,5.035,622,5.541,632,3.093,637,3.103,645,4.563,1048,1.718,1053,2.646,1066,2.2,1345,5.206,1448,2.332,1470,5.12,3225,4.106,3226,6.502,3227,6.502,3228,6.807,3229,5.966,3230,5.966,3231,4.784,3232,7.143,3233,5.966,3234,5.966,3235,5.966,3236,4.784,3237,5.966,3238,4.784,3239,5.966,3240,4.784,3241,5.966,3242,4.784,3243,5.966,3244,4.784,3245,5.966,3246,4.784,3247,4.784,3248,4.784,3249,4.784,3250,4.784,3251,4.784]],["title/interfaces/ThreadMessage.html",[747,1.353,1064,1.782]],["body/interfaces/ThreadMessage.html",[3,0.21,4,0.21,8,0.18,27,0.303,28,0.488,32,2.513,66,0.02,68,0.352,69,0.618,70,0.474,75,0.949,135,1.273,138,0.24,144,1.723,151,0.274,211,0.626,271,0.016,272,0.016,349,1.897,441,3.958,747,2.487,748,2.851,751,3.621,957,3.709,1053,3.455,1064,3.045,1119,3.582,1211,4.973,1212,4.973,1214,3.958,1215,3.958,1216,4.466,1217,4.973,1332,4.242,2679,3.582,2680,3.941,2681,3.941,2682,4.242,2683,4.466]],["title/components/ThreadchatHeaderComponent.html",[0,0.115,261,0.534]],["body/components/ThreadchatHeaderComponent.html",[0,0.19,1,0.595,2,0.832,3,0.166,4,0.166,5,0.667,6,0.667,7,0.667,8,0.142,10,0.403,13,0.595,14,1.268,15,1.268,16,0.63,17,2.763,18,0.786,19,0.533,20,0.704,23,0.881,25,1.208,27,0.24,28,0.421,35,0.612,39,2.499,45,5.17,49,0.63,51,3.674,53,0.66,55,2.976,56,1.148,57,2.473,60,2.142,61,2.741,65,0.433,66,0.02,67,0.434,68,0.281,69,0.346,70,0.374,71,1.756,72,4.114,73,1.892,75,0.654,76,0.527,77,0.464,84,2.623,87,2.789,89,0.494,90,0.73,108,0.595,138,0.311,141,0.265,142,2.603,144,1.361,145,2.253,151,0.166,152,0.19,157,0.572,158,0.421,160,3.495,184,0.667,185,0.881,186,0.741,187,0.667,188,1.049,189,0.667,190,0.595,191,0.667,192,0.667,193,0.595,194,0.667,195,0.595,196,0.667,197,0.63,198,0.667,199,0.595,200,0.667,201,0.595,202,0.667,203,0.667,204,0.595,205,0.667,206,0.595,207,0.881,208,0.595,209,0.667,210,0.595,211,0.495,212,0.667,213,0.595,214,0.667,215,0.881,216,0.595,217,1.049,218,0.595,219,0.667,220,0.595,221,0.667,222,0.595,223,0.667,224,0.595,225,0.667,226,0.63,227,0.63,228,0.595,229,0.667,230,0.595,231,0.667,232,0.595,233,0.936,234,0.667,235,0.595,236,0.667,237,0.63,238,0.595,239,0.63,240,0.986,241,0.595,242,0.667,243,0.63,244,0.667,245,0.63,246,0.63,247,0.667,248,0.595,249,0.667,250,0.595,251,0.667,252,0.595,253,0.63,254,0.63,255,0.667,256,0.595,257,0.881,258,0.667,259,0.595,260,0.667,261,1,262,1.08,263,0.63,264,0.945,265,0.595,266,0.667,267,0.595,268,0.667,269,0.667,270,0.667,271,0.014,272,0.014,308,2.213,326,3.529,375,2.098,505,2.623,524,2.636,541,3.739,542,3.739,556,1.507,631,3.495,632,3.619,634,4.114,637,2.337,702,3.495,732,3.19,771,5.235,1325,4.114,1460,3.739,1561,3.739,1562,4.114,1563,4.114,2446,4.114,2622,3.495,2656,3.114,2659,3.114,2660,4.617,2663,3.495,3252,5.874,3253,6.025,3254,6.409,3255,4.072,3256,5.38,3257,5.38,3258,4.072,3259,5.38,3260,4.072,3261,4.072,3262,6.025]],["title/pipes/TimestampToDatePipe.html",[2816,2.337,2841,2.54]],["body/pipes/TimestampToDatePipe.html",[3,0.182,4,0.182,8,0.156,13,0.653,18,0.92,19,0.624,35,0.509,53,0.443,56,1.465,60,1.494,65,0.475,66,0.02,67,0.433,68,0.208,69,0.38,70,0.411,75,0.929,77,0.858,89,0.579,138,0.266,139,2.112,141,0.291,147,2.651,151,0.233,152,0.266,157,0.608,164,1.352,271,0.014,272,0.014,340,4.616,378,1.655,431,1.831,504,2.787,531,2.318,532,3.419,658,3.267,714,3.654,751,4.019,892,4.759,1214,4.181,1521,3.973,2056,4.372,2333,2.651,2777,4.819,2816,4.028,2817,3.107,2818,3.419,2819,4.372,2820,3.419,2821,3.837,2822,5.408,2824,4.819,2825,5.7,2826,5.7,2827,6.202,2828,5.7,2829,4.906,2830,4.906,2831,6.025,2832,4.906,2833,4.906,2834,3.837,2835,3.837,2836,6.124,2837,6.124,2838,6.025,2839,5.408,2840,4.906,2841,3.973,2842,5.408,2843,4.906,2844,4.906,2845,4.906,2846,4.819,2847,4.906,2848,5.408,2849,5.408,2850,4.906,2851,4.372,2852,3.837,2853,3.837,2854,3.837,2855,3.837,2856,3.837,2857,3.837,2858,3.837,2859,3.837,2860,3.837,2861,3.837,2862,3.837,2863,3.837,2864,3.837,2865,3.837,3263,4.471]],["title/interfaces/ToastMessage.html",[747,1.353,1493,1.895]],["body/interfaces/ToastMessage.html",[3,0.218,4,0.218,8,0.187,27,0.314,28,0.499,56,1.14,66,0.02,68,0.298,75,0.878,89,0.587,90,0.727,113,2.363,135,1.25,138,0.298,141,0.348,144,1.786,151,0.26,152,0.249,157,0.726,158,0.418,271,0.016,272,0.016,338,3.408,349,1.992,368,3.168,506,2.322,638,3.416,704,2.605,747,1.978,748,2.956,844,3.072,976,3.776,1048,1.838,1049,4.436,1066,2.457,1294,2.322,1302,3.802,1350,4.436,1493,3.309,3264,4.087,3265,5.478,3266,4.586,3267,4.586,3268,4.586,3269,4.586,3270,4.586,3271,4.586,3272,4.586,3273,4.586,3274,4.586,3275,4.586]],["title/components/ToastMessageComponent.html",[0,0.115,265,0.534]],["body/components/ToastMessageComponent.html",[0,0.192,1,0.612,2,0.848,3,0.171,4,0.171,5,0.686,6,0.686,7,0.686,8,0.146,10,0.415,13,0.612,14,1.27,15,1.27,16,0.648,18,0.801,19,0.543,23,0.897,27,0.322,28,0.429,49,0.648,53,0.605,57,2.52,60,2.042,61,1.724,65,0.446,66,0.02,67,0.398,68,0.255,69,0.356,70,0.385,71,1.502,76,0.543,77,0.477,89,0.385,108,0.612,138,0.255,141,0.273,151,0.171,152,0.195,157,0.446,158,0.328,167,1.942,184,0.686,185,0.897,186,0.755,187,0.686,188,1.061,189,0.686,190,0.612,191,0.686,192,0.686,193,0.612,194,0.686,195,0.612,196,0.686,197,0.648,198,0.686,199,0.612,200,0.686,201,0.612,202,0.686,203,0.686,204,0.612,205,0.686,206,0.612,207,0.897,208,0.612,209,0.686,210,0.612,211,0.509,212,0.686,213,0.612,214,0.686,215,0.897,216,0.612,217,1.061,218,0.612,219,0.686,220,0.612,221,0.686,222,0.612,223,0.686,224,0.612,225,0.686,226,0.648,227,0.648,228,0.612,229,0.686,230,0.612,231,0.686,232,0.612,233,0.947,234,0.686,235,0.612,236,0.686,237,0.648,238,0.612,239,0.648,240,1,241,0.612,242,0.686,243,0.648,244,0.686,245,0.648,246,0.648,247,0.686,248,0.612,249,0.686,250,0.612,251,0.686,252,0.612,253,0.648,254,0.648,255,0.686,256,0.612,257,0.897,258,0.686,259,0.612,260,0.686,261,0.612,262,0.648,263,0.648,264,0.543,265,1.008,266,0.686,267,0.612,268,0.686,269,0.686,270,0.686,271,0.014,272,0.014,331,3.25,349,1.754,431,1.093,461,1.926,502,2.484,508,3.25,512,2.912,529,1.926,556,1.551,584,3.25,585,2.484,586,2.484,590,2.912,591,2.484,592,2.912,593,3.25,594,3.204,595,2.318,600,3.25,602,3.032,603,2.484,604,3.25,609,3.504,610,2.484,637,2.382,641,3.204,708,2.679,709,2.679,713,2.912,718,3.81,721,2.912,722,3.905,723,3.905,724,3.905,735,3.81,737,3.81,738,2.679,745,3.81,778,2.912,779,2.912,780,3.204,781,3.905,789,3.596,795,3.596,805,4.192,826,4.246,828,2.912,829,2.912,830,3.204,835,2.912,941,3.25,1167,3.359,1294,3.098,1302,3.772,1493,3.696,1514,4.192,1533,2.912,2326,3.596,2328,4.704,2332,3.596,2333,3.622,2335,3.596,2339,4.704,2348,3.204,2350,3.596,2407,4.704,2422,3.596,3276,3.596,3277,6.109,3278,5.482,3279,5.482,3280,4.19,3281,4.19,3282,4.19,3283,4.19,3284,4.19,3285,4.19,3286,4.19,3287,6.109,3288,4.19,3289,4.19,3290,4.19,3291,3.596,3292,3.596]],["title/injectables/ToastMessageService.html",[1048,1.052,1294,1.588]],["body/injectables/ToastMessageService.html",[3,0.203,4,0.203,8,0.174,27,0.293,28,0.479,35,0.697,53,0.702,56,1.307,65,0.651,66,0.02,67,0.399,68,0.285,69,0.52,70,0.563,75,0.888,76,0.858,77,0.754,89,0.635,90,0.786,113,2.557,135,1.248,138,0.285,141,0.325,144,1.668,151,0.249,152,0.233,157,0.704,158,0.518,271,0.016,272,0.016,338,3.318,349,2.001,368,3.63,506,2.168,638,3.914,704,2.432,747,1.847,844,3.207,976,3.992,1048,1.763,1049,4.604,1066,2.294,1294,2.66,1302,3.93,1350,4.801,1448,2.432,1493,2.586,3264,3.816,3265,5.685,3266,5.685,3267,5.255,3268,5.685,3269,5.255,3270,4.282,3271,5.255,3272,5.255,3273,4.282,3274,4.282,3275,4.282,3293,6.123,3294,6.123,3295,4.989,3296,4.989,3297,4.989,3298,4.989,3299,4.989]],["title/injectables/UserDialogService.html",[1048,1.052,1231,2.337]],["body/injectables/UserDialogService.html",[3,0.108,4,0.108,8,0.093,10,0.727,19,0.714,27,0.156,28,0.311,35,0.453,37,2.475,41,4.053,48,3.809,49,0.411,52,2.437,53,0.717,55,2.203,56,1.019,57,1.831,60,2.123,65,0.634,66,0.02,67,0.423,68,0.296,69,0.506,70,0.608,73,2.546,76,0.856,77,0.723,81,2.361,84,2.905,85,4.787,86,4.053,87,2.064,88,1.293,89,0.638,90,0.764,92,2.203,95,3.045,97,2.518,105,2.064,106,3.263,112,4.061,115,3.684,118,3.417,121,4.549,127,2.074,135,1.161,138,0.265,139,1.266,140,2.361,141,0.173,148,1.941,149,1.7,150,1.037,151,0.108,152,0.124,157,0.675,158,0.311,164,0.804,186,0.548,233,0.582,271,0.01,272,0.01,298,3.809,299,2.195,300,2.186,306,3.388,307,3.045,308,1.638,310,1.037,311,4.181,315,2.545,321,2.767,327,3.526,328,2.61,329,4.556,332,3.045,337,3.142,338,2.437,344,1.831,347,3.045,349,1.382,350,3.417,352,3.417,366,2.451,368,3.142,369,2.767,378,1.962,390,2.767,402,1.7,410,1.7,411,2.545,431,0.693,452,1.7,453,1.576,497,1.378,506,1.155,523,1.831,524,1.638,535,4.556,551,1.576,556,0.984,619,2.203,637,1.73,646,2.203,648,2.203,653,3.045,655,3.417,658,1.378,663,2.545,738,3.388,872,2.545,876,3.051,878,2.033,880,2.64,897,3.766,941,2.361,949,3.045,951,3.417,963,2.767,973,3.045,975,2.361,1048,1.146,1049,1.848,1066,1.222,1103,3.417,1120,3.388,1121,2.767,1124,1.576,1133,2.767,1144,2.767,1155,3.417,1156,3.045,1160,4.414,1161,2.767,1162,3.417,1191,2.545,1229,4.096,1231,3.388,1241,3.045,1252,4.549,1275,2.282,1294,2.874,1296,3.417,1302,2.748,1303,2.545,1308,4.414,1314,5.113,1334,3.388,1345,3.045,1346,3.417,1347,3.417,1389,2.033,1408,1.848,1448,1.296,1464,3.417,1497,2.767,1499,2.203,1928,2.282,2295,3.417,2300,4.549,2388,3.417,2426,2.767,2573,3.045,2577,3.045,2582,3.417,2605,2.033,2738,2.033,2743,2.033,2776,3.417,2778,3.417,2925,2.033,2926,2.282,3111,4.096,3300,6.239,3301,2.282,3302,4.773,3303,5.676,3304,7,3305,6.877,3306,5.676,3307,3.982,3308,3.982,3309,5.3,3310,5.3,3311,3.982,3312,3.982,3313,5.3,3314,5.3,3315,5.3,3316,3.982,3317,3.982,3318,3.982,3319,2.659,3320,5.958,3321,3.982,3322,5.3,3323,5.451,3324,3.982,3325,2.659,3326,5.3,3327,5.3,3328,3.982,3329,2.659,3330,3.982,3331,5.3,3332,3.982,3333,2.659,3334,5.3,3335,3.982,3336,3.982,3337,3.982,3338,3.982,3339,2.659,3340,3.982,3341,3.982,3342,3.982,3343,3.982,3344,3.982,3345,2.659,3346,3.982,3347,3.982,3348,3.982,3349,2.659,3350,3.982,3351,2.659,3352,2.659,3353,3.982,3354,3.982,3355,3.982,3356,2.659,3357,2.659,3358,3.982,3359,3.982,3360,3.982,3361,2.659,3362,3.982,3363,3.982,3364,2.659,3365,2.659,3366,3.982,3367,2.659,3368,2.659,3369,2.659,3370,2.659,3371,2.659,3372,2.659,3373,2.659,3374,3.982,3375,4.773,3376,3.982,3377,6.177,3378,2.659,3379,3.982,3380,4.773,3381,3.982,3382,2.659,3383,2.659,3384,5.958,3385,2.659,3386,5.958,3387,5.676,3388,2.659,3389,4.773,3390,3.982,3391,2.659,3392,2.659,3393,2.659,3394,2.659,3395,2.659,3396,2.659,3397,2.659,3398,2.659,3399,2.659,3400,2.659,3401,2.659,3402,2.659,3403,2.659,3404,2.659,3405,2.659,3406,2.659,3407,2.659,3408,2.659,3409,2.659,3410,2.659]],["title/classes/UserModel.html",[148,1.782,152,0.17]],["body/classes/UserModel.html",[3,0.21,4,0.21,8,0.18,10,0.51,27,0.303,28,0.488,49,0.797,53,0.74,65,0.548,66,0.02,67,0.455,68,0.348,69,0.438,75,0.927,76,0.808,77,0.711,88,1.162,127,2.919,128,3.716,135,1.08,138,0.24,148,3.043,151,0.21,152,0.24,271,0.016,272,0.016,304,3.716,402,4.294,407,3.482,408,3.716,1034,4.419,1063,4.419,1133,4.669,1138,5.765,1167,3.482,1333,3.579,2553,4.419,2611,4.419,3411,5.149,3412,4.419,3413,6.242,3414,7.153,3415,6.717,3416,6.242,3417,5.149,3418,5.149,3419,5.149,3420,5.149,3421,5.149,3422,5.149,3423,5.149,3424,5.149,3425,5.149,3426,5.149,3427,5.149,3428,5.149,3429,5.149,3430,5.149,3431,5.149,3432,5.149,3433,5.149,3434,5.149,3435,5.149,3436,5.149]],["title/components/UsermenuComponent.html",[0,0.115,267,0.534]],["body/components/UsermenuComponent.html",[0,0.191,1,0.601,2,0.838,3,0.167,4,0.167,5,0.674,6,0.674,7,0.674,8,0.144,10,0.662,13,0.601,14,1.268,15,1.268,16,0.637,18,0.791,19,0.693,20,0.937,21,2.024,23,0.887,25,1.216,27,0.242,28,0.424,35,0.617,49,0.637,53,0.662,65,0.644,66,0.02,67,0.435,68,0.312,69,0.514,70,0.498,76,0.533,77,0.468,88,1.156,89,0.498,90,0.617,103,2.647,106,3.229,108,0.601,112,4.113,135,0.937,138,0.3,141,0.268,143,1.127,151,0.167,152,0.192,157,0.576,158,0.322,184,0.674,185,0.887,186,0.746,187,0.674,188,1.053,189,0.674,190,0.601,191,0.674,192,0.674,193,0.601,194,0.674,195,0.601,196,0.674,197,0.637,198,0.674,199,0.601,200,0.674,201,0.601,202,0.674,203,0.674,204,0.601,205,0.674,206,0.94,207,0.887,208,0.601,209,0.674,210,0.601,211,0.5,212,0.674,213,0.601,214,0.674,215,0.887,216,0.601,217,1.053,218,0.601,219,0.674,220,0.601,221,0.674,222,0.601,223,0.674,224,0.601,225,0.674,226,0.637,227,0.637,228,0.601,229,0.674,230,0.601,231,0.674,232,0.601,233,1.037,234,0.674,235,0.601,236,0.674,237,0.637,238,0.601,239,0.637,240,0.991,241,0.601,242,0.674,243,0.637,244,0.674,245,0.637,246,0.637,247,0.674,248,0.601,249,0.674,250,0.601,251,0.674,252,0.601,253,0.637,254,0.637,255,0.674,256,0.601,257,0.887,258,0.674,259,0.601,260,0.674,261,0.601,262,0.637,263,0.637,264,0.533,265,0.601,266,0.674,267,0.94,268,0.991,269,0.674,270,0.674,271,0.014,272,0.014,283,2.49,311,4.069,328,2.382,619,2.996,1226,5.522,1228,6.006,1230,3.531,1231,4.593,1241,4.921,1243,3.531,1244,3.531,1245,3.147,2573,5.431,2577,4.921,2695,5.522,3323,5.522,3437,3.531,3438,5.416,3439,5.416,3440,5.416,3441,5.416,3442,5.416,3443,5.416,3444,4.114,3445,5.416,3446,5.416,3447,4.114,3448,4.114,3449,4.114,3450,5.416,3451,5.416,3452,5.416,3453,5.416,3454,5.416,3455,5.416]],["title/coverage.html",[3456,4.293]],["body/coverage.html",[0,0.244,1,0.612,8,0.146,9,3.593,10,0.543,11,3.593,12,3.593,17,1.633,51,2.171,56,0.894,66,0.02,68,0.195,148,2.041,152,0.195,158,0.428,167,2.394,190,0.612,193,0.612,195,0.612,197,0.648,199,0.612,201,0.612,204,0.612,206,0.612,208,0.612,210,0.612,213,0.612,216,0.612,218,0.612,220,0.612,222,0.612,224,0.612,226,0.648,228,0.612,230,0.612,232,0.612,235,0.612,237,0.648,238,0.612,239,0.648,241,0.612,243,0.648,245,0.648,246,0.648,248,0.612,250,0.612,252,0.612,254,0.648,256,0.612,259,0.612,261,0.612,263,0.648,265,0.612,267,0.612,271,0.014,272,0.014,273,3.593,300,1.331,349,1.092,503,3.593,607,4.955,613,3.593,632,2.171,677,3.202,678,3.202,747,2.553,749,3.593,752,3.593,758,2.041,767,3.593,771,3.202,862,4.244,863,3.593,864,3.202,865,3.593,924,3.593,943,2.91,944,2.677,1046,3.202,1047,4.702,1048,2.135,1064,2.041,1067,2.041,1128,3.202,1222,3.593,1231,2.677,1272,3.202,1276,3.593,1293,2.91,1294,1.819,1308,2.91,1426,3.593,1427,3.593,1428,3.593,1447,3.202,1449,4.702,1450,3.593,1483,3.593,1484,3.593,1485,4.19,1493,2.171,1506,4.142,1560,3.593,1596,3.593,1614,3.593,1892,5.77,2290,3.593,2414,3.593,2417,3.593,2435,3.593,2494,3.593,2562,4.67,2563,3.202,2564,3.593,2641,3.593,2651,3.202,2653,3.593,2659,4.67,2664,3.593,2679,4.244,2682,2.482,2684,3.593,2755,3.593,2816,3.503,2817,2.91,2819,4.19,2820,4.19,2841,2.91,2866,3.593,2867,3.593,2909,3.202,2910,3.593,2911,3.593,2935,3.593,3061,3.593,3154,3.593,3155,3.593,3200,3.593,3201,3.593,3225,3.593,3252,3.593,3264,4.19,3276,3.593,3300,3.593,3301,3.593,3412,3.593,3437,3.593,3456,3.593,3457,4.187,3458,4.187,3459,4.187,3460,4.187,3461,3.593,3462,3.593,3463,7.209,3464,3.593,3465,3.593,3466,4.187,3467,4.187,3468,5.479,3469,5.479,3470,6.107,3471,6.107,3472,5.479,3473,4.187,3474,6.479,3475,5.479,3476,4.187,3477,4.187,3478,6.107,3479,4.187,3480,4.187,3481,4.187,3482,5.479,3483,5.479,3484,4.187,3485,5.479,3486,4.187,3487,4.187,3488,5.479,3489,5.479,3490,4.187,3491,4.187,3492,4.187,3493,4.187,3494,4.187,3495,4.187,3496,4.187,3497,4.187,3498,4.187,3499,4.187,3500,4.187,3501,4.187,3502,5.479,3503,4.187,3504,4.187,3505,4.187,3506,4.187,3507,4.187,3508,4.187,3509,4.187,3510,4.187,3511,4.187,3512,4.187,3513,4.187,3514,4.187,3515,5.479,3516,4.187,3517,4.187,3518,4.702,3519,4.187,3520,4.187,3521,4.187,3522,4.187,3523,4.187,3524,4.187,3525,4.187,3526,4.187,3527,4.187,3528,4.187,3529,4.187,3530,5.479,3531,4.187,3532,4.187,3533,4.187,3534,4.187,3535,4.187,3536,4.187,3537,4.187,3538,4.187,3539,4.187,3540,4.187,3541,4.187,3542,4.187,3543,4.187,3544,4.187,3545,4.187,3546,4.187,3547,4.187,3548,4.187,3549,4.187,3550,4.187,3551,4.187,3552,4.187,3553,4.187,3554,4.187,3555,4.187,3556,4.187]],["title/dependencies.html",[3557,2.614,3558,3.776]],["body/dependencies.html",[66,0.02,141,0.372,143,1.567,144,1.912,150,2.231,211,0.695,271,0.017,272,0.017,552,2.353,1182,5.702,1441,4.908,1442,4.908,1757,4.908,2128,5.702,3558,4.908,3559,5.72,3560,7.56,3561,5.72,3562,6.644,3563,5.72,3564,5.72,3565,5.72,3566,5.72,3567,6.644,3568,5.72,3569,5.72,3570,5.72,3571,5.72,3572,5.72,3573,5.72,3574,5.72,3575,5.72,3576,5.72]],["title/index.html",[27,0.179,3577,3.046,3578,3.046]],["body/index.html",[66,0.017,271,0.017,272,0.017]],["title/modules.html",[3579,4.293]],["body/modules.html",[66,0.017,271,0.017,272,0.017,3579,5.194]],["title/overview.html",[3580,4.293]],["body/overview.html",[2,0.927,66,0.017,152,0.279,271,0.017,272,0.017,461,2.754,531,3.106,748,3.314,1419,5.141,1448,2.921,1800,4.582,2818,4.582,3580,5.141,3581,5.991]],["title/properties.html",[28,0.344,3557,2.614]],["body/properties.html",[28,0.472,66,0.018,271,0.017,272,0.017,3582,6.034,3583,6.034]],["title/miscellaneous/variables.html",[3584,2.614,3585,3.776]],["body/miscellaneous/variables.html",[19,0.599,27,0.287,37,2.533,66,0.02,68,0.282,76,0.888,77,0.781,88,1.046,164,2.172,167,1.922,271,0.015,272,0.015,300,1.554,431,1.712,518,2.382,521,2.703,522,4.193,524,2.01,529,3.346,602,3.344,637,3.221,677,4.623,678,4.623,704,2.382,718,5.058,727,4.193,728,4.193,732,4.066,781,3.124,1067,2.382,1124,2.897,2315,4.193,2333,3.892,2348,5.02,2387,5.633,2426,3.396,2851,4.623,3291,4.193,3292,5.188,3461,4.193,3462,5.188,3464,4.193,3465,5.188,3518,4.193,3584,4.193,3585,4.193,3586,4.886,3587,4.886,3588,6.045,3589,4.886,3590,4.886,3591,4.886,3592,4.886,3593,4.886,3594,4.886,3595,4.886,3596,4.886,3597,4.886,3598,4.886,3599,4.886,3600,4.886,3601,4.886,3602,4.886,3603,4.886,3604,4.886,3605,4.886,3606,4.886,3607,4.886,3608,4.886,3609,4.886,3610,4.886,3611,4.886,3612,4.886,3613,4.886,3614,4.886,3615,6.045,3616,4.886,3617,4.886,3618,4.886,3619,4.886,3620,4.886,3621,4.886,3622,6.045,3623,7.18,3624,4.886,3625,6.564,3626,6.045,3627,6.045,3628,6.045,3629,6.564,3630,4.886,3631,6.045,3632,7.278,3633,6.045,3634,4.886,3635,4.886,3636,4.886,3637,4.886]]],"invertedIndex":[["",{"_index":66,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":167,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{},"components/ToastMessageComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0',transform",{"_index":3629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":3583,"title":{},"body":{"properties.html":{}}}],["0.08",{"_index":785,"title":{},"body":{"components/ChatComponent.html":{}}}],["0.14.0",{"_index":3576,"title":{},"body":{"dependencies.html":{}}}],["0.3s",{"_index":717,"title":{},"body":{"components/BuilderComponent.html":{}}}],["0.5",{"_index":2626,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["0.5s",{"_index":2339,"title":{},"body":{"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["0.8",{"_index":2391,"title":{},"body":{"components/LoginComponent.html":{}}}],["0.875rem",{"_index":832,"title":{},"body":{"components/ChatComponent.html":{}}}],["0/1",{"_index":3463,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3517,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3516,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":3514,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3515,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3485,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3513,"title":{},"body":{"coverage.html":{}}}],["0000003d",{"_index":3286,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["0px",{"_index":781,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{},"miscellaneous/variables.html":{}}}],["0s",{"_index":2373,"title":{},"body":{"components/LoginComponent.html":{}}}],["1",{"_index":461,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/ReactionsComponent.html":{},"components/ToastMessageComponent.html":{},"overview.html":{}}}],["1.125rem",{"_index":827,"title":{},"body":{"components/ChatComponent.html":{}}}],["1/3",{"_index":3554,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3498,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":736,"title":{},"body":{"components/BuilderComponent.html":{},"components/ForgetPasswordComponent.html":{}}}],["10.14.1",{"_index":3570,"title":{},"body":{"dependencies.html":{}}}],["10/14",{"_index":3531,"title":{},"body":{"coverage.html":{}}}],["10/18",{"_index":3484,"title":{},"body":{"coverage.html":{}}}],["10/30",{"_index":3547,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":602,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{},"miscellaneous/variables.html":{}}}],["100%)',overflow",{"_index":3630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1000",{"_index":1521,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"pipes/RelativeDatePipe.html":{},"injectables/SharedService.html":{},"pipes/TimestampToDatePipe.html":{}}}],["10000",{"_index":1531,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["100px",{"_index":860,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["100vh",{"_index":601,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["100vw",{"_index":588,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["104px",{"_index":859,"title":{},"body":{"components/ChatComponent.html":{}}}],["10px",{"_index":783,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["12/21",{"_index":3509,"title":{},"body":{"coverage.html":{}}}],["12/22",{"_index":3477,"title":{},"body":{"coverage.html":{}}}],["120px",{"_index":2412,"title":{},"body":{"components/LoginComponent.html":{}}}],["1275px",{"_index":2401,"title":{},"body":{"components/LoginComponent.html":{}}}],["12px",{"_index":2385,"title":{},"body":{"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["13",{"_index":1419,"title":{},"body":{"components/EditmessageComponent.html":{},"overview.html":{}}}],["13.29.0",{"_index":3571,"title":{},"body":{"dependencies.html":{}}}],["13/21",{"_index":3551,"title":{},"body":{"coverage.html":{}}}],["13/23",{"_index":3525,"title":{},"body":{"coverage.html":{}}}],["13px",{"_index":811,"title":{},"body":{"components/ChatComponent.html":{}}}],["14/18",{"_index":3497,"title":{},"body":{"coverage.html":{}}}],["1400px",{"_index":685,"title":{},"body":{"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["14px",{"_index":2397,"title":{},"body":{"components/LoginComponent.html":{}}}],["15/26",{"_index":3545,"title":{},"body":{"coverage.html":{}}}],["1500",{"_index":2434,"title":{},"body":{"components/MainComponent.html":{}}}],["15px",{"_index":812,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["16px",{"_index":2335,"title":{},"body":{"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["18.0.0",{"_index":3562,"title":{},"body":{"dependencies.html":{}}}],["18.0.1",{"_index":3565,"title":{},"body":{"dependencies.html":{}}}],["18.2.13",{"_index":3560,"title":{},"body":{"dependencies.html":{}}}],["184px",{"_index":2337,"title":{},"body":{"components/LoginComponent.html":{}}}],["18px",{"_index":611,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["19.1px",{"_index":2398,"title":{},"body":{"components/LoginComponent.html":{}}}],["19/29",{"_index":3512,"title":{},"body":{"coverage.html":{}}}],["1920px",{"_index":2355,"title":{},"body":{"components/LoginComponent.html":{}}}],["1980px",{"_index":2366,"title":{},"body":{"components/LoginComponent.html":{}}}],["1px",{"_index":806,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["1s",{"_index":2324,"title":{},"body":{"components/LoginComponent.html":{}}}],["2",{"_index":531,"title":{},"body":{"components/AppComponent.html":{},"injectables/EmojiStorageService.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"overview.html":{}}}],["2.3.0",{"_index":3574,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":3490,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3539,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":3478,"title":{},"body":{"coverage.html":{}}}],["20/29",{"_index":3489,"title":{},"body":{"coverage.html":{}}}],["20/39",{"_index":3481,"title":{},"body":{"coverage.html":{}}}],["2000",{"_index":570,"title":{},"body":{"components/AppComponent.html":{}}}],["200px",{"_index":2629,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["20px",{"_index":599,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["21",{"_index":1997,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["22/27",{"_index":3553,"title":{},"body":{"coverage.html":{}}}],["22/37",{"_index":3544,"title":{},"body":{"coverage.html":{}}}],["221",{"_index":2625,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["23/34",{"_index":3535,"title":{},"body":{"coverage.html":{}}}],["23/36",{"_index":3506,"title":{},"body":{"coverage.html":{}}}],["23/37",{"_index":3538,"title":{},"body":{"coverage.html":{}}}],["23/43",{"_index":3495,"title":{},"body":{"coverage.html":{}}}],["24.55px",{"_index":836,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["24/43",{"_index":3529,"title":{},"body":{"coverage.html":{}}}],["240px",{"_index":2405,"title":{},"body":{"components/LoginComponent.html":{}}}],["24px",{"_index":826,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["25",{"_index":1272,"title":{},"body":{"components/DialogComponent.html":{},"components/LegalnoticeComponent.html":{},"coverage.html":{}}}],["2500",{"_index":3275,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["25px",{"_index":725,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["27",{"_index":3459,"title":{},"body":{"coverage.html":{}}}],["27.28px",{"_index":2635,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["27/43",{"_index":3503,"title":{},"body":{"coverage.html":{}}}],["2px",{"_index":782,"title":{},"body":{"components/ChatComponent.html":{}}}],["2s",{"_index":2350,"title":{},"body":{"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["3",{"_index":1854,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["3/11",{"_index":3460,"title":{},"body":{"coverage.html":{}}}],["3/6",{"_index":3482,"title":{},"body":{"coverage.html":{}}}],["3/7",{"_index":3469,"title":{},"body":{"coverage.html":{}}}],["3/8",{"_index":3549,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":705,"title":{},"body":{"components/BuilderComponent.html":{}}}],["300px",{"_index":2332,"title":{},"body":{"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["30px",{"_index":724,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["32px",{"_index":855,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["33",{"_index":1892,"title":{},"body":{"components/LegalnoticeComponent.html":{},"coverage.html":{}}}],["33px",{"_index":854,"title":{},"body":{"components/ChatComponent.html":{}}}],["35",{"_index":3519,"title":{},"body":{"coverage.html":{}}}],["36",{"_index":3491,"title":{},"body":{"coverage.html":{}}}],["366px",{"_index":727,"title":{},"body":{"components/BuilderComponent.html":{},"miscellaneous/variables.html":{}}}],["37",{"_index":3548,"title":{},"body":{"coverage.html":{}}}],["380px",{"_index":2411,"title":{},"body":{"components/LoginComponent.html":{}}}],["39",{"_index":3581,"title":{},"body":{"overview.html":{}}}],["3px",{"_index":810,"title":{},"body":{"components/ChatComponent.html":{}}}],["4",{"_index":2121,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["4/7",{"_index":3475,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":3467,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":2386,"title":{},"body":{"components/LoginComponent.html":{}}}],["40px",{"_index":797,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["41",{"_index":3470,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":3468,"title":{},"body":{"coverage.html":{}}}],["44",{"_index":3466,"title":{},"body":{"coverage.html":{}}}],["444",{"_index":739,"title":{},"body":{"components/BuilderComponent.html":{}}}],["45",{"_index":3499,"title":{},"body":{"coverage.html":{}}}],["46",{"_index":3521,"title":{},"body":{"coverage.html":{}}}],["46px",{"_index":2382,"title":{},"body":{"components/LoginComponent.html":{}}}],["485px",{"_index":728,"title":{},"body":{"components/BuilderComponent.html":{},"miscellaneous/variables.html":{}}}],["48px",{"_index":3284,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["49",{"_index":1889,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["49.1px",{"_index":3289,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["5",{"_index":1602,"title":{},"body":{"components/ImprintComponent.html":{}}}],["5/11",{"_index":3500,"title":{},"body":{"coverage.html":{}}}],["5/12",{"_index":3471,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":3546,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":607,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"coverage.html":{}}}],["500",{"_index":1414,"title":{},"body":{"components/EditmessageComponent.html":{},"components/LoginComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["5000s",{"_index":2372,"title":{},"body":{"components/LoginComponent.html":{}}}],["500px",{"_index":2410,"title":{},"body":{"components/LoginComponent.html":{}}}],["50px",{"_index":2377,"title":{},"body":{"components/LoginComponent.html":{}}}],["51",{"_index":3480,"title":{},"body":{"coverage.html":{}}}],["52",{"_index":1848,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["53",{"_index":3494,"title":{},"body":{"coverage.html":{}}}],["54",{"_index":3476,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":3483,"title":{},"body":{"coverage.html":{}}}],["56",{"_index":3524,"title":{},"body":{"coverage.html":{}}}],["56px",{"_index":2408,"title":{},"body":{"components/LoginComponent.html":{}}}],["57",{"_index":3474,"title":{},"body":{"coverage.html":{}}}],["59",{"_index":3543,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":839,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["5s",{"_index":2325,"title":{},"body":{"components/LoginComponent.html":{}}}],["6",{"_index":1800,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/SignUpComponent.html":{},"overview.html":{}}}],["6/13",{"_index":3522,"title":{},"body":{"coverage.html":{}}}],["6/17",{"_index":3520,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":3473,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":3540,"title":{},"body":{"coverage.html":{}}}],["6000",{"_index":2315,"title":{},"body":{"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["600px",{"_index":2403,"title":{},"body":{"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["606px",{"_index":2380,"title":{},"body":{"components/LoginComponent.html":{}}}],["60px",{"_index":813,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["61",{"_index":3550,"title":{},"body":{"coverage.html":{}}}],["6192",{"_index":1890,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["62",{"_index":3502,"title":{},"body":{"coverage.html":{}}}],["63",{"_index":3505,"title":{},"body":{"coverage.html":{}}}],["65",{"_index":3511,"title":{},"body":{"coverage.html":{}}}],["65580",{"_index":1849,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["66",{"_index":3472,"title":{},"body":{"coverage.html":{}}}],["66955",{"_index":1608,"title":{},"body":{"components/ImprintComponent.html":{}}}],["67",{"_index":3534,"title":{},"body":{"coverage.html":{}}}],["68",{"_index":3488,"title":{},"body":{"coverage.html":{}}}],["7.8.0",{"_index":3572,"title":{},"body":{"dependencies.html":{}}}],["7/14",{"_index":3486,"title":{},"body":{"coverage.html":{}}}],["7/19",{"_index":3492,"title":{},"body":{"coverage.html":{}}}],["700",{"_index":829,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["70px",{"_index":2345,"title":{},"body":{"components/LoginComponent.html":{}}}],["71",{"_index":3530,"title":{},"body":{"coverage.html":{}}}],["75px",{"_index":2354,"title":{},"body":{"components/LoginComponent.html":{}}}],["77",{"_index":3496,"title":{},"body":{"coverage.html":{}}}],["800px",{"_index":538,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["800px)\").matches",{"_index":576,"title":{},"body":{"components/AppComponent.html":{}}}],["80px",{"_index":3285,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["81",{"_index":3552,"title":{},"body":{"coverage.html":{}}}],["82",{"_index":2624,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["8px",{"_index":834,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["9",{"_index":1928,"title":{},"body":{"components/LegalnoticeComponent.html":{},"injectables/UserDialogService.html":{}}}],["9.2.0",{"_index":3569,"title":{},"body":{"dependencies.html":{}}}],["9._",{"_index":3382,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["9/15",{"_index":3541,"title":{},"body":{"coverage.html":{}}}],["900px",{"_index":688,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["90px",{"_index":2357,"title":{},"body":{"components/LoginComponent.html":{}}}],["90vw",{"_index":2614,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["93922",{"_index":1891,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["999",{"_index":3288,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["9px",{"_index":2638,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["a.password",{"_index":2906,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["a.password2",{"_index":2907,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["abbrechen",{"_index":1274,"title":{},"body":{"components/DialogComponent.html":{}}}],["abgefragt",{"_index":1816,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["abgerufen",{"_index":429,"title":{},"body":{"components/AddchatComponent.html":{}}}],["abgeschlossener",{"_index":2165,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["abgesehen",{"_index":2090,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["abs",{"_index":1801,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["abs&auml;tzen",{"_index":1951,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["abschnitt",{"_index":1662,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["absolute",{"_index":734,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["absätzen",{"_index":2241,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["abw&auml;gung",{"_index":2080,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["abwägung",{"_index":2269,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["accessors",{"_index":941,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["accordingly",{"_index":533,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["acitveuserid",{"_index":2438,"title":{},"body":{"components/MentionComponent.html":{}}}],["action",{"_index":1314,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["activated",{"_index":2877,"title":{},"body":{"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["activatedroute",{"_index":2875,"title":{},"body":{"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["active",{"_index":44,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["activechannel",{"_index":2439,"title":{},"body":{"components/MentionComponent.html":{}}}],["activemember",{"_index":29,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["activemember.email",{"_index":182,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["activemember.name",{"_index":177,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["activemember.status",{"_index":178,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["activepic",{"_index":868,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["activepic:number",{"_index":904,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["activeuser",{"_index":1396,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["activeuserid",{"_index":1207,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ReactionsComponent.html":{}}}],["actual_component",{"_index":270,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["add",{"_index":16,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["addall",{"_index":391,"title":{},"body":{"components/AddchatComponent.html":{}}}],["addchat",{"_index":274,"title":{},"body":{"components/AddchatComponent.html":{}}}],["addchat'},{'name",{"_index":191,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["addchat.component.html",{"_index":276,"title":{},"body":{"components/AddchatComponent.html":{}}}],["addchat.component.scss",{"_index":277,"title":{},"body":{"components/AddchatComponent.html":{}}}],["addchat/addchat.component",{"_index":2606,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["addchatcomponent",{"_index":190,"title":{"components/AddchatComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["adddoc",{"_index":3128,"title":{},"body":{"injectables/SharedService.html":{}}}],["adddoc(threadmessagesref",{"_index":3142,"title":{},"body":{"injectables/SharedService.html":{}}}],["added",{"_index":323,"title":{},"body":{"components/AddchatComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SharedService.html":{}}}],["additionaldata",{"_index":3415,"title":{},"body":{"classes/UserModel.html":{}}}],["additionaldata?.channels",{"_index":3432,"title":{},"body":{"classes/UserModel.html":{}}}],["additionaldata?.privatenoteref",{"_index":3434,"title":{},"body":{"classes/UserModel.html":{}}}],["additionaldata?.provider",{"_index":3436,"title":{},"body":{"classes/UserModel.html":{}}}],["additionaldata?.status",{"_index":3431,"title":{},"body":{"classes/UserModel.html":{}}}],["addmembers",{"_index":278,"title":{},"body":{"components/AddchatComponent.html":{}}}],["addmemberstochannelarray",{"_index":289,"title":{},"body":{"components/AddchatComponent.html":{}}}],["addmemberstochannelarray(member",{"_index":312,"title":{},"body":{"components/AddchatComponent.html":{}}}],["addpeople",{"_index":174,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["addreaction",{"_index":2758,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["addreaction(emoji",{"_index":2770,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["address",{"_index":1130,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["adds",{"_index":314,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/EmojiStorageService.html":{},"components/MentionComponent.html":{},"injectables/SharedService.html":{}}}],["addthreadmessage",{"_index":3068,"title":{},"body":{"injectables/SharedService.html":{}}}],["addthreadmessage(messageid",{"_index":3082,"title":{},"body":{"injectables/SharedService.html":{}}}],["addusertochannelcomponent",{"_index":1,"title":{"components/AddUserToChannelComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["adresse",{"_index":181,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["adressen",{"_index":1783,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["adresszeile",{"_index":2110,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["afterintro",{"_index":2327,"title":{},"body":{"components/LoginComponent.html":{}}}],["against",{"_index":1323,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["aktiv",{"_index":1258,"title":{},"body":{"components/DialogComponent.html":{},"components/ProfileviewComponent.html":{}}}],["aktiviert",{"_index":2118,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aktualisieren",{"_index":1391,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["aktualisiert",{"_index":1389,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["akzeptieren",{"_index":3224,"title":{},"body":{"components/SignUpComponent.html":{}}}],["alexander",{"_index":1604,"title":{},"body":{"components/ImprintComponent.html":{}}}],["alexander.de",{"_index":1612,"title":{},"body":{"components/ImprintComponent.html":{}}}],["align",{"_index":592,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["allchannels",{"_index":2936,"title":{},"body":{"injectables/SearchService.html":{}}}],["alle",{"_index":476,"title":{},"body":{"components/AddchatComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["allein",{"_index":1897,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["allem",{"_index":1690,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["allen",{"_index":2157,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aller",{"_index":2150,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["allgemeine",{"_index":1621,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["allmembers",{"_index":279,"title":{},"body":{"components/AddchatComponent.html":{}}}],["allmembersarray",{"_index":280,"title":{},"body":{"components/AddchatComponent.html":{}}}],["allmessages",{"_index":2937,"title":{},"body":{"injectables/SearchService.html":{}}}],["allowed",{"_index":1235,"title":{},"body":{"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/LoginComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["allowing",{"_index":3355,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["allows",{"_index":2595,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["allthreadmessages",{"_index":2938,"title":{},"body":{"injectables/SearchService.html":{}}}],["allusers",{"_index":2939,"title":{},"body":{"injectables/SearchService.html":{}}}],["already",{"_index":316,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/EmojiStorageService.html":{},"components/MentionComponent.html":{}}}],["als",{"_index":2105,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["analyse",{"_index":1707,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["analyseprogrammen",{"_index":1765,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["anbieter",{"_index":1773,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["andere",{"_index":1681,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["anderen",{"_index":1899,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["anderweitiger",{"_index":2046,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["anfrage",{"_index":2146,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["anfragen",{"_index":2104,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["angaben",{"_index":1600,"title":{},"body":{"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["angebahnt",{"_index":1715,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["angeben",{"_index":1270,"title":{},"body":{"components/DialogComponent.html":{}}}],["angebots",{"_index":1812,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["angemeldet",{"_index":1154,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["angular",{"_index":906,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["angular/animations",{"_index":3559,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":3561,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":143,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/BuilderComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/UsermenuComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":3563,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":141,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{},"dependencies.html":{}}}],["angular/fire",{"_index":3564,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/auth",{"_index":1063,"title":{},"body":{"interfaces/CustomUser.html":{},"classes/UserModel.html":{}}}],["angular/fire/firestore",{"_index":147,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AppComponent.html":{},"interfaces/CustomUser.html":{},"pipes/RelativeDatePipe.html":{},"injectables/SharedService.html":{},"pipes/TimestampToDatePipe.html":{}}}],["angular/forms",{"_index":150,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{},"dependencies.html":{}}}],["angular/material",{"_index":3566,"title":{},"body":{"dependencies.html":{}}}],["angular/material/dialog",{"_index":404,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{}}}],["angular/platform",{"_index":3567,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":552,"title":{},"body":{"components/AppComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"dependencies.html":{}}}],["animate('300ms",{"_index":3632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["animation",{"_index":641,"title":{},"body":{"components/BuilderComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["animationbackground",{"_index":2321,"title":{},"body":{"components/LoginComponent.html":{}}}],["animations",{"_index":679,"title":{},"body":{"components/BuilderComponent.html":{}}}],["anliegens",{"_index":2154,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["anmelden",{"_index":3198,"title":{},"body":{"components/SignInComponent.html":{}}}],["anmeldung",{"_index":3192,"title":{},"body":{"components/SignInComponent.html":{}}}],["anonym",{"_index":2176,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["anonymous",{"_index":1139,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/SearchService.html":{}}}],["anschliessend",{"_index":2032,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["app.component.html",{"_index":510,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":509,"title":{},"body":{"components/AppComponent.html":{}}}],["app/models/user",{"_index":554,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":193,"title":{"components/AppComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":3462,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":3346,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["applicationconfig",{"_index":3589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arbeit",{"_index":3195,"title":{},"body":{"components/SignInComponent.html":{}}}],["arbeiten",{"_index":1956,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["arbeitsplatzes",{"_index":2040,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["arnold",{"_index":1606,"title":{},"body":{"components/ImprintComponent.html":{}}}],["around",{"_index":2379,"title":{},"body":{"components/LoginComponent.html":{}}}],["array",{"_index":100,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"injectables/EmojiStorageService.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{}}}],["array.isarray(channels",{"_index":3037,"title":{},"body":{"injectables/SearchService.html":{}}}],["array.isarray(messages",{"_index":3015,"title":{},"body":{"injectables/SearchService.html":{}}}],["array.isarray(users",{"_index":3032,"title":{},"body":{"injectables/SearchService.html":{}}}],["arrays",{"_index":64,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/CreatemessageComponent.html":{}}}],["arrow",{"_index":2636,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["arrowback",{"_index":2394,"title":{},"body":{"components/LoginComponent.html":{}}}],["art",{"_index":1799,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["assign",{"_index":3112,"title":{},"body":{"injectables/SharedService.html":{}}}],["async",{"_index":37,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"interfaces/CustomUser.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{},"miscellaneous/variables.html":{}}}],["au&szlig;erdem",{"_index":1736,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auch",{"_index":1717,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auf",{"_index":1618,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufbewahrungsfristen",{"_index":1922,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufenthalts",{"_index":2039,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auffordern",{"_index":2163,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufgef&uuml;hrten",{"_index":1647,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufgeführten",{"_index":2199,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufsichts&shy;beh&ouml;rde",{"_index":2034,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufsichtsbeh&ouml;rde",{"_index":1752,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufsichtsbehörde",{"_index":2211,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufsichts­behörde",{"_index":2257,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auftragsanfragen",{"_index":1721,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auftragsverarbeitern",{"_index":1973,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auftragsverarbeitung",{"_index":1977,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aufweisen",{"_index":1881,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auml",{"_index":1902,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aus",{"_index":920,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["aus&uuml;bung",{"_index":2022,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ausdr&uuml;cklichen",{"_index":1932,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ausdrücklichen",{"_index":2235,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ausf&uuml;hrliche",{"_index":1640,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ausführliche",{"_index":2198,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ausgewertet",{"_index":1762,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aush&auml;ndigen",{"_index":2057,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["aushändigen",{"_index":2264,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auskunft",{"_index":1730,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ausschlie&szlig;lich",{"_index":1817,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ausschließlich",{"_index":2216,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ausübung",{"_index":2254,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["auth",{"_index":299,"title":{},"body":{"components/AddchatComponent.html":{},"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["auth.service",{"_index":2925,"title":{},"body":{"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/UserDialogService.html":{}}}],["auth/user",{"_index":1195,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["auth/wrong",{"_index":1196,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["authenticated",{"_index":520,"title":{},"body":{"components/AppComponent.html":{},"interfaces/CustomUser.html":{}}}],["authentication",{"_index":523,"title":{},"body":{"components/AppComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["authguard",{"_index":3465,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":300,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice.isauthenticated",{"_index":3617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auto",{"_index":853,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["autofill",{"_index":2371,"title":{},"body":{"components/LoginComponent.html":{}}}],["automatisch",{"_index":1682,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["automatisiert",{"_index":2051,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["außerdem",{"_index":2206,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["available",{"_index":1103,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/UserDialogService.html":{}}}],["avatar",{"_index":129,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/SignUpComponent.html":{}}}],["avatar'},{'name",{"_index":203,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["avatar.component",{"_index":3211,"title":{},"body":{"components/SignUpComponent.html":{}}}],["avatar.component.html",{"_index":866,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.scss",{"_index":867,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts",{"_index":865,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"coverage.html":{}}}],["avatar.component.ts:14",{"_index":882,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:15",{"_index":883,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:17",{"_index":899,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:18",{"_index":903,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:19",{"_index":901,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:20",{"_index":879,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:34",{"_index":884,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:43",{"_index":893,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:51",{"_index":888,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar.component.ts:59",{"_index":895,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatar/choose",{"_index":864,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/SignUpComponent.html":{},"coverage.html":{}}}],["avatar2.svg','avatar1.svg','avatar3.svg','avatar6.svg','avatar5.svg','avatar4.svg",{"_index":902,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["avatarurl",{"_index":1131,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["await",{"_index":1124,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ProfileviewComponent.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{},"miscellaneous/variables.html":{}}}],["b",{"_index":1803,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["back",{"_index":872,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["background",{"_index":603,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["backward",{"_index":877,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["band",{"_index":1174,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["bar",{"_index":981,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["based",{"_index":356,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenutogglerComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{}}}],["bdquo;hinweis",{"_index":1663,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bdquo;http://&ldquo",{"_index":2112,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bdquo;https://&ldquo",{"_index":2113,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bearbeiten",{"_index":1256,"title":{},"body":{"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["bearbeitung",{"_index":2153,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["befolgen",{"_index":1842,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["before",{"_index":664,"title":{},"body":{"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["behandeln",{"_index":1863,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["behavior",{"_index":3322,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["behaviorsubject",{"_index":1053,"title":{},"body":{"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{}}}],["behaviorsubject('in",{"_index":3241,"title":{},"body":{"injectables/StateService.html":{}}}],["behaviorsubject('initial",{"_index":3118,"title":{},"body":{"injectables/SharedService.html":{}}}],["behaviorsubject('out",{"_index":3245,"title":{},"body":{"injectables/StateService.html":{}}}],["behaviorsubject(user",{"_index":1086,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["bei",{"_index":1750,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/SignInComponent.html":{}}}],["beim",{"_index":453,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["being",{"_index":1219,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["beispiel",{"_index":494,"title":{},"body":{"components/AddchatComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["beleidigende",{"_index":2186,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["belongs",{"_index":1335,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["below",{"_index":2672,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["ben&ouml;tigen",{"_index":2068,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["benutzen",{"_index":1868,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["benutzer",{"_index":1153,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ProfileviewComponent.html":{}}}],["benötigen",{"_index":2265,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ber",{"_index":1546,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["berblick",{"_index":2195,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["berechtigten",{"_index":1945,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["berechtigtes",{"_index":1912,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["berein",{"_index":2890,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["bereits",{"_index":1984,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bereitstellung",{"_index":1704,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["berichtigung",{"_index":1737,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bermitteln",{"_index":2280,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bermittelt",{"_index":2281,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bermittelten",{"_index":2204,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bermittlung",{"_index":2243,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["berprüfen",{"_index":2266,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{}}}],["bersandten",{"_index":2286,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bertragung",{"_index":2236,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["beruht",{"_index":2008,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["berwiegen",{"_index":2253,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["beschreibung",{"_index":499,"title":{},"body":{"components/AddchatComponent.html":{}}}],["beschwerde&shy;recht",{"_index":2033,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["beschwerderecht",{"_index":1749,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["beschwerde­recht",{"_index":2256,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["besondere",{"_index":1929,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["besonderen",{"_index":1994,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bestehenden",{"_index":1797,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["besteht",{"_index":2044,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bestellungen",{"_index":1719,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["besten",{"_index":487,"title":{},"body":{"components/AddchatComponent.html":{}}}],["bestimmte",{"_index":479,"title":{},"body":{"components/AddchatComponent.html":{}}}],["bestimmten",{"_index":1743,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bestimmungen",{"_index":2004,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bestreiten",{"_index":2067,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["besuch",{"_index":1686,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["besuchen",{"_index":1633,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["betreffender",{"_index":2026,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["betreiben",{"_index":2025,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["betreiber",{"_index":1856,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["betreten",{"_index":1698,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["betriebssystem",{"_index":1693,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["betroffenen",{"_index":2010,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["between",{"_index":660,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["bez&uuml;glich",{"_index":1726,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bezug",{"_index":1841,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bezüglich",{"_index":2205,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bis",{"_index":1910,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bitte",{"_index":1266,"title":{},"body":{"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["black",{"_index":2356,"title":{},"body":{"components/LoginComponent.html":{}}}],["bleiben",{"_index":2167,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["bleibt",{"_index":1988,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["blick",{"_index":1620,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["block",{"_index":815,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["board",{"_index":526,"title":{},"body":{"components/AppComponent.html":{},"components/SignInComponent.html":{}}}],["boolean",{"_index":135,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"components/SignUpComponent.html":{},"interfaces/ThreadMessage.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["border",{"_index":722,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["both",{"_index":1345,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/StateService.html":{},"injectables/UserDialogService.html":{}}}],["bottom",{"_index":735,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["bound",{"_index":2886,"title":{},"body":{"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["box",{"_index":779,"title":{},"body":{"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["box:active",{"_index":2633,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["box:hover",{"_index":2632,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["breakpoint",{"_index":742,"title":{},"body":{"components/BuilderComponent.html":{}}}],["brigen",{"_index":2285,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["brightness(101",{"_index":822,"title":{},"body":{"components/ChatComponent.html":{}}}],["brightness(98",{"_index":849,"title":{},"body":{"components/ChatComponent.html":{}}}],["browser",{"_index":2128,"title":{},"body":{"components/LegalnoticeComponent.html":{},"dependencies.html":{}}}],["browsers",{"_index":2111,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["browsertyp",{"_index":2130,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["browserversion",{"_index":2131,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["browserzeile",{"_index":2117,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["buchstaben",{"_index":1273,"title":{},"body":{"components/DialogComponent.html":{}}}],["builder",{"_index":614,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{}}}],["builder'},{'name",{"_index":196,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["builder.component.html",{"_index":616,"title":{},"body":{"components/BuilderComponent.html":{}}}],["builder.component.scss",{"_index":615,"title":{},"body":{"components/BuilderComponent.html":{}}}],["builder:string",{"_index":2468,"title":{},"body":{"components/MentionComponent.html":{},"injectables/MentionService.html":{}}}],["buildercomponent",{"_index":195,"title":{"components/BuilderComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["bulider",{"_index":2532,"title":{},"body":{"injectables/MentionService.html":{}}}],["bulider:string",{"_index":2558,"title":{},"body":{"injectables/MentionService.html":{}}}],["button",{"_index":975,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/LoginComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"injectables/UserDialogService.html":{}}}],["button:disabled",{"_index":2389,"title":{},"body":{"components/LoginComponent.html":{}}}],["button:hover",{"_index":2640,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["button_blue",{"_index":2390,"title":{},"body":{"components/LoginComponent.html":{}}}],["button_white",{"_index":2392,"title":{},"body":{"components/LoginComponent.html":{}}}],["buttons",{"_index":2384,"title":{},"body":{"components/LoginComponent.html":{}}}],["bzw",{"_index":1832,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["c",{"_index":1943,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["cache",{"_index":1076,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["calc(100",{"_index":858,"title":{},"body":{"components/ChatComponent.html":{}}}],["call",{"_index":3234,"title":{},"body":{"injectables/StateService.html":{}}}],["called",{"_index":652,"title":{},"body":{"components/BuilderComponent.html":{},"components/CreatemessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["calling",{"_index":644,"title":{},"body":{"components/BuilderComponent.html":{}}}],["calls",{"_index":103,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"components/UsermenuComponent.html":{}}}],["canactivatefn",{"_index":3608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cancel",{"_index":1425,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["canceling",{"_index":122,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["cancelled",{"_index":1416,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["cancels",{"_index":1342,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["catch",{"_index":2743,"title":{},"body":{"components/ProfileviewComponent.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{}}}],["catch((error",{"_index":1390,"title":{},"body":{"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["catch(error",{"_index":451,"title":{},"body":{"components/AddchatComponent.html":{}}}],["causes",{"_index":3256,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["center",{"_index":593,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["change",{"_index":3336,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["changed",{"_index":3334,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["changeheadline",{"_index":2351,"title":{},"body":{"components/LoginComponent.html":{}}}],["changepassword",{"_index":2873,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["changepassword(ngform",{"_index":2881,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["changes",{"_index":646,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/UserDialogService.html":{}}}],["channel",{"_index":17,"title":{"interfaces/Channel.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"interfaces/Channel.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/ThreadchatHeaderComponent.html":{},"coverage.html":{}}}],["channel's",{"_index":960,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["channel'},{'name",{"_index":192,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["channel.component.html",{"_index":24,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.scss",{"_index":26,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts",{"_index":12,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"coverage.html":{}}}],["channel.component.ts:108",{"_index":104,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:118",{"_index":117,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:127",{"_index":111,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:144",{"_index":83,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:19",{"_index":78,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:20",{"_index":79,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:21",{"_index":80,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:22",{"_index":82,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:23",{"_index":133,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:24",{"_index":134,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:25",{"_index":131,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:26",{"_index":132,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:27",{"_index":137,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:28",{"_index":136,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:29",{"_index":130,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:39",{"_index":54,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:65",{"_index":101,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.component.ts:87",{"_index":91,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.isprivate",{"_index":2621,"title":{},"body":{"components/MenuChannelsComponent.html":{},"injectables/SearchService.html":{}}}],["channel.members.includes(userid",{"_index":3056,"title":{},"body":{"injectables/SearchService.html":{}}}],["channel.members.map((memberid",{"_index":165,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["channel.name",{"_index":2622,"title":{},"body":{"components/MenuChannelsComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["channel.name.tolowercase().includes(searchtext.tolowercase",{"_index":3059,"title":{},"body":{"injectables/SearchService.html":{}}}],["channel/add",{"_index":11,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"coverage.html":{}}}],["channel?.members.foreach(member",{"_index":2475,"title":{},"body":{"components/MentionComponent.html":{}}}],["channel?.name",{"_index":3025,"title":{},"body":{"injectables/SearchService.html":{}}}],["channelactive",{"_index":2568,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channelform",{"_index":281,"title":{},"body":{"components/AddchatComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["channelform.get('name')?.invalid",{"_index":495,"title":{},"body":{"components/AddchatComponent.html":{}}}],["channelform.get('name')?.touched",{"_index":496,"title":{},"body":{"components/AddchatComponent.html":{}}}],["channelform.get(\\'name\\')?.invalid",{"_index":500,"title":{},"body":{"components/AddchatComponent.html":{}}}],["channelform.get(\\'name\\')?.touched",{"_index":501,"title":{},"body":{"components/AddchatComponent.html":{}}}],["channelid",{"_index":957,"title":{},"body":{"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/MenuChannelsComponent.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"interfaces/ThreadMessage.html":{}}}],["channelidsubject",{"_index":3062,"title":{},"body":{"injectables/SharedService.html":{}}}],["channelname",{"_index":45,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["channelnames",{"_index":3021,"title":{},"body":{"injectables/SearchService.html":{}}}],["channelnames.filter((name",{"_index":3027,"title":{},"body":{"injectables/SearchService.html":{}}}],["channelobject",{"_index":437,"title":{},"body":{"components/AddchatComponent.html":{}}}],["channelresults",{"_index":927,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{}}}],["channelresults.length",{"_index":1045,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["channelresultssubject",{"_index":2940,"title":{},"body":{"injectables/SearchService.html":{}}}],["channels",{"_index":304,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{},"classes/UserModel.html":{}}}],["channels'},{'name",{"_index":234,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["channels.component",{"_index":2652,"title":{},"body":{"components/MenuComponent.html":{}}}],["channels.component.html",{"_index":2567,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.scss",{"_index":2566,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts",{"_index":2564,"title":{},"body":{"components/MenuChannelsComponent.html":{},"coverage.html":{}}}],["channels.component.ts:18",{"_index":2604,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:19",{"_index":2599,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:20",{"_index":2601,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:21",{"_index":2603,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:22",{"_index":2600,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:23",{"_index":2576,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:36",{"_index":2602,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:49",{"_index":2590,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:57",{"_index":2585,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:67",{"_index":2580,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:80",{"_index":2591,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.component.ts:96",{"_index":2597,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["channels.service",{"_index":3012,"title":{},"body":{"injectables/SearchService.html":{}}}],["channels/menu",{"_index":2563,"title":{},"body":{"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"coverage.html":{}}}],["channelservice",{"_index":2444,"title":{},"body":{"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{}}}],["channelsservice",{"_index":51,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{},"components/ThreadchatHeaderComponent.html":{},"coverage.html":{}}}],["channelsservice.channelsopen",{"_index":2619,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["character",{"_index":983,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SharedService.html":{}}}],["chat",{"_index":326,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["chat'},{'name",{"_index":200,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["chat.component.html",{"_index":754,"title":{},"body":{"components/ChatComponent.html":{}}}],["chat.component.scss",{"_index":753,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatbox",{"_index":1435,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["chatbox'},{'name",{"_index":198,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["chatbox__addemoji",{"_index":804,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatbox__addemoji__emoji",{"_index":825,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatbox__addreaction",{"_index":843,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatbox__emojis",{"_index":837,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatbox__mainthread",{"_index":796,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatbox__msg",{"_index":801,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatbox__threads",{"_index":851,"title":{},"body":{"components/ChatComponent.html":{}}}],["chatboxcomponent",{"_index":197,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["chatcomponent",{"_index":199,"title":{"components/ChatComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["check",{"_index":1180,"title":{},"body":{"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/ReactionsComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["checkcreatorwithactiveuser",{"_index":1283,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["checkcreatorwithactiveuser(creater",{"_index":2915,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["checked",{"_index":367,"title":{},"body":{"components/AddchatComponent.html":{},"components/MentionComponent.html":{}}}],["checkkeystatus",{"_index":1284,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["checkkeystatus(event",{"_index":1310,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["checkmention",{"_index":2440,"title":{},"body":{"components/MentionComponent.html":{}}}],["checkmention(id",{"_index":2451,"title":{},"body":{"components/MentionComponent.html":{}}}],["checkmention(id:string",{"_index":2488,"title":{},"body":{"components/MentionComponent.html":{}}}],["checkmentions",{"_index":2441,"title":{},"body":{"components/MentionComponent.html":{}}}],["checkmentions(data",{"_index":2456,"title":{},"body":{"components/MentionComponent.html":{}}}],["checkorientationandwidth",{"_index":511,"title":{},"body":{"components/AppComponent.html":{}}}],["checkorietationinterval",{"_index":516,"title":{},"body":{"components/AppComponent.html":{}}}],["checkpasswordsmatch",{"_index":2874,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["checks",{"_index":366,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenutogglerComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["checkside",{"_index":2297,"title":{},"body":{"components/LoginComponent.html":{}}}],["checkupdatedata",{"_index":2912,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["checkupdatedata(message",{"_index":2918,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["checkuserid(userid",{"_index":1181,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["child",{"_index":788,"title":{},"body":{"components/ChatComponent.html":{}}}],["child:not(:first",{"_index":787,"title":{},"body":{"components/ChatComponent.html":{}}}],["choose",{"_index":202,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["chooseavatarcomponent",{"_index":201,"title":{"components/ChooseAvatarComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["choosenmembers",{"_index":282,"title":{},"body":{"components/AddchatComponent.html":{}}}],["chosen",{"_index":890,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["class",{"_index":152,"title":{"classes/UserModel.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":3411,"title":{},"body":{"classes/UserModel.html":{}}}],["cleans",{"_index":2586,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["cleared",{"_index":955,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/ForgetPasswordComponent.html":{}}}],["clearing",{"_index":62,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/CreatemessageComponent.html":{}}}],["clearinput",{"_index":2496,"title":{},"body":{"injectables/MentionService.html":{}}}],["clearinput(inputid",{"_index":2510,"title":{},"body":{"injectables/MentionService.html":{}}}],["clearinterval(this.intervalid",{"_index":1520,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["clearloadingspinner",{"_index":2421,"title":{},"body":{"components/MainComponent.html":{}}}],["clearresults",{"_index":933,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["clears",{"_index":318,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"injectables/MentionService.html":{},"injectables/SearchService.html":{}}}],["click",{"_index":959,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/MentionService.html":{}}}],["clickchannel",{"_index":934,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["clickchannel(target",{"_index":956,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["clicked",{"_index":966,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/EmojiPickerComponent.html":{}}}],["clicks",{"_index":973,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/MentionService.html":{},"injectables/UserDialogService.html":{}}}],["clickuser",{"_index":935,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["clickuser(target",{"_index":967,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["clip",{"_index":581,"title":{},"body":{"components/AppComponent.html":{}}}],["close",{"_index":48,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"injectables/UserDialogService.html":{}}}],["closed",{"_index":663,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"injectables/UserDialogService.html":{}}}],["closedialog",{"_index":3307,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["closedialog(event",{"_index":3318,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["closemenu",{"_index":624,"title":{},"body":{"components/BuilderComponent.html":{}}}],["closemenuandthread",{"_index":3228,"title":{},"body":{"injectables/StateService.html":{}}}],["closeprofile",{"_index":36,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ProfileviewComponent.html":{}}}],["closeprofiledialogs",{"_index":3308,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["closeprofiledialogs(event",{"_index":3324,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["closeprofileedit",{"_index":3309,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["closes",{"_index":84,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/EditmessageComponent.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"injectables/UserDialogService.html":{}}}],["closethreadchat",{"_index":3254,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["closing",{"_index":3327,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["code",{"_index":1175,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["collection",{"_index":305,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"interfaces/CustomUser.html":{},"components/MenuChannelsComponent.html":{},"injectables/SharedService.html":{}}}],["collection(this.firestore",{"_index":558,"title":{},"body":{"components/AppComponent.html":{},"interfaces/CustomUser.html":{},"injectables/SharedService.html":{}}}],["collectiondata",{"_index":553,"title":{},"body":{"components/AppComponent.html":{}}}],["collectiondata(userscollection",{"_index":560,"title":{},"body":{"components/AppComponent.html":{}}}],["color",{"_index":604,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["colors",{"_index":586,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["colors.$bg",{"_index":605,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["colors.$error",{"_index":2396,"title":{},"body":{"components/LoginComponent.html":{}}}],["colors.$grey",{"_index":833,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["colors.$light",{"_index":808,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["colors.$purple",{"_index":830,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["colors.$purple2",{"_index":803,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["colors.$purple3",{"_index":842,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["colors.$white",{"_index":721,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["colors.scss",{"_index":585,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["column",{"_index":597,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["combinelatest",{"_index":2789,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["combinelatest(userobservables).pipe",{"_index":2797,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["commonmodule",{"_index":21,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/BuilderComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/UsermenuComponent.html":{}}}],["compares",{"_index":3359,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["complete",{"_index":653,"title":{},"body":{"components/BuilderComponent.html":{},"interfaces/CustomUser.html":{},"injectables/UserDialogService.html":{}}}],["completed",{"_index":642,"title":{},"body":{"components/BuilderComponent.html":{}}}],["completes",{"_index":896,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["component",{"_index":0,"title":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["component's",{"_index":953,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["component,inject",{"_index":1356,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["component_template",{"_index":189,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["componentname",{"_index":1434,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"overview.html":{}}}],["compoponent',this.data.thread",{"_index":1370,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["conditions",{"_index":1346,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["confirmpasswordreset",{"_index":1057,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["confirmpasswordreset(oobcode",{"_index":1178,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["confirmpasswordreset(this.auth",{"_index":1179,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["confirms",{"_index":1173,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["console",{"_index":390,"title":{},"body":{"components/AddchatComponent.html":{},"components/HeaderComponent.html":{},"injectables/SearchService.html":{},"injectables/UserDialogService.html":{}}}],["console.error('benutzer",{"_index":2734,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["console.error('docid",{"_index":1404,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["console.error('error",{"_index":422,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/SearchService.html":{}}}],["console.error('fehlende",{"_index":1377,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["console.error('fehler",{"_index":452,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["console.error('formular",{"_index":434,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{}}}],["console.error('google",{"_index":3187,"title":{},"body":{"components/SignInComponent.html":{}}}],["console.error('guest",{"_index":3185,"title":{},"body":{"components/SignInComponent.html":{}}}],["console.error('nur",{"_index":1380,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["console.error('parentmessageid",{"_index":1366,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["console.error('user",{"_index":426,"title":{},"body":{"components/AddchatComponent.html":{}}}],["console.error(error",{"_index":1532,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["console.log(\"ausgeführt",{"_index":3251,"title":{},"body":{"injectables/StateService.html":{}}}],["console.log('active",{"_index":2934,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["console.log('all",{"_index":456,"title":{},"body":{"components/AddchatComponent.html":{}}}],["console.log('channels",{"_index":3038,"title":{},"body":{"injectables/SearchService.html":{}}}],["console.log('data",{"_index":2933,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["console.log('edit",{"_index":1415,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["console.log('lösche",{"_index":1399,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["console.log('openedit",{"_index":1369,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["console.log(newvalue",{"_index":3391,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["const",{"_index":164,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"pipes/TimestampToDatePipe.html":{},"injectables/UserDialogService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":49,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["constructor(@inject(document",{"_index":2546,"title":{},"body":{"injectables/MentionService.html":{}}}],["constructor(auth",{"_index":878,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/MentionComponent.html":{},"injectables/UserDialogService.html":{}}}],["constructor(authservice",{"_index":517,"title":{},"body":{"components/AppComponent.html":{},"components/SignInComponent.html":{}}}],["constructor(channelsservice",{"_index":50,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["constructor(data",{"_index":2692,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["constructor(document",{"_index":2502,"title":{},"body":{"injectables/MentionService.html":{}}}],["constructor(fb",{"_index":297,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["constructor(firebaseuser",{"_index":3413,"title":{},"body":{"classes/UserModel.html":{}}}],["constructor(firestore",{"_index":3080,"title":{},"body":{"injectables/SharedService.html":{}}}],["constructor(private",{"_index":556,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/HeaderComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SharedService.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["constructor(public",{"_index":1245,"title":{},"body":{"components/DialogComponent.html":{},"components/LoginComponent.html":{},"components/UsermenuComponent.html":{}}}],["constructor(router",{"_index":1494,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignUpComponent.html":{}}}],["constructor(searchservice",{"_index":942,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["constructor(sharedservice",{"_index":757,"title":{},"body":{"components/ChatComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["constructor(stateservice",{"_index":631,"title":{},"body":{"components/BuilderComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["constructor(toastmessageservice",{"_index":2422,"title":{},"body":{"components/MainComponent.html":{},"components/ToastMessageComponent.html":{}}}],["constructor(userdialog",{"_index":1230,"title":{},"body":{"components/DialogComponent.html":{},"components/UsermenuComponent.html":{}}}],["constructor(userservice",{"_index":2764,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["constructs",{"_index":55,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"injectables/UserDialogService.html":{}}}],["contain",{"_index":2694,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["container",{"_index":587,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["container.hidden",{"_index":729,"title":{},"body":{"components/BuilderComponent.html":{}}}],["containernoanimation",{"_index":2353,"title":{},"body":{"components/LoginComponent.html":{}}}],["containing",{"_index":322,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/MentionComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["contains",{"_index":1104,"title":{},"body":{"interfaces/CustomUser.html":{},"components/HeaderComponent.html":{}}}],["content",{"_index":595,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/CustomUser.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SharedService.html":{},"components/ToastMessageComponent.html":{}}}],["contrast(92",{"_index":850,"title":{},"body":{"components/ChatComponent.html":{}}}],["contrast(99",{"_index":823,"title":{},"body":{"components/ChatComponent.html":{}}}],["convenience",{"_index":3233,"title":{},"body":{"injectables/StateService.html":{}}}],["convert",{"_index":3086,"title":{},"body":{"injectables/SharedService.html":{}}}],["converted",{"_index":2838,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["converts",{"_index":2824,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"injectables/SharedService.html":{},"pipes/TimestampToDatePipe.html":{}}}],["converttimestamp",{"_index":3069,"title":{},"body":{"injectables/SharedService.html":{}}}],["converttimestamp(timestamp",{"_index":3084,"title":{},"body":{"injectables/SharedService.html":{}}}],["cookies",{"_index":1823,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["corresponding",{"_index":647,"title":{},"body":{"components/BuilderComponent.html":{},"components/EditmessageComponent.html":{}}}],["corresponds",{"_index":1570,"title":{},"body":{"components/HeaderComponent.html":{}}}],["countdown",{"_index":1488,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["coverage",{"_index":3456,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":335,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/MentionService.html":{},"components/MenuComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["createchannel",{"_index":290,"title":{},"body":{"components/AddchatComponent.html":{}}}],["created",{"_index":353,"title":{},"body":{"components/AddchatComponent.html":{},"components/ProfileviewComponent.html":{}}}],["createdat",{"_index":750,"title":{},"body":{"interfaces/Channel.html":{}}}],["createdby",{"_index":441,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/Channel.html":{},"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{}}}],["createmessage",{"_index":755,"title":{},"body":{"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{}}}],["createmessage'},{'name",{"_index":205,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["createmessage.component.html",{"_index":925,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["createmessage.component.scss",{"_index":926,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["createmessage/createmessage.component",{"_index":770,"title":{},"body":{"components/ChatComponent.html":{}}}],["createmessagecomponent",{"_index":204,"title":{"components/CreatemessageComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["createmessagepressed",{"_index":775,"title":{},"body":{"components/ChatComponent.html":{}}}],["createnewchannel",{"_index":291,"title":{},"body":{"components/AddchatComponent.html":{}}}],["createnewchannel(newchannel",{"_index":341,"title":{},"body":{"components/AddchatComponent.html":{}}}],["createnewmessage",{"_index":2644,"title":{},"body":{"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["createprivatechannel",{"_index":2688,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["createprivatechannel(currentuserid",{"_index":2699,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["creater",{"_index":2917,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["creates",{"_index":331,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/MenuComponent.html":{},"components/ProfileviewComponent.html":{},"components/ToastMessageComponent.html":{}}}],["createuserbehaviorsubject(userid",{"_index":1107,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["creating",{"_index":307,"title":{},"body":{"components/AddchatComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/UserDialogService.html":{}}}],["creation",{"_index":348,"title":{},"body":{"components/AddchatComponent.html":{}}}],["creator",{"_index":1328,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["creatorname",{"_index":1211,"title":{},"body":{"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{}}}],["creatorphotourl",{"_index":1212,"title":{},"body":{"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{}}}],["credentials",{"_index":3165,"title":{},"body":{"components/SignInComponent.html":{}}}],["ctrl/ngx",{"_index":1441,"title":{},"body":{"components/EmojiPickerComponent.html":{},"dependencies.html":{}}}],["current",{"_index":60,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuHeaderComponent.html":{},"pipes/RelativeDatePipe.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["currentchannel",{"_index":3253,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["currentchannelid",{"_index":2569,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["currently",{"_index":362,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SharedService.html":{}}}],["currenturl",{"_index":1564,"title":{},"body":{"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["currentuser",{"_index":1149,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["currentuserid",{"_index":361,"title":{},"body":{"components/AddchatComponent.html":{},"components/ProfileviewComponent.html":{}}}],["cursor",{"_index":740,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["custom",{"_index":2616,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["customuser",{"_index":1046,"title":{"interfaces/CustomUser.html":{}},"body":{"interfaces/CustomUser.html":{},"coverage.html":{}}}],["d",{"_index":2330,"title":{},"body":{"components/LoginComponent.html":{}}}],["d&uuml;rfen",{"_index":2088,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["d0d0d0",{"_index":2628,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["dabei",{"_index":1961,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dabubble",{"_index":547,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/SignUpComponent.html":{}}}],["dadurch",{"_index":1668,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["damit",{"_index":2181,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dann",{"_index":1964,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dar&uuml;ber",{"_index":1626,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["daran",{"_index":2109,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["darauf",{"_index":1875,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["daraus",{"_index":2151,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["darf",{"_index":1264,"title":{},"body":{"components/DialogComponent.html":{}}}],["darstellung",{"_index":2142,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["darüber",{"_index":2196,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["das",{"_index":1405,"title":{},"body":{"components/EditmessageComponent.html":{},"components/LegalnoticeComponent.html":{},"components/MentionComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["dass",{"_index":1670,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["data",{"_index":73,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"injectables/UserDialogService.html":{}}}],["data.id",{"_index":2479,"title":{},"body":{"components/MentionComponent.html":{}}}],["data.member",{"_index":2722,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["data.mention",{"_index":2483,"title":{},"body":{"components/MentionComponent.html":{}}}],["database",{"_index":74,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"interfaces/CustomUser.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{}}}],["datachangeallowedcheck",{"_index":3310,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dataforest",{"_index":1845,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datauser",{"_index":1394,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["date",{"_index":751,"title":{},"body":{"interfaces/Channel.html":{},"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"pipes/RelativeDatePipe.html":{},"injectables/SharedService.html":{},"interfaces/ThreadMessage.html":{},"pipes/TimestampToDatePipe.html":{}}}],["date(timestamp",{"_index":3149,"title":{},"body":{"injectables/SharedService.html":{}}}],["date(timestamp.seconds",{"_index":3148,"title":{},"body":{"injectables/SharedService.html":{}}}],["date(value",{"_index":2849,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["date(value.seconds",{"_index":2856,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["date.getdate",{"_index":2857,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["date.getfullyear",{"_index":2861,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["date.getmonth",{"_index":2859,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["date.pipe.ts",{"_index":2820,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"coverage.html":{}}}],["date.pipe.ts:17",{"_index":3263,"title":{},"body":{"pipes/TimestampToDatePipe.html":{}}}],["date.pipe.ts:46",{"_index":2823,"title":{},"body":{"pipes/RelativeDatePipe.html":{}}}],["date.tolocaledatestring('de",{"_index":2850,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["dateien",{"_index":2124,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["daten",{"_index":1630,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["daten&shy;&uuml;bertrag&shy;barkeit",{"_index":2050,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["daten&uuml;bertragung",{"_index":1877,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenerfassung",{"_index":1649,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenerhebung",{"_index":1993,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenkategorien",{"_index":1930,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenquellen",{"_index":2139,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenschutz",{"_index":1251,"title":{},"body":{"components/DialogComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{}}}],["datenschutz&shy;erkl&auml;rung",{"_index":1617,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenschutzerkl&auml;rung",{"_index":1648,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenschutzerklärung",{"_index":2200,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/SignUpComponent.html":{}}}],["datenschutzvorschriften",{"_index":1867,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenschutz­erklärung",{"_index":2194,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenspeicherung",{"_index":2164,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenverarbeitung",{"_index":1654,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenverarbeitungsvorg&auml;nge",{"_index":1983,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenverarbeitungsvorgänge",{"_index":2246,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenweitergabe",{"_index":1970,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["daten­übertrag­barkeit",{"_index":2262,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datenübertragung",{"_index":2225,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["datum",{"_index":2837,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["dauer",{"_index":2072,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["day",{"_index":2833,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["dazu",{"_index":2187,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["db",{"_index":1326,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["dd",{"_index":2843,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["de",{"_index":2851,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"miscellaneous/variables.html":{}}}],["decoration",{"_index":2383,"title":{},"body":{"components/LoginComponent.html":{}}}],["decorators",{"_index":656,"title":{},"body":{"components/BuilderComponent.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{}}}],["decrements",{"_index":1505,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["default",{"_index":76,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1134,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["defined",{"_index":53,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["dein",{"_index":1261,"title":{},"body":{"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/SignUpComponent.html":{}}}],["deine",{"_index":1551,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["deinem",{"_index":483,"title":{},"body":{"components/AddchatComponent.html":{},"components/SignUpComponent.html":{}}}],["deinen",{"_index":918,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["deiner",{"_index":3215,"title":{},"body":{"components/SignUpComponent.html":{}}}],["delay",{"_index":639,"title":{},"body":{"components/BuilderComponent.html":{},"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["delete",{"_index":1309,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{}}}],["deleteanonymoususerfromfirestore",{"_index":1202,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["deleted",{"_index":1327,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SharedService.html":{}}}],["deletedoc",{"_index":1050,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/SharedService.html":{}}}],["deletedoc(doc(this.firestore",{"_index":1203,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["deletedoc(messageref",{"_index":3153,"title":{},"body":{"injectables/SharedService.html":{}}}],["deletedoc(threadmessageref",{"_index":3146,"title":{},"body":{"injectables/SharedService.html":{}}}],["deletemainmessage",{"_index":1285,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["deletemessage",{"_index":1286,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SharedService.html":{}}}],["deletemessage(docid",{"_index":3087,"title":{},"body":{"injectables/SharedService.html":{}}}],["deletes",{"_index":972,"title":{},"body":{"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/SharedService.html":{}}}],["deletesearch",{"_index":936,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["deletethreadmessage",{"_index":1287,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SharedService.html":{}}}],["deletethreadmessage(docid",{"_index":1330,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["deletethreadmessage(parentmessageid",{"_index":3091,"title":{},"body":{"injectables/SharedService.html":{}}}],["deleting",{"_index":978,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["deletion",{"_index":3090,"title":{},"body":{"injectables/SharedService.html":{}}}],["dem",{"_index":1661,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["den",{"_index":1657,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{}}}],["denen",{"_index":1636,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["denn",{"_index":2013,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dependencies",{"_index":3558,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depending",{"_index":1321,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["der",{"_index":497,"title":{},"body":{"components/AddchatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/EditmessageComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SaveEditMessageService.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{}}}],["derartiger",{"_index":2027,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["derdatenschutzerklärungzu",{"_index":3223,"title":{},"body":{"components/SignUpComponent.html":{}}}],["deren",{"_index":2064,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["des",{"_index":455,"title":{},"body":{"components/AddchatComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{}}}],["describing",{"_index":2777,"title":{},"body":{"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["description",{"_index":70,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["desktop",{"_index":3445,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["dessen",{"_index":1659,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["detaillierte",{"_index":1766,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["details",{"_index":1304,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SearchService.html":{}}}],["detected",{"_index":2530,"title":{},"body":{"injectables/MentionService.html":{}}}],["determine",{"_index":2673,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["device",{"_index":583,"title":{},"body":{"components/AppComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["device}@else",{"_index":612,"title":{},"body":{"components/AppComponent.html":{}}}],["devspace",{"_index":478,"title":{},"body":{"components/AddchatComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["dialog",{"_index":311,"title":{},"body":{"components/AddchatComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["dialog'},{'name",{"_index":207,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["dialog.component.html",{"_index":1224,"title":{},"body":{"components/DialogComponent.html":{}}}],["dialog.component.scss",{"_index":1225,"title":{},"body":{"components/DialogComponent.html":{}}}],["dialog.component.ts",{"_index":3528,"title":{},"body":{"coverage.html":{}}}],["dialog.service",{"_index":1244,"title":{},"body":{"components/DialogComponent.html":{},"components/UsermenuComponent.html":{}}}],["dialog.service.ts",{"_index":3301,"title":{},"body":{"injectables/UserDialogService.html":{},"coverage.html":{}}}],["dialog.service.ts:107",{"_index":3325,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:11",{"_index":3368,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:12",{"_index":3369,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:121",{"_index":3319,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:13",{"_index":3365,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:134",{"_index":3349,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:14",{"_index":3364,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:15",{"_index":3367,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:152",{"_index":3361,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:17",{"_index":3370,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:176",{"_index":3372,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:18",{"_index":3316,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:189",{"_index":3357,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:207",{"_index":3339,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:217",{"_index":3345,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:231",{"_index":3333,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:50",{"_index":3351,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:62",{"_index":3352,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:75",{"_index":3356,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog.service.ts:91",{"_index":3329,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dialog/dialog.component",{"_index":3449,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["dialog/menu",{"_index":3527,"title":{},"body":{"coverage.html":{}}}],["dialogchange",{"_index":1229,"title":{},"body":{"components/DialogComponent.html":{},"injectables/UserDialogService.html":{}}}],["dialogcomponent",{"_index":206,"title":{"components/DialogComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["dialogref",{"_index":284,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/ProfileviewComponent.html":{}}}],["dialogs",{"_index":3320,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["die",{"_index":1383,"title":{},"body":{"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"injectables/SaveEditMessageService.html":{},"components/SignInComponent.html":{}}}],["dienen",{"_index":482,"title":{},"body":{"components/AddchatComponent.html":{}}}],["dient",{"_index":2020,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dies",{"_index":1836,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["diese",{"_index":1540,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["diesem",{"_index":1646,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["diesen",{"_index":1767,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dieser",{"_index":1650,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["differs",{"_index":3358,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["digit',month",{"_index":2852,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["dimensions",{"_index":2593,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["dir",{"_index":3194,"title":{},"body":{"components/SignInComponent.html":{}}}],["direction",{"_index":596,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{}}}],["directive",{"_index":187,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["directives",{"_index":269,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["direkte",{"_index":2059,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["direktwerbung",{"_index":1996,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["disabled",{"_index":2388,"title":{},"body":{"components/LoginComponent.html":{},"injectables/UserDialogService.html":{}}}],["display",{"_index":590,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["displayed",{"_index":976,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SaveEditMessageService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["displaying",{"_index":1301,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["displayname",{"_index":1187,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["displays",{"_index":3363,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["disselect",{"_index":2463,"title":{},"body":{"components/MentionComponent.html":{},"injectables/MentionService.html":{}}}],["disselect(member",{"_index":2513,"title":{},"body":{"injectables/MentionService.html":{}}}],["disselect(member:string",{"_index":2561,"title":{},"body":{"injectables/MentionService.html":{}}}],["disselected",{"_index":2517,"title":{},"body":{"injectables/MentionService.html":{}}}],["disselects",{"_index":2515,"title":{},"body":{"injectables/MentionService.html":{}}}],["div",{"_index":824,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["divider",{"_index":852,"title":{},"body":{"components/ChatComponent.html":{}}}],["divider::after",{"_index":856,"title":{},"body":{"components/ChatComponent.html":{}}}],["doc",{"_index":146,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"interfaces/CustomUser.html":{},"injectables/SharedService.html":{}}}],["doc(this.firestore",{"_index":1165,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/SharedService.html":{}}}],["doc.data",{"_index":1081,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["docid",{"_index":1332,"title":{},"body":{"components/EditmessageComponent.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{},"interfaces/ThreadMessage.html":{}}}],["docsnap.data",{"_index":1098,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["docsnap.exists",{"_index":1097,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["document",{"_index":1334,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/MentionService.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{},"injectables/UserDialogService.html":{}}}],["document.queryselector('input[type=\"text",{"_index":465,"title":{},"body":{"components/AddchatComponent.html":{}}}],["documentation",{"_index":3457,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":2707,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["dom",{"_index":6,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["dontclosedialog",{"_index":3311,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["dontclosedialog(event",{"_index":3338,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["doppelnamen",{"_index":3218,"title":{},"body":{"components/SignUpComponent.html":{}}}],["down",{"_index":1319,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["dritt&shy;anbietern",{"_index":1758,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dritte",{"_index":1883,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dritten",{"_index":2052,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["drittstaaten",{"_index":1935,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dritt­anbietern",{"_index":2212,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dropdown",{"_index":2675,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["dsgvo",{"_index":1804,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["du",{"_index":1555,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ReactionsComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["duplicate",{"_index":360,"title":{},"body":{"components/AddchatComponent.html":{}}}],["duration",{"_index":3271,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["durch",{"_index":1656,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["durchf&uuml;hrung",{"_index":1938,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["durchführung",{"_index":2238,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["dynamic",{"_index":3568,"title":{},"body":{"dependencies.html":{}}}],["dürfen",{"_index":2271,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["e",{"_index":179,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/DialogComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["e.g",{"_index":2535,"title":{},"body":{"injectables/MentionService.html":{}}}],["each",{"_index":1460,"title":{},"body":{"injectables/EmojiStorageService.html":{},"components/MentionComponent.html":{},"injectables/SearchService.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["ease",{"_index":718,"title":{},"body":{"components/BuilderComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{},"miscellaneous/variables.html":{}}}],["edit",{"_index":1308,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{},"coverage.html":{}}}],["editmessage",{"_index":1277,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["editmessage'},{'name",{"_index":209,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["editmessage.component.html",{"_index":1278,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["editmessage.component.scss",{"_index":1279,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["editmessagecomponent",{"_index":208,"title":{"components/EditmessageComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["effectively",{"_index":121,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"injectables/UserDialogService.html":{}}}],["effektiven",{"_index":2160,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["effizienten",{"_index":1810,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ein",{"_index":1539,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/SignUpComponent.html":{}}}],["eine",{"_index":1545,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["einem",{"_index":2053,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einen",{"_index":1619,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einer",{"_index":1807,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["eines",{"_index":1974,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einfachen",{"_index":1624,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["eingeben",{"_index":1680,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["eingelegt",{"_index":2078,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["eingeschr&auml;nkt",{"_index":2087,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["eingeschränkt",{"_index":2270,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["eingewilligt",{"_index":1927,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einlegen",{"_index":2009,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einmal",{"_index":3181,"title":{},"body":{"components/SignInComponent.html":{}}}],["einsatz",{"_index":1972,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einschl&auml;gigen",{"_index":1950,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einschlägigen",{"_index":2240,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einschr&auml;nkung",{"_index":1745,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einschränkung",{"_index":2209,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einwilligung",{"_index":1685,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einzelfall",{"_index":1949,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["einzige",{"_index":2492,"title":{},"body":{"components/MentionComponent.html":{}}}],["einzulegen",{"_index":2002,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["element",{"_index":186,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["element.channelid).map((element",{"_index":3023,"title":{},"body":{"injectables/SearchService.html":{}}}],["email",{"_index":127,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/ForgetPasswordComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{}}}],["emails",{"_index":992,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{}}}],["emailsended",{"_index":1489,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["emission",{"_index":3259,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["emits",{"_index":105,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/EmojiPickerComponent.html":{},"components/HeaderComponent.html":{},"components/ReactionsComponent.html":{},"injectables/StateService.html":{},"injectables/UserDialogService.html":{}}}],["emitted",{"_index":762,"title":{},"body":{"components/ChatComponent.html":{},"components/HeaderComponent.html":{}}}],["emitting",{"_index":2579,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["emoji",{"_index":211,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"dependencies.html":{}}}],["emojipickercomponent",{"_index":210,"title":{"components/EmojiPickerComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["emojipickerservice",{"_index":3537,"title":{},"body":{"coverage.html":{}}}],["emojis",{"_index":1457,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["emojis.filter((e",{"_index":1477,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["emojis.slice(0",{"_index":1479,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["emojis.unshift(emoji",{"_index":1478,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["emojis[1",{"_index":1476,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["emojistorageservice",{"_index":1447,"title":{"injectables/EmojiStorageService.html":{}},"body":{"injectables/EmojiStorageService.html":{},"coverage.html":{}}}],["empf&auml;nger",{"_index":1732,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["empfehlen",{"_index":3193,"title":{},"body":{"components/SignInComponent.html":{}}}],["empfänger",{"_index":1953,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["empty",{"_index":377,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/SearchService.html":{}}}],["enabled",{"_index":3337,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["endger&auml;t",{"_index":1825,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["endgerät",{"_index":2217,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ensure",{"_index":640,"title":{},"body":{"components/BuilderComponent.html":{}}}],["enter",{"_index":1316,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["entf&auml;llt",{"_index":1911,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["entfällt",{"_index":2231,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["entnehmen",{"_index":1643,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["entscheidet",{"_index":1903,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["entsprechend",{"_index":1865,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["entsprechende",{"_index":1815,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["equal",{"_index":537,"title":{},"body":{"components/AppComponent.html":{}}}],["equals",{"_index":1307,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["erf&uuml;llung",{"_index":1837,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erfassen",{"_index":1667,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erfasst",{"_index":1689,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erfassung",{"_index":1696,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erfolgen",{"_index":1947,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erfolgreich",{"_index":1408,"title":{},"body":{"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/UserDialogService.html":{}}}],["erfolgt",{"_index":1655,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erfolgten",{"_index":1987,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erforderlich",{"_index":498,"title":{},"body":{"components/AddchatComponent.html":{},"components/LegalnoticeComponent.html":{},"injectables/SharedService.html":{}}}],["erfüllung",{"_index":2218,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ergeben",{"_index":2000,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erhalten",{"_index":1735,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erheben",{"_index":1872,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erhebt",{"_index":2125,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erhoben",{"_index":1669,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erkennen",{"_index":2108,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erl&auml;utert",{"_index":1871,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erlaubt",{"_index":1971,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/SignUpComponent.html":{}}}],["erläutert",{"_index":2224,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ernst",{"_index":1862,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["error",{"_index":338,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"components/SignInComponent.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{}}}],["error('parentmessageid",{"_index":3151,"title":{},"body":{"injectables/SharedService.html":{}}}],["error.code",{"_index":1194,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["errormessage",{"_index":2868,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["erstellen",{"_index":454,"title":{},"body":{"components/AddchatComponent.html":{},"components/LoginComponent.html":{},"components/ProfileviewComponent.html":{},"components/SignUpComponent.html":{}}}],["ersteller",{"_index":1381,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["erstellt",{"_index":2737,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["erstellung",{"_index":2174,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erteilt",{"_index":1740,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["erteilte",{"_index":1985,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["es",{"_index":1674,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["europ&auml;ischen",{"_index":2095,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["europäischen",{"_index":2274,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["evenodd",{"_index":580,"title":{},"body":{"components/AppComponent.html":{}}}],["event",{"_index":106,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/MentionService.html":{},"components/ReactionsComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["event.emoji.native",{"_index":1445,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["event.keycode",{"_index":1418,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["event.preventdefault",{"_index":1420,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["event.shiftkey",{"_index":1417,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["event.stoppropagation",{"_index":3390,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["event.target",{"_index":469,"title":{},"body":{"components/AddchatComponent.html":{}}}],["event.tostate",{"_index":707,"title":{},"body":{"components/BuilderComponent.html":{}}}],["event?.preventdefault",{"_index":3389,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["eventcoalescing",{"_index":3592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":81,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/DialogComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ReactionsComponent.html":{},"injectables/UserDialogService.html":{}}}],["events",{"_index":684,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["example",{"_index":303,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{}}}],["exclude",{"_index":2972,"title":{},"body":{"injectables/SearchService.html":{}}}],["excluding",{"_index":989,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{}}}],["exist",{"_index":2708,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["existing",{"_index":965,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/ProfileviewComponent.html":{}}}],["existingchannel",{"_index":2744,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["existingchannel.id",{"_index":2746,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["existingchannels",{"_index":2711,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["existingchannels.length",{"_index":2740,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["existingchannels[0",{"_index":2745,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["exists",{"_index":317,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{}}}],["exitactiv",{"_index":3302,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["export",{"_index":151,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["extern",{"_index":1775,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["externe",{"_index":1791,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["externen",{"_index":1958,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["externes",{"_index":1774,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["extract",{"_index":2878,"title":{},"body":{"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["f",{"_index":1814,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["f&auml;llen",{"_index":1995,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["f&uuml;r",{"_index":1653,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["factory",{"_index":2509,"title":{},"body":{"injectables/MentionService.html":{}}}],["failed",{"_index":3184,"title":{},"body":{"components/SignInComponent.html":{}}}],["fails",{"_index":350,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/UserDialogService.html":{}}}],["fall",{"_index":1924,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["falle",{"_index":1931,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["falsches",{"_index":3180,"title":{},"body":{"components/SignInComponent.html":{}}}],["false",{"_index":88,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"miscellaneous/variables.html":{}}}],["fb",{"_index":306,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["fehlen",{"_index":2735,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["fehlender",{"_index":2897,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["fehlerfreie",{"_index":1703,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["fehlerfreien",{"_index":2141,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["fehlt",{"_index":1367,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["feld",{"_index":1263,"title":{},"body":{"components/DialogComponent.html":{}}}],["ferner",{"_index":1944,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["feststeht",{"_index":2085,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["fetch",{"_index":2961,"title":{},"body":{"injectables/SearchService.html":{}}}],["fetching",{"_index":423,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/SearchService.html":{}}}],["ffentlichen",{"_index":2273,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["field",{"_index":320,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"injectables/MentionService.html":{}}}],["fields",{"_index":1296,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["file",{"_index":8,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["files",{"_index":2145,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["fill",{"_index":578,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["filter",{"_index":816,"title":{},"body":{"components/ChatComponent.html":{},"injectables/SearchService.html":{}}}],["filter((element",{"_index":3022,"title":{},"body":{"injectables/SearchService.html":{}}}],["filter((id",{"_index":445,"title":{},"body":{"components/AddchatComponent.html":{}}}],["filtered",{"_index":376,"title":{},"body":{"components/AddchatComponent.html":{}}}],["filteredchannels",{"_index":3054,"title":{},"body":{"injectables/SearchService.html":{}}}],["filteredmembersarray",{"_index":285,"title":{},"body":{"components/AddchatComponent.html":{}}}],["filteredmembersarray.length",{"_index":480,"title":{},"body":{"components/AddchatComponent.html":{}}}],["filteredmessages",{"_index":3040,"title":{},"body":{"injectables/SearchService.html":{}}}],["filteredusers",{"_index":3049,"title":{},"body":{"injectables/SearchService.html":{}}}],["filters",{"_index":379,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/SearchService.html":{}}}],["finden",{"_index":1768,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["fingerprinting",{"_index":1827,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["firebase",{"_index":1182,"title":{},"body":{"interfaces/CustomUser.html":{},"dependencies.html":{}}}],["firebase/auth",{"_index":1060,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["firebase/firestore",{"_index":3129,"title":{},"body":{"injectables/SharedService.html":{}}}],["firebaseuser",{"_index":3414,"title":{},"body":{"classes/UserModel.html":{}}}],["firebaseuser?.displayname",{"_index":3426,"title":{},"body":{"classes/UserModel.html":{}}}],["firebaseuser?.email",{"_index":3430,"title":{},"body":{"classes/UserModel.html":{}}}],["firebaseuser?.photourl",{"_index":3428,"title":{},"body":{"classes/UserModel.html":{}}}],["firebaseuser?.uid",{"_index":3424,"title":{},"body":{"classes/UserModel.html":{}}}],["firestore",{"_index":52,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/UserDialogService.html":{}}}],["firestore,private",{"_index":1072,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["first",{"_index":666,"title":{},"body":{"components/BuilderComponent.html":{},"components/CreatemessageComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ProfileviewComponent.html":{}}}],["firstvaluefrom",{"_index":1054,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["firstvaluefrom(this.getuserbyid(userid",{"_index":1125,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["fit",{"_index":2413,"title":{},"body":{"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["fixed",{"_index":795,"title":{},"body":{"components/ChatComponent.html":{},"components/ToastMessageComponent.html":{}}}],["flag",{"_index":329,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"injectables/UserDialogService.html":{}}}],["flags",{"_index":2300,"title":{},"body":{"components/LoginComponent.html":{},"injectables/UserDialogService.html":{}}}],["flex",{"_index":591,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["focus",{"_index":2367,"title":{},"body":{"components/LoginComponent.html":{}}}],["focuses",{"_index":970,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/MentionService.html":{}}}],["folgende(n",{"_index":1844,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["folgendem",{"_index":1772,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["folgenden",{"_index":1623,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["font",{"_index":609,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["footer",{"_index":2362,"title":{},"body":{"components/LoginComponent.html":{}}}],["forget",{"_index":214,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["forgetpassword",{"_index":2294,"title":{},"body":{"components/LoginComponent.html":{}}}],["forgetpassword:boolean",{"_index":2307,"title":{},"body":{"components/LoginComponent.html":{}}}],["forgetpasswordcomponent",{"_index":213,"title":{"components/ForgetPasswordComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["forkjoin",{"_index":3011,"title":{},"body":{"injectables/SearchService.html":{}}}],["forkjoin(channelnames$).subscribe",{"_index":3026,"title":{},"body":{"injectables/SearchService.html":{}}}],["form",{"_index":327,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["form's",{"_index":3360,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["form.resetform",{"_index":1524,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["form.submitted",{"_index":3213,"title":{},"body":{"components/SignUpComponent.html":{}}}],["form.valid",{"_index":3212,"title":{},"body":{"components/SignUpComponent.html":{}}}],["format",{"_index":2056,"title":{},"body":{"components/LegalnoticeComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["formats",{"_index":2774,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["formatted",{"_index":2780,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["formbuilder",{"_index":298,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["formgroup",{"_index":395,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["formlose",{"_index":2189,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["formsmodule",{"_index":22,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["fortfall",{"_index":1925,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["forwards",{"_index":2326,"title":{},"body":{"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["found",{"_index":1116,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/SearchService.html":{}}}],["fragen",{"_index":1755,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["freiheiten",{"_index":2018,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["from(getdoc(doc(this.firestore",{"_index":1094,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["from(this.channelservice.getallchannels()).subscribe((channels",{"_index":3035,"title":{},"body":{"injectables/SearchService.html":{}}}],["from(this.channelservice.getchannelbyid(element.channelid)).pipe(map((channel",{"_index":3024,"title":{},"body":{"injectables/SearchService.html":{}}}],["from(this.messageservice.getallmessages(userid)).subscribe((messages",{"_index":3013,"title":{},"body":{"injectables/SearchService.html":{}}}],["from(this.messageservice.getallthreadmessages(userid)).subscribe((messages",{"_index":3028,"title":{},"body":{"injectables/SearchService.html":{}}}],["full",{"_index":689,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["function",{"_index":651,"title":{},"body":{"components/BuilderComponent.html":{},"components/EditmessageComponent.html":{}}}],["further",{"_index":123,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["fällen",{"_index":2249,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["für",{"_index":1368,"title":{},"body":{"components/EditmessageComponent.html":{},"components/LegalnoticeComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{}}}],["g&auml;ngigen",{"_index":2054,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["g&uuml;ltigen",{"_index":1975,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gap",{"_index":598,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["gast",{"_index":1141,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["gast@gast.de",{"_index":1142,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["geben",{"_index":1537,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/SignUpComponent.html":{}}}],["gegen",{"_index":1992,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gegen&uuml;ber",{"_index":1794,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gegenüber",{"_index":2215,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gehostet",{"_index":1776,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gel&ouml;scht",{"_index":1916,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["geltend",{"_index":1914,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["geltenden",{"_index":2062,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["geltendmachung",{"_index":2021,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gelöscht",{"_index":1409,"title":{},"body":{"components/EditmessageComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["gem",{"_index":1601,"title":{},"body":{"components/ImprintComponent.html":{}}}],["gemeinsam",{"_index":1898,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gemeinsame",{"_index":1980,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gemeinsamen",{"_index":1978,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["genannt",{"_index":1908,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["genannten",{"_index":2127,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["general",{"_index":3354,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["generate",{"_index":2787,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["generatechannelobject",{"_index":292,"title":{},"body":{"components/AddchatComponent.html":{}}}],["generatechannelobject(currentuserid",{"_index":354,"title":{},"body":{"components/AddchatComponent.html":{}}}],["generated",{"_index":336,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{}}}],["generatemessageobject(user",{"_index":1220,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["generates",{"_index":333,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{}}}],["generatethreadmessageobject",{"_index":1206,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["generiert",{"_index":1790,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gerichteten",{"_index":2161,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gerichtlicher",{"_index":2048,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["german",{"_index":2825,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["gesch&auml;ftst&auml;tigkeit",{"_index":1955,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["geschah/geschieht",{"_index":2075,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["geschieht",{"_index":1763,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["geschlossen",{"_index":1714,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["geschäftstätigkeit",{"_index":2242,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gesendet",{"_index":1527,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["gesetzlich",{"_index":1965,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gesetzliche",{"_index":2166,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gesetzlichen",{"_index":1866,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gespeichert",{"_index":1780,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{}}}],["gespeicherten",{"_index":1734,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gest&uuml;tztes",{"_index":2005,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gestütztes",{"_index":2251,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["getauth",{"_index":3602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getchannelidstring",{"_index":3070,"title":{},"body":{"injectables/SharedService.html":{}}}],["getchannelname",{"_index":2949,"title":{},"body":{"injectables/SearchService.html":{}}}],["getdata",{"_index":38,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["getdatabase",{"_index":3604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getdoc",{"_index":96,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"interfaces/CustomUser.html":{}}}],["getdoc(doc(this.firestore",{"_index":1170,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["getemojis",{"_index":1452,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["getfirestore",{"_index":3600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getmembers",{"_index":2442,"title":{},"body":{"components/MentionComponent.html":{}}}],["getreactionusers",{"_index":2759,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["getreactionusers(reaction",{"_index":2772,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["gets",{"_index":1514,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["getsearchstring",{"_index":3071,"title":{},"body":{"injectables/SharedService.html":{}}}],["gettargetstring",{"_index":3072,"title":{},"body":{"injectables/SharedService.html":{}}}],["getting",{"_index":3577,"title":{"index.html":{}},"body":{}}],["gettoast",{"_index":3280,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["gettoastmessage",{"_index":1512,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{}}}],["getuser",{"_index":2689,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["getuseravatar(userid",{"_index":1109,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["getuserbyid(userid",{"_index":1088,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["getuserdata",{"_index":3371,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["getuserformessagebyid(userid",{"_index":1168,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["getuserid",{"_index":1000,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["getuseridstring",{"_index":3073,"title":{},"body":{"injectables/SharedService.html":{}}}],["getusername",{"_index":2760,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["getusername(userid",{"_index":1118,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ReactionsComponent.html":{}}}],["getusernamesbyids(userids",{"_index":1123,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["getuserstatus(userid",{"_index":1113,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["gew&auml;hlte",{"_index":2178,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gew&auml;hrleisten",{"_index":1706,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gew&ouml;hnlichen",{"_index":2038,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gewählte",{"_index":2288,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gewährleisten",{"_index":2202,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gewöhnlichen",{"_index":2259,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ggf",{"_index":2065,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gilt",{"_index":2003,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["given",{"_index":113,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["gmbh",{"_index":1846,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["go",{"_index":885,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["google",{"_index":3169,"title":{},"body":{"components/SignInComponent.html":{}}}],["gr&uuml;nde",{"_index":1919,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gr&uuml;nden",{"_index":1998,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["greater",{"_index":690,"title":{},"body":{"components/BuilderComponent.html":{}}}],["grundlage",{"_index":1818,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gründe",{"_index":2234,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gründen",{"_index":2250,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["guest",{"_index":3167,"title":{},"body":{"components/SignInComponent.html":{}}}],["gängigen",{"_index":2263,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["gäste",{"_index":3199,"title":{},"body":{"components/SignInComponent.html":{}}}],["gültigen",{"_index":2245,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["h1",{"_index":2347,"title":{},"body":{"components/LoginComponent.html":{}}}],["haben",{"_index":1725,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/ReactionsComponent.html":{}}}],["handeln",{"_index":1678,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["handelsrechtliche",{"_index":1921,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["handle",{"_index":948,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/MentionComponent.html":{}}}],["handleloginerror(error",{"_index":1193,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["handles",{"_index":344,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["handling",{"_index":124,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["hast",{"_index":2804,"title":{},"body":{"components/ReactionsComponent.html":{},"components/SignUpComponent.html":{}}}],["hat",{"_index":2140,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/ReactionsComponent.html":{}}}],["haupt",{"_index":1402,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["header",{"_index":1561,"title":{},"body":{"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["header'},{'name",{"_index":217,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["header.component",{"_index":768,"title":{},"body":{"components/ChatComponent.html":{},"components/MenuComponent.html":{}}}],["header.component.html",{"_index":1562,"title":{},"body":{"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["header.component.scss",{"_index":1563,"title":{},"body":{"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["header.component.ts",{"_index":2659,"title":{},"body":{"components/MenuHeaderComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"coverage.html":{}}}],["header.component.ts:15",{"_index":2663,"title":{},"body":{"components/MenuHeaderComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["header.component.ts:16",{"_index":2660,"title":{},"body":{"components/MenuHeaderComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["header.component.ts:33",{"_index":3258,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["header.component.ts:35",{"_index":2661,"title":{},"body":{"components/MenuHeaderComponent.html":{}}}],["header.component.ts:45",{"_index":2662,"title":{},"body":{"components/MenuHeaderComponent.html":{}}}],["header.component.ts:46",{"_index":3255,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["header/mainchat",{"_index":767,"title":{},"body":{"components/ChatComponent.html":{},"coverage.html":{}}}],["header/menu",{"_index":2651,"title":{},"body":{"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"coverage.html":{}}}],["header/threadchat",{"_index":771,"title":{},"body":{"components/ChatComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"coverage.html":{}}}],["headercomponent",{"_index":216,"title":{"components/HeaderComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["headline",{"_index":2381,"title":{},"body":{"components/LoginComponent.html":{}}}],["height",{"_index":600,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["herkunft",{"_index":1731,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hervorgehenden",{"_index":2152,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["heute",{"_index":2830,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["hi&#64;dataforest.net",{"_index":1851,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hi@dataforest.net",{"_index":2220,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hidden",{"_index":732,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"miscellaneous/variables.html":{}}}],["hide",{"_index":2323,"title":{},"body":{"components/LoginComponent.html":{}}}],["hierbei",{"_index":1673,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hierzu",{"_index":1753,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hin",{"_index":1876,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hinweis",{"_index":1885,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hinweise",{"_index":1622,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hinzufügen",{"_index":173,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["holding",{"_index":1318,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["holt",{"_index":2704,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["home",{"_index":1498,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignUpComponent.html":{}}}],["hook",{"_index":542,"title":{},"body":{"components/AppComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["hosten",{"_index":1770,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hoster",{"_index":1779,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hosters",{"_index":1778,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hosting",{"_index":1769,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hostlistener",{"_index":674,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["hostlistener('window:resize",{"_index":657,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["hostlisteners",{"_index":629,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["hostname",{"_index":2134,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hover",{"_index":800,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["html",{"_index":185,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["htmlelement",{"_index":2522,"title":{},"body":{"injectables/MentionService.html":{}}}],["htmlinputelement",{"_index":466,"title":{},"body":{"components/AddchatComponent.html":{}}}],["htmlinputelement).value",{"_index":470,"title":{},"body":{"components/AddchatComponent.html":{}}}],["htmlinputelement).value.tolowercase",{"_index":472,"title":{},"body":{"components/AddchatComponent.html":{}}}],["http",{"_index":2278,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["https",{"_index":2279,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["https://www.e",{"_index":2192,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["hue",{"_index":820,"title":{},"body":{"components/ChatComponent.html":{}}}],["ich",{"_index":3221,"title":{},"body":{"components/SignUpComponent.html":{}}}],["id",{"_index":114,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"interfaces/Channel.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{}}}],["id?:any",{"_index":2721,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["identified",{"_index":1572,"title":{},"body":{"components/HeaderComponent.html":{}}}],["identifier",{"_index":1128,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ReactionsComponent.html":{},"coverage.html":{}}}],["identifiziert",{"_index":1638,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["identifying",{"_index":2788,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["idfield",{"_index":561,"title":{},"body":{"components/AppComponent.html":{}}}],["ids",{"_index":46,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{}}}],["ids:string",{"_index":153,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["if(!emailsended",{"_index":1534,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["if(currenturl",{"_index":1595,"title":{},"body":{"components/HeaderComponent.html":{}}}],["if(data.name",{"_index":2478,"title":{},"body":{"components/MentionComponent.html":{}}}],["if(input",{"_index":1042,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["if(mobiledialog",{"_index":1249,"title":{},"body":{"components/DialogComponent.html":{}}}],["if(sharedvariable",{"_index":774,"title":{},"body":{"components/ChatComponent.html":{}}}],["if(userdialog$.exitactiv",{"_index":1254,"title":{},"body":{"components/DialogComponent.html":{}}}],["ihnen",{"_index":1544,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["ihr",{"_index":1547,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["ihre",{"_index":1538,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["ihrem",{"_index":2171,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ihren",{"_index":1628,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ihrer",{"_index":1684,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ihres",{"_index":1708,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["im",{"_index":1805,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["image",{"_index":1132,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["img",{"_index":814,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["img/avatars",{"_index":900,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["img/avatars/picplaceholder.svg",{"_index":1111,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["implements",{"_index":504,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/MainComponent.html":{},"components/MenuChannelsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"pipes/TimestampToDatePipe.html":{}}}],["import",{"_index":138,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["important",{"_index":2331,"title":{},"body":{"components/LoginComponent.html":{}}}],["importprovidersfrom(reactiveformsmodule",{"_index":3593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["imports",{"_index":20,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/UsermenuComponent.html":{}}}],["impressum",{"_index":1250,"title":{},"body":{"components/DialogComponent.html":{},"components/ImprintComponent.html":{},"components/LoginComponent.html":{}}}],["imprint",{"_index":1574,"title":{},"body":{"components/HeaderComponent.html":{},"components/ImprintComponent.html":{}}}],["imprint'},{'name",{"_index":219,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["imprint.component.html",{"_index":1597,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprint.component.scss",{"_index":1598,"title":{},"body":{"components/ImprintComponent.html":{}}}],["imprintcomponent",{"_index":218,"title":{"components/ImprintComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["in'},{'name",{"_index":258,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["in.component.html",{"_index":3156,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.scss",{"_index":3157,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts",{"_index":3155,"title":{},"body":{"components/SignInComponent.html":{},"coverage.html":{}}}],["in.component.ts:16",{"_index":3173,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:17",{"_index":3162,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:35",{"_index":3170,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:46",{"_index":3164,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:60",{"_index":3166,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:73",{"_index":3168,"title":{},"body":{"components/SignInComponent.html":{}}}],["in.component.ts:86",{"_index":3171,"title":{},"body":{"components/SignInComponent.html":{}}}],["in/sign",{"_index":3154,"title":{},"body":{"components/SignInComponent.html":{},"coverage.html":{}}}],["include",{"_index":382,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["includes",{"_index":2778,"title":{},"body":{"components/ReactionsComponent.html":{},"injectables/UserDialogService.html":{}}}],["including",{"_index":1305,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["index",{"_index":27,"title":{"index.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"miscellaneous/variables.html":{}}}],["index=$index",{"_index":2620,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["indicates",{"_index":3097,"title":{},"body":{"injectables/SharedService.html":{}}}],["indicating",{"_index":368,"title":{},"body":{"components/AddchatComponent.html":{},"components/MentionComponent.html":{},"injectables/SaveEditMessageService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["info&#64;luft",{"_index":1611,"title":{},"body":{"components/ImprintComponent.html":{}}}],["info@luft",{"_index":1613,"title":{},"body":{"components/ImprintComponent.html":{}}}],["information",{"_index":352,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/UserDialogService.html":{}}}],["informationen",{"_index":1641,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["informiert",{"_index":1952,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["inhalt",{"_index":2184,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["inhalte",{"_index":1771,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["initial",{"_index":990,"title":{},"body":{"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/MenutogglerComponent.html":{}}}],["initializeapp(data",{"_index":3598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialized",{"_index":954,"title":{},"body":{"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["initializes",{"_index":58,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/SharedService.html":{}}}],["initiates",{"_index":985,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["initimessageonsubmit",{"_index":1288,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["initimessageonsubmit(updateddata",{"_index":1336,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["initthreadmessageonsubmit",{"_index":1289,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["initthreadmessageonsubmit(updateddata",{"_index":1338,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["inject",{"_index":551,"title":{},"body":{"components/AppComponent.html":{},"components/MainComponent.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{},"injectables/UserDialogService.html":{}}}],["inject(authservice",{"_index":2426,"title":{},"body":{"components/MainComponent.html":{},"injectables/SearchService.html":{},"injectables/UserDialogService.html":{},"miscellaneous/variables.html":{}}}],["inject(channelsservice",{"_index":2993,"title":{},"body":{"injectables/SearchService.html":{}}}],["inject(firestore",{"_index":544,"title":{},"body":{"components/AppComponent.html":{}}}],["inject(mat_dialog_data",{"_index":1351,"title":{},"body":{"components/EditmessageComponent.html":{},"components/ProfileviewComponent.html":{}}}],["inject(messagesservice",{"_index":2999,"title":{},"body":{"injectables/SearchService.html":{}}}],["inject(router",{"_index":3610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject(userservice",{"_index":3609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectable",{"_index":1048,"title":{"injectables/EmojiStorageService.html":{},"injectables/MentionService.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{}},"body":{"interfaces/CustomUser.html":{},"injectables/EmojiStorageService.html":{},"injectables/MentionService.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"coverage.html":{}}}],["injectables",{"_index":1448,"title":{},"body":{"injectables/EmojiStorageService.html":{},"injectables/MentionService.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"overview.html":{}}}],["injected",{"_index":1297,"title":{},"body":{"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["injects",{"_index":2646,"title":{},"body":{"components/MenuComponent.html":{}}}],["inklusive",{"_index":2149,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["inline",{"_index":838,"title":{},"body":{"components/ChatComponent.html":{}}}],["innerhalb",{"_index":1905,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["input",{"_index":139,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EmojiPickerComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"injectables/UserDialogService.html":{}}}],["input({required",{"_index":1443,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["inputcont",{"_index":2374,"title":{},"body":{"components/LoginComponent.html":{}}}],["inputelement",{"_index":464,"title":{},"body":{"components/AddchatComponent.html":{}}}],["inputelement.value",{"_index":467,"title":{},"body":{"components/AddchatComponent.html":{}}}],["inputid",{"_index":2512,"title":{},"body":{"injectables/MentionService.html":{}}}],["inputs",{"_index":43,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/DialogComponent.html":{},"components/EmojiPickerComponent.html":{},"components/MentionComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{}}}],["insbesondere",{"_index":2036,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["inserted",{"_index":2520,"title":{},"body":{"injectables/MentionService.html":{}}}],["inserting",{"_index":2538,"title":{},"body":{"injectables/MentionService.html":{}}}],["inserts",{"_index":969,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/MentionService.html":{}}}],["inserttextandfocus",{"_index":2497,"title":{},"body":{"injectables/MentionService.html":{}}}],["inserttextandfocus(text",{"_index":2518,"title":{},"body":{"injectables/MentionService.html":{}}}],["inside",{"_index":2524,"title":{},"body":{"injectables/MentionService.html":{}}}],["insoweit",{"_index":1834,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["instance",{"_index":57,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["instanceof",{"_index":2846,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"injectables/SharedService.html":{},"pipes/TimestampToDatePipe.html":{}}}],["interact",{"_index":309,"title":{},"body":{"components/AddchatComponent.html":{}}}],["interacting",{"_index":2578,"title":{},"body":{"components/MenuChannelsComponent.html":{},"injectables/SharedService.html":{}}}],["interactions",{"_index":1238,"title":{},"body":{"components/DialogComponent.html":{}}}],["interesse",{"_index":1806,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["interessen",{"_index":2017,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["interesses",{"_index":1946,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["interface",{"_index":747,"title":{"interfaces/Channel.html":{},"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{},"interfaces/ToastMessage.html":{}},"body":{"interfaces/Channel.html":{},"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"coverage.html":{}}}],["interfaces",{"_index":748,"title":{},"body":{"interfaces/Channel.html":{},"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{},"interfaces/ToastMessage.html":{},"overview.html":{}}}],["internet",{"_index":1878,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["internetbrowser",{"_index":1692,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["interpreted",{"_index":2827,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["intervalid",{"_index":1490,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["intro",{"_index":2322,"title":{},"body":{"components/LoginComponent.html":{}}}],["introplayed",{"_index":2295,"title":{},"body":{"components/LoginComponent.html":{},"injectables/UserDialogService.html":{}}}],["introplayedvar",{"_index":2309,"title":{},"body":{"components/LoginComponent.html":{}}}],["invalid",{"_index":340,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["invert(30",{"_index":845,"title":{},"body":{"components/ChatComponent.html":{}}}],["invert(31",{"_index":817,"title":{},"body":{"components/ChatComponent.html":{}}}],["ip",{"_index":1782,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["isauthenticated",{"_index":562,"title":{},"body":{"components/AppComponent.html":{}}}],["isclickinsidementionpicker",{"_index":2498,"title":{},"body":{"injectables/MentionService.html":{}}}],["isclickinsidementionpicker(target",{"_index":2521,"title":{},"body":{"injectables/MentionService.html":{}}}],["isclickontogglebutton",{"_index":2499,"title":{},"body":{"injectables/MentionService.html":{}}}],["isclickontogglebutton(target",{"_index":2525,"title":{},"body":{"injectables/MentionService.html":{}}}],["islandscape",{"_index":571,"title":{},"body":{"components/AppComponent.html":{}}}],["islegalpage",{"_index":1566,"title":{},"body":{"components/HeaderComponent.html":{}}}],["ismemberselected",{"_index":293,"title":{},"body":{"components/AddchatComponent.html":{}}}],["ismemberselected(member",{"_index":364,"title":{},"body":{"components/AddchatComponent.html":{}}}],["isprivate",{"_index":412,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/Channel.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{}}}],["isreacted",{"_index":2761,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["isreacted(reaction",{"_index":2782,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["ist",{"_index":435,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["isthread",{"_index":1280,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SharedService.html":{}}}],["isthreadmessage",{"_index":1216,"title":{},"body":{"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"interfaces/ThreadMessage.html":{}}}],["items",{"_index":512,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["jederzeit",{"_index":1727,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["jedoch",{"_index":2077,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["jeweilige",{"_index":2007,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["jeweils",{"_index":1948,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["json.parse",{"_index":1474,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["json.parse(introplayedvar",{"_index":2312,"title":{},"body":{"components/LoginComponent.html":{}}}],["json.parse(localstorage.getitem(this.storagekey",{"_index":1482,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["json.parse(localuserdata",{"_index":3614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.stringify(emojis",{"_index":1481,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["json.stringify(this.introplayed",{"_index":2314,"title":{},"body":{"components/LoginComponent.html":{}}}],["json.stringify(userdata",{"_index":1159,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["jumps",{"_index":3100,"title":{},"body":{"injectables/SharedService.html":{}}}],["jumptoatabove",{"_index":3074,"title":{},"body":{"injectables/SharedService.html":{}}}],["juristische",{"_index":1895,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["juristischen",{"_index":2092,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["justify",{"_index":594,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["k&ouml;nnen",{"_index":1639,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kanal",{"_index":2736,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["kann",{"_index":1382,"title":{},"body":{"components/EditmessageComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["keeps",{"_index":1467,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["keine",{"_index":1906,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kennwörter",{"_index":2888,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["key",{"_index":1313,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["keyboardevent",{"_index":1311,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["keyframes",{"_index":3290,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["kommentar",{"_index":2172,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kommentar&shy;funktion",{"_index":2168,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kommentare",{"_index":2180,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kommentarfunktion",{"_index":2169,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kommentars",{"_index":2175,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kommentar­funktion",{"_index":2287,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kommentierte",{"_index":2183,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kommunikation",{"_index":486,"title":{},"body":{"components/AddchatComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["kommunikationsdaten",{"_index":1786,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["konnte",{"_index":427,"title":{},"body":{"components/AddchatComponent.html":{}}}],["kontakt",{"_index":1610,"title":{},"body":{"components/ImprintComponent.html":{}}}],["kontaktanfragen",{"_index":1784,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kontaktdaten",{"_index":1660,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kontaktformular",{"_index":1679,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kontaktieren",{"_index":2148,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["konto",{"_index":2320,"title":{},"body":{"components/LoginComponent.html":{},"components/SignUpComponent.html":{}}}],["kriftel",{"_index":1850,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["kunden",{"_index":1798,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["können",{"_index":1549,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["l&ouml;schersuchen",{"_index":1913,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["l&ouml;schung",{"_index":1738,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["l&uuml;ckenloser",{"_index":1882,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["landscape",{"_index":534,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["landscape)\").matches",{"_index":573,"title":{},"body":{"components/AppComponent.html":{}}}],["landscape.scss",{"_index":2306,"title":{},"body":{"components/LoginComponent.html":{}}}],["language",{"_index":2826,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["lassen",{"_index":2058,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["later",{"_index":1466,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["layout",{"_index":1241,"title":{},"body":{"components/DialogComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["leaks",{"_index":2584,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["leer",{"_index":1265,"title":{},"body":{"components/DialogComponent.html":{}}}],["left",{"_index":737,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["legal",{"_index":1571,"title":{},"body":{"components/HeaderComponent.html":{}}}],["legalnotice",{"_index":1573,"title":{},"body":{"components/HeaderComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["legalnotice'},{'name",{"_index":221,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["legalnotice.component.html",{"_index":1615,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["legalnotice.component.scss",{"_index":1616,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["legalnoticecomponent",{"_index":220,"title":{"components/LegalnoticeComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["legalpage",{"_index":1565,"title":{},"body":{"components/HeaderComponent.html":{}}}],["legend",{"_index":184,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["leider",{"_index":1541,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["leistungspflichten",{"_index":1839,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["length",{"_index":986,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["less",{"_index":536,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["letztgenannten",{"_index":1923,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["leute",{"_index":175,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{}}}],["lifecycle",{"_index":541,"title":{},"body":{"components/AppComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["line",{"_index":835,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["link",{"_index":2399,"title":{},"body":{"components/LoginComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["list",{"_index":371,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"injectables/EmojiStorageService.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{}}}],["liste",{"_index":921,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["listen",{"_index":2508,"title":{},"body":{"injectables/MentionService.html":{}}}],["listener",{"_index":2588,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["listenforoutsideclicks",{"_index":2500,"title":{},"body":{"injectables/MentionService.html":{}}}],["listening",{"_index":2506,"title":{},"body":{"injectables/MentionService.html":{}}}],["listens",{"_index":1074,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/MentionService.html":{}}}],["listentouserchanges",{"_index":1077,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["lit",{"_index":1802,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["literal",{"_index":126,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{}}}],["load",{"_index":2448,"title":{},"body":{"components/MentionComponent.html":{},"injectables/SearchService.html":{}}}],["loadchannels",{"_index":2950,"title":{},"body":{"injectables/SearchService.html":{}}}],["loadchannelsrealtime",{"_index":2571,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["loaded",{"_index":2964,"title":{},"body":{"injectables/SearchService.html":{}}}],["loading",{"_index":30,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/CreatemessageComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["loadingstatus",{"_index":2420,"title":{},"body":{"components/MainComponent.html":{}}}],["loadmessages",{"_index":2951,"title":{},"body":{"injectables/SearchService.html":{}}}],["loadmessages(userid",{"_index":2966,"title":{},"body":{"injectables/SearchService.html":{}}}],["loads",{"_index":2447,"title":{},"body":{"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SearchService.html":{}}}],["loadthreadmessages",{"_index":2952,"title":{},"body":{"injectables/SearchService.html":{}}}],["loadthreadmessages(userid",{"_index":2968,"title":{},"body":{"injectables/SearchService.html":{}}}],["loadusers",{"_index":2953,"title":{},"body":{"injectables/SearchService.html":{}}}],["loadusers(userid",{"_index":2970,"title":{},"body":{"injectables/SearchService.html":{}}}],["local",{"_index":1458,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["locale_id",{"_index":3606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstorage.getitem(this.storagekey",{"_index":1475,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["localstorage.setitem(this.storagekey",{"_index":1480,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["localuserdata",{"_index":3611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localuserid",{"_index":3613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":2123,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["logged",{"_index":363,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/ProfileviewComponent.html":{}}}],["logic",{"_index":2449,"title":{},"body":{"components/MentionComponent.html":{}}}],["login",{"_index":1191,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{}}}],["login'},{'name",{"_index":223,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["login(ngform",{"_index":3163,"title":{},"body":{"components/SignInComponent.html":{}}}],["login.component.html",{"_index":2293,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss",{"_index":2305,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.scss,./landscape.scss",{"_index":2292,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginasguest",{"_index":3159,"title":{},"body":{"components/SignInComponent.html":{}}}],["logincomponent",{"_index":222,"title":{"components/LoginComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["logindata",{"_index":3158,"title":{},"body":{"components/SignInComponent.html":{}}}],["loginerror",{"_index":1071,"title":{},"body":{"interfaces/CustomUser.html":{},"components/SignInComponent.html":{}}}],["loginpage",{"_index":2296,"title":{},"body":{"components/LoginComponent.html":{}}}],["loginwithgoogle",{"_index":3160,"title":{},"body":{"components/SignInComponent.html":{}}}],["logo",{"_index":2360,"title":{},"body":{"components/LoginComponent.html":{},"components/LogoComponent.html":{}}}],["logo'},{'name",{"_index":225,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["logo.component.html",{"_index":2415,"title":{},"body":{"components/LogoComponent.html":{}}}],["logo.component.scss",{"_index":2416,"title":{},"body":{"components/LogoComponent.html":{}}}],["logo/logo.component",{"_index":1585,"title":{},"body":{"components/HeaderComponent.html":{}}}],["logocomponent",{"_index":224,"title":{"components/LogoComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["logout",{"_index":1252,"title":{},"body":{"components/DialogComponent.html":{},"injectables/UserDialogService.html":{}}}],["logs",{"_index":337,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"injectables/SearchService.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{}}}],["long",{"_index":2865,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["long',day",{"_index":2863,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["long',year",{"_index":2853,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["loops",{"_index":93,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/MentionComponent.html":{}}}],["luft",{"_index":1605,"title":{},"body":{"components/ImprintComponent.html":{}}}],["löschen",{"_index":1397,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["löschersuchen",{"_index":2232,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["löschung",{"_index":2207,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["lückenloser",{"_index":2227,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["m",{"_index":726,"title":{},"body":{"components/BuilderComponent.html":{}}}],["m&ouml;glich",{"_index":1884,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["m&uuml;ssen",{"_index":2144,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ma&szlig;nahmen",{"_index":1940,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["machbar",{"_index":2061,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["machen",{"_index":1915,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mail",{"_index":180,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["mailadressresults",{"_index":928,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["mails",{"_index":1552,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["main",{"_index":1325,"title":{},"body":{"components/EditmessageComponent.html":{},"components/MainComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["main'},{'name",{"_index":229,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["main.component.html",{"_index":2418,"title":{},"body":{"components/MainComponent.html":{}}}],["main.component.scss",{"_index":2419,"title":{},"body":{"components/MainComponent.html":{}}}],["main/chat/chat.component",{"_index":681,"title":{},"body":{"components/BuilderComponent.html":{}}}],["main/menu/menu.component",{"_index":675,"title":{},"body":{"components/BuilderComponent.html":{}}}],["main/shared/menutoggler/menutoggler.component",{"_index":676,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{}}}],["mainchat",{"_index":227,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["mainchat__header",{"_index":776,"title":{},"body":{"components/ChatComponent.html":{}}}],["mainchat__messagebox",{"_index":777,"title":{},"body":{"components/ChatComponent.html":{}}}],["mainchatheadercomponent",{"_index":226,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["maincomponent",{"_index":228,"title":{"components/MainComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["maincont",{"_index":2378,"title":{},"body":{"components/LoginComponent.html":{}}}],["makestatic",{"_index":2340,"title":{},"body":{"components/LoginComponent.html":{}}}],["manage",{"_index":634,"title":{},"body":{"components/BuilderComponent.html":{},"components/CreatemessageComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["managing",{"_index":1237,"title":{},"body":{"components/DialogComponent.html":{},"components/EditmessageComponent.html":{}}}],["map",{"_index":1055,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{}}}],["map(usernames",{"_index":2798,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["maps",{"_index":2962,"title":{},"body":{"injectables/SearchService.html":{}}}],["margin",{"_index":798,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["marker($color",{"_index":2364,"title":{},"body":{"components/LoginComponent.html":{}}}],["marker(colors.$light",{"_index":2393,"title":{},"body":{"components/LoginComponent.html":{}}}],["marketing",{"_index":492,"title":{},"body":{"components/AddchatComponent.html":{}}}],["mart",{"_index":1442,"title":{},"body":{"components/EmojiPickerComponent.html":{},"dependencies.html":{}}}],["maschinenlesbaren",{"_index":2055,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mat_dialog_data",{"_index":1358,"title":{},"body":{"components/EditmessageComponent.html":{},"components/ProfileviewComponent.html":{}}}],["match",{"_index":2884,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["matches",{"_index":2455,"title":{},"body":{"components/MentionComponent.html":{}}}],["matching",{"_index":272,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["matdialog",{"_index":2575,"title":{},"body":{"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{}}}],["matdialogref",{"_index":301,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/ProfileviewComponent.html":{}}}],["max",{"_index":715,"title":{},"body":{"components/BuilderComponent.html":{},"components/LoginComponent.html":{}}}],["maximal",{"_index":1271,"title":{},"body":{"components/DialogComponent.html":{}}}],["maxwidth",{"_index":2613,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["maxwidth800px",{"_index":574,"title":{},"body":{"components/AppComponent.html":{}}}],["maßnahmen",{"_index":2239,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["meaning",{"_index":3335,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["media",{"_index":744,"title":{},"body":{"components/BuilderComponent.html":{},"components/LoginComponent.html":{}}}],["mehr",{"_index":2011,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["member",{"_index":63,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{}}}],["member.mention",{"_index":2485,"title":{},"body":{"components/MentionComponent.html":{}}}],["member.name",{"_index":172,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/MentionComponent.html":{}}}],["member.name.tolowercase().includes(searchvalue",{"_index":474,"title":{},"body":{"components/AddchatComponent.html":{}}}],["member.userid",{"_index":443,"title":{},"body":{"components/AddchatComponent.html":{}}}],["member?.email",{"_index":2754,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["member?.name",{"_index":2752,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["member?.status",{"_index":2753,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["member?:any",{"_index":2720,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["memberid",{"_index":166,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["memberids",{"_index":31,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["members",{"_index":32,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"interfaces/Channel.html":{},"interfaces/CustomUser.html":{},"components/MentionComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{}}}],["members.length",{"_index":2491,"title":{},"body":{"components/MentionComponent.html":{}}}],["membersarray",{"_index":286,"title":{},"body":{"components/AddchatComponent.html":{}}}],["membership",{"_index":2975,"title":{},"body":{"injectables/SearchService.html":{}}}],["memory",{"_index":2583,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["men",{"_index":2678,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["mention",{"_index":950,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{}}}],["mention'},{'name",{"_index":231,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["mention.component.html",{"_index":2436,"title":{},"body":{"components/MentionComponent.html":{}}}],["mention.component.scss",{"_index":2437,"title":{},"body":{"components/MentionComponent.html":{}}}],["mentioncomponent",{"_index":230,"title":{"components/MentionComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["mentioned",{"_index":2453,"title":{},"body":{"components/MentionComponent.html":{}}}],["mentions",{"_index":2534,"title":{},"body":{"injectables/MentionService.html":{}}}],["mentionservice",{"_index":944,"title":{"injectables/MentionService.html":{}},"body":{"components/CreatemessageComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"coverage.html":{}}}],["mentionsomeone",{"_index":2462,"title":{},"body":{"components/MentionComponent.html":{},"injectables/MentionService.html":{}}}],["mentionsomeone(user",{"_index":2531,"title":{},"body":{"injectables/MentionService.html":{}}}],["mentionsomeone(user:any",{"_index":2557,"title":{},"body":{"injectables/MentionService.html":{}}}],["mentionsuser",{"_index":2454,"title":{},"body":{"components/MentionComponent.html":{},"injectables/MentionService.html":{}}}],["mentionuser",{"_index":2501,"title":{},"body":{"injectables/MentionService.html":{}}}],["mentionuser(bulider",{"_index":2536,"title":{},"body":{"injectables/MentionService.html":{}}}],["menu",{"_index":233,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["menu'},{'name",{"_index":236,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["menu.component.html",{"_index":2642,"title":{},"body":{"components/MenuComponent.html":{}}}],["menu.component.scss",{"_index":2643,"title":{},"body":{"components/MenuComponent.html":{}}}],["menuchannelscomponent",{"_index":232,"title":{"components/MenuChannelsComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["menucomponent",{"_index":235,"title":{"components/MenuComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["menudialogcomponent",{"_index":237,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["menuheadercomponent",{"_index":238,"title":{"components/MenuHeaderComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["menuopen",{"_index":2668,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["menuopened",{"_index":617,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{}}}],["menuprivatemessagescomponent",{"_index":239,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["menustate",{"_index":618,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/StateService.html":{}}}],["menustatesubject",{"_index":3226,"title":{},"body":{"injectables/StateService.html":{}}}],["menutoggler",{"_index":2665,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["menutoggler'},{'name",{"_index":242,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["menutoggler.component.html",{"_index":2666,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["menutoggler.component.scss",{"_index":2667,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["menutogglercomponent",{"_index":241,"title":{"components/MenutogglerComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["message",{"_index":349,"title":{"interfaces/Message.html":{}},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MenuComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"interfaces/ThreadMessage.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"coverage.html":{}}}],["message'},{'name",{"_index":247,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["message,...this.messageform.value",{"_index":2931,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["message.component.ts",{"_index":3508,"title":{},"body":{"coverage.html":{}}}],["message.message",{"_index":2927,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["message.message.tolowercase().includes(searchtext.tolowercase",{"_index":3042,"title":{},"body":{"injectables/SearchService.html":{}}}],["message.reactions",{"_index":2928,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["message.service.ts",{"_index":2911,"title":{},"body":{"injectables/SaveEditMessageService.html":{},"coverage.html":{}}}],["message.service.ts:11",{"_index":2913,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["message.service.ts:39",{"_index":2922,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["message.service.ts:59",{"_index":2919,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["message.service.ts:81",{"_index":2916,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["message.service.ts:94",{"_index":2923,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["messagebox",{"_index":1024,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/EmojiPickerComponent.html":{}}}],["messagebox'},{'name",{"_index":244,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["messageboxcomponent",{"_index":243,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["messagecomponent",{"_index":245,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["messagecontent",{"_index":1208,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["messagecontent.trim",{"_index":1213,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["messagedelete",{"_index":1281,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["messageform",{"_index":1282,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["messageid",{"_index":2683,"title":{},"body":{"interfaces/Message.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"injectables/SharedService.html":{},"interfaces/ThreadMessage.html":{}}}],["messageref",{"_index":3150,"title":{},"body":{"injectables/SharedService.html":{}}}],["messageresults",{"_index":2941,"title":{},"body":{"injectables/SearchService.html":{}}}],["messageresultssubject",{"_index":2942,"title":{},"body":{"injectables/SearchService.html":{}}}],["messages",{"_index":1303,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/UserDialogService.html":{}}}],["messages'},{'name",{"_index":240,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["messages.component",{"_index":2654,"title":{},"body":{"components/MenuComponent.html":{}}}],["messages.component.ts",{"_index":3487,"title":{},"body":{"coverage.html":{}}}],["messages.service",{"_index":2924,"title":{},"body":{"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{}}}],["messages/${messageid}/threadmessages",{"_index":3141,"title":{},"body":{"injectables/SharedService.html":{}}}],["messages/${parentmessageid}/threadmessages",{"_index":3145,"title":{},"body":{"injectables/SharedService.html":{}}}],["messages/menu",{"_index":2653,"title":{},"body":{"components/MenuComponent.html":{},"coverage.html":{}}}],["messageservice",{"_index":2943,"title":{},"body":{"injectables/SearchService.html":{}}}],["messagesservice",{"_index":1293,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"coverage.html":{}}}],["met",{"_index":1347,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["meta",{"_index":1785,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["method",{"_index":97,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/HeaderComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{},"injectables/StateService.html":{},"injectables/UserDialogService.html":{}}}],["methods",{"_index":35,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["milliseconds",{"_index":2842,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["min",{"_index":2407,"title":{},"body":{"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["mindestens",{"_index":3219,"title":{},"body":{"components/SignUpComponent.html":{}}}],["miscellaneous",{"_index":3584,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["missing",{"_index":1299,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["mit",{"_index":1627,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["mitgelesen",{"_index":2120,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mitglied",{"_index":2493,"title":{},"body":{"components/MentionComponent.html":{}}}],["mitglieder",{"_index":171,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{}}}],["mitgliedstaat",{"_index":2037,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mitgliedstaats",{"_index":2097,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mitteilen",{"_index":1672,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mitteilung",{"_index":2190,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mittel",{"_index":1900,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mixins",{"_index":709,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["mixins.border",{"_index":2363,"title":{},"body":{"components/LoginComponent.html":{}}}],["mixins.flexbox",{"_index":2361,"title":{},"body":{"components/LoginComponent.html":{}}}],["mixins.flexbox($direction",{"_index":2359,"title":{},"body":{"components/LoginComponent.html":{}}}],["mixins.flexbox($justify",{"_index":2358,"title":{},"body":{"components/LoginComponent.html":{}}}],["mixins.flexbox(column",{"_index":719,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{}}}],["mixins.flexbox(row",{"_index":710,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["mixins.scss",{"_index":708,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["mmmm",{"_index":2844,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["mobile",{"_index":619,"title":{},"body":{"components/BuilderComponent.html":{},"components/DialogComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["mobiledialog",{"_index":1228,"title":{},"body":{"components/DialogComponent.html":{},"components/UsermenuComponent.html":{}}}],["mode",{"_index":535,"title":{},"body":{"components/AppComponent.html":{},"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["models/channel",{"_index":145,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["models/message",{"_index":1065,"title":{},"body":{"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{}}}],["models/user",{"_index":149,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"injectables/SearchService.html":{},"injectables/UserDialogService.html":{}}}],["modules",{"_index":3579,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["month",{"_index":2834,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["more",{"_index":1471,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["moveback",{"_index":2342,"title":{},"body":{"components/LoginComponent.html":{}}}],["moveleft",{"_index":2338,"title":{},"body":{"components/LoginComponent.html":{}}}],["movelittleleft",{"_index":2346,"title":{},"body":{"components/LoginComponent.html":{}}}],["moveright",{"_index":2349,"title":{},"body":{"components/LoginComponent.html":{}}}],["movetotop",{"_index":2404,"title":{},"body":{"components/LoginComponent.html":{}}}],["movetotopleft",{"_index":2336,"title":{},"body":{"components/LoginComponent.html":{}}}],["movetotopleft40px",{"_index":2402,"title":{},"body":{"components/LoginComponent.html":{}}}],["muss",{"_index":2079,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mutma&szlig;lichen",{"_index":2042,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["mutmaßlichen",{"_index":2260,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["möglich",{"_index":2228,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["müssen",{"_index":2283,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["nach",{"_index":1683,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["nachnamen",{"_index":1269,"title":{},"body":{"components/DialogComponent.html":{}}}],["nachricht",{"_index":183,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["nachricht',docid",{"_index":1400,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["nachrichtenlöschung",{"_index":3152,"title":{},"body":{"injectables/SharedService.html":{}}}],["nachweisen",{"_index":2016,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["name",{"_index":67,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["namen",{"_index":1788,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/SignUpComponent.html":{}}}],["names",{"_index":381,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{}}}],["narrow",{"_index":661,"title":{},"body":{"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["nat&uuml;rliche",{"_index":1894,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["nat&uuml;rlichen",{"_index":2091,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["natürliche",{"_index":2230,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["natürlichen",{"_index":2272,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["navigate",{"_index":525,"title":{},"body":{"components/AppComponent.html":{}}}],["navigates",{"_index":1497,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["ndash",{"_index":2089,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ndern",{"_index":1548,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["neben",{"_index":2170,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["necessary",{"_index":2589,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["nehmen",{"_index":1858,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["neu",{"_index":2319,"title":{},"body":{"components/LoginComponent.html":{}}}],["neue",{"_index":1041,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["neues",{"_index":3216,"title":{},"body":{"components/SignUpComponent.html":{}}}],["new",{"_index":56,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"coverage.html":{}}}],["newchannel",{"_index":351,"title":{},"body":{"components/AddchatComponent.html":{},"components/ProfileviewComponent.html":{}}}],["newpassword",{"_index":1147,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["newvalue",{"_index":3111,"title":{},"body":{"injectables/SharedService.html":{},"injectables/UserDialogService.html":{}}}],["next",{"_index":416,"title":{},"body":{"components/AddchatComponent.html":{}}}],["ngclass",{"_index":2291,"title":{},"body":{"components/LoginComponent.html":{},"components/MenutogglerComponent.html":{}}}],["ngform",{"_index":1501,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["ngform.submitted",{"_index":2899,"title":{},"body":{"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["ngform.valid",{"_index":2898,"title":{},"body":{"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["ngondestroy",{"_index":2572,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["ngoninit",{"_index":39,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/MainComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["nicht",{"_index":428,"title":{},"body":{"components/AddchatComponent.html":{},"components/DialogComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["noch",{"_index":2084,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/SignInComponent.html":{}}}],["none",{"_index":746,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["normal",{"_index":3332,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["nothing",{"_index":1468,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["notifies",{"_index":2649,"title":{},"body":{"components/MenuComponent.html":{}}}],["notify",{"_index":107,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["nowrap",{"_index":712,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["null",{"_index":1167,"title":{},"body":{"interfaces/CustomUser.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"components/ToastMessageComponent.html":{},"classes/UserModel.html":{}}}],["number",{"_index":892,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["numeric",{"_index":2854,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["numeric',month",{"_index":2864,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["nur",{"_index":1833,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["nutzen",{"_index":1700,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/SignInComponent.html":{}}}],["nutzername",{"_index":2179,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["nutzers",{"_index":1826,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["nutzerverhaltens",{"_index":1709,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["nutzt",{"_index":2101,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["o",{"_index":1901,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["object",{"_index":310,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["objects",{"_index":1122,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["observable",{"_index":61,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/ChatComponent.html":{},"interfaces/CustomUser.html":{},"components/HeaderComponent.html":{},"components/MentionComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{}}}],["observables",{"_index":645,"title":{},"body":{"components/BuilderComponent.html":{},"components/CreatemessageComponent.html":{},"injectables/StateService.html":{}}}],["occurred",{"_index":1199,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["oder",{"_index":1410,"title":{},"body":{"components/EditmessageComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["offline",{"_index":1115,"title":{},"body":{"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/ProfileviewComponent.html":{}}}],["ohne",{"_index":2155,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["oldest",{"_index":1469,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["omit",{"_index":1221,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["onanimationdone",{"_index":625,"title":{},"body":{"components/BuilderComponent.html":{}}}],["onanimationdone(event",{"_index":649,"title":{},"body":{"components/BuilderComponent.html":{}}}],["oncancel",{"_index":1290,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["onclose",{"_index":40,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["ondestroy",{"_index":2565,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["ondialogchange",{"_index":3312,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["ondialogchange(newvalue",{"_index":3348,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["one",{"_index":1470,"title":{},"body":{"injectables/EmojiStorageService.html":{},"injectables/StateService.html":{}}}],["oninit",{"_index":505,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/MainComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["oninputchange",{"_index":937,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["online",{"_index":1112,"title":{},"body":{"interfaces/CustomUser.html":{},"components/LegalnoticeComponent.html":{}}}],["onopenmobileprofile",{"_index":1227,"title":{},"body":{"components/DialogComponent.html":{}}}],["onresize",{"_index":626,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["onsearchinput",{"_index":294,"title":{},"body":{"components/AddchatComponent.html":{}}}],["onsearchinput(event",{"_index":373,"title":{},"body":{"components/AddchatComponent.html":{}}}],["onselectemoji",{"_index":1433,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["onselectemoji(event",{"_index":1439,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["onsignup",{"_index":873,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["onsnapshot",{"_index":1051,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["onsnapshot(userscollection",{"_index":1078,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["onsubmit",{"_index":1291,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["oobcode",{"_index":1176,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ResetPasswordComponent.html":{}}}],["opacity",{"_index":2328,"title":{},"body":{"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["open",{"_index":115,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{},"injectables/UserDialogService.html":{}}}],["opendesktopusermenu",{"_index":3440,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["opendesktopusermenu(event",{"_index":3443,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["opendialog",{"_index":2573,"title":{},"body":{"components/MenuChannelsComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["opendialog(event",{"_index":3350,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["opened",{"_index":662,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["opening",{"_index":2577,"title":{},"body":{"components/MenuChannelsComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["openmobileusermenu",{"_index":3441,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["openmobileusermenu(event",{"_index":3446,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["openprofile",{"_index":41,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/DialogComponent.html":{},"injectables/UserDialogService.html":{}}}],["openprofile(id",{"_index":110,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["openprofileedit",{"_index":3313,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["opens",{"_index":112,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/DialogComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["operation",{"_index":1162,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/UserDialogService.html":{}}}],["operations",{"_index":949,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["optimierung",{"_index":2143,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["optional",{"_index":69,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["orientation",{"_index":528,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["original",{"_index":2920,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["orts",{"_index":2041,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["otheruserid",{"_index":2700,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["otherusers",{"_index":2799,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["otherusers.length",{"_index":2803,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["otherusers[0",{"_index":2806,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["otherwise",{"_index":378,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/EmojiStorageService.html":{},"components/HeaderComponent.html":{},"injectables/MentionService.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"pipes/TimestampToDatePipe.html":{},"injectables/UserDialogService.html":{}}}],["ouml;ffentlichen",{"_index":2094,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["out",{"_index":637,"title":{},"body":{"components/BuilderComponent.html":{},"interfaces/CustomUser.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{},"miscellaneous/variables.html":{}}}],["outline",{"_index":2369,"title":{},"body":{"components/LoginComponent.html":{}}}],["output",{"_index":140,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/DialogComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ReactionsComponent.html":{},"injectables/UserDialogService.html":{}}}],["outputs",{"_index":47,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/DialogComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ReactionsComponent.html":{}}}],["outside",{"_index":2507,"title":{},"body":{"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{}}}],["overflow",{"_index":731,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["overview",{"_index":3580,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":2630,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["package",{"_index":3557,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":778,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["paddingbottom",{"_index":2409,"title":{},"body":{"components/LoginComponent.html":{}}}],["page",{"_index":1499,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["panelclass",{"_index":2615,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["param",{"_index":157,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["parameters",{"_index":65,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["params",{"_index":3627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["params['oobcode",{"_index":2894,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["parent",{"_index":108,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["parentmessagecomponent",{"_index":246,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["parentmessageid",{"_index":1298,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{}}}],["parentmessageid,docid!,this.auth.userid()!,updateddata",{"_index":2932,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["partial",{"_index":402,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{}}}],["passed",{"_index":2695,"title":{},"body":{"components/ProfileviewComponent.html":{},"components/UsermenuComponent.html":{}}}],["passiert",{"_index":1631,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["password",{"_index":880,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["password'},{'name",{"_index":215,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["password.component.html",{"_index":1486,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["password.component.scss",{"_index":1487,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["password.component.ts",{"_index":1485,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"coverage.html":{}}}],["password.component.ts:16",{"_index":2891,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["password.component.ts:17",{"_index":1511,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["password.component.ts:18",{"_index":1510,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["password.component.ts:19",{"_index":1509,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["password.component.ts:20",{"_index":1495,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["password.component.ts:21",{"_index":2876,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["password.component.ts:34",{"_index":2885,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["password.component.ts:36",{"_index":1496,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["password.component.ts:44",{"_index":1503,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["password.component.ts:46",{"_index":2880,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["password.component.ts:54",{"_index":2882,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["password.component.ts:58",{"_index":1502,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["password.component.ts:68",{"_index":2883,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["password.component.ts:79",{"_index":1513,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["password/forget",{"_index":1484,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"coverage.html":{}}}],["password/reset",{"_index":2867,"title":{},"body":{"components/ResetPasswordComponent.html":{},"coverage.html":{}}}],["password2",{"_index":2887,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["passwordmatch",{"_index":2869,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["passwords",{"_index":2870,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["passwort",{"_index":1535,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["path",{"_index":869,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["path:string",{"_index":905,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["per",{"_index":1879,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["perform",{"_index":2984,"title":{},"body":{"injectables/SearchService.html":{}}}],["performing",{"_index":3089,"title":{},"body":{"injectables/SharedService.html":{}}}],["performs",{"_index":1233,"title":{},"body":{"components/DialogComponent.html":{},"components/EditmessageComponent.html":{}}}],["pers&ouml;nlich",{"_index":1637,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["pers&ouml;nlichen",{"_index":1860,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["person",{"_index":1896,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["person(en",{"_index":2808,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["personalized",{"_index":2779,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["personenbezogene",{"_index":1634,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["personenbezogenen",{"_index":1629,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["personenbezogener",{"_index":1934,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["persönlich",{"_index":2197,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["persönlichen",{"_index":2223,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["pflicht&shy;informationen",{"_index":1855,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["pflicht­informationen",{"_index":2222,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["photo",{"_index":1105,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["photourl",{"_index":408,"title":{},"body":{"components/AddchatComponent.html":{},"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{},"components/SignUpComponent.html":{},"classes/UserModel.html":{}}}],["picker",{"_index":1429,"title":{},"body":{"components/EmojiPickerComponent.html":{},"injectables/MentionService.html":{}}}],["picker'},{'name",{"_index":212,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["picker.component.html",{"_index":1431,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["picker.component.scss",{"_index":1432,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["picker.component.ts",{"_index":1428,"title":{},"body":{"components/EmojiPickerComponent.html":{},"coverage.html":{}}}],["picker.component.ts:12",{"_index":1438,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["picker.component.ts:13",{"_index":1437,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["picker.component.ts:20",{"_index":1440,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["picker.service.ts",{"_index":3536,"title":{},"body":{"coverage.html":{}}}],["picker/emoji",{"_index":1427,"title":{},"body":{"components/EmojiPickerComponent.html":{},"coverage.html":{}}}],["picker__wrapper",{"_index":2555,"title":{},"body":{"injectables/MentionService.html":{}}}],["pickercomponent",{"_index":1430,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["pickers",{"_index":2529,"title":{},"body":{"injectables/MentionService.html":{}}}],["picture",{"_index":894,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["pipe",{"_index":2816,"title":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"coverage.html":{}}}],["pipe(map((docsnap",{"_index":1096,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["pipes",{"_index":2818,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"overview.html":{}}}],["pipetransform",{"_index":2839,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["pirmasens",{"_index":1609,"title":{},"body":{"components/ImprintComponent.html":{}}}],["placeholder",{"_index":2376,"title":{},"body":{"components/LoginComponent.html":{}}}],["pointer",{"_index":741,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["populated",{"_index":1136,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["populates",{"_index":357,"title":{},"body":{"components/AddchatComponent.html":{}}}],["populating",{"_index":372,"title":{},"body":{"components/AddchatComponent.html":{}}}],["position",{"_index":713,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["posten",{"_index":2177,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["potenziellen",{"_index":1796,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["pr&uuml;fung",{"_index":2073,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["preceded",{"_index":2539,"title":{},"body":{"injectables/MentionService.html":{}}}],["pressed",{"_index":2650,"title":{},"body":{"components/MenuComponent.html":{}}}],["presses",{"_index":1315,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["prevent",{"_index":2582,"title":{},"body":{"components/MenuChannelsComponent.html":{},"injectables/UserDialogService.html":{}}}],["preventing",{"_index":3321,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["prevents",{"_index":118,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"injectables/UserDialogService.html":{}}}],["previous",{"_index":886,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["previously",{"_index":691,"title":{},"body":{"components/BuilderComponent.html":{}}}],["privacy",{"_index":881,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/SignUpComponent.html":{}}}],["private",{"_index":158,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["privatechannelresults",{"_index":929,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{}}}],["privatechannelresultssubject",{"_index":2944,"title":{},"body":{"injectables/SearchService.html":{}}}],["privatenoteref",{"_index":1138,"title":{},"body":{"interfaces/CustomUser.html":{},"classes/UserModel.html":{}}}],["privater",{"_index":2749,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["process",{"_index":889,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/SignUpComponent.html":{}}}],["processes",{"_index":2960,"title":{},"body":{"injectables/SearchService.html":{}}}],["professionellen",{"_index":1813,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["profil",{"_index":176,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/DialogComponent.html":{},"components/ProfileviewComponent.html":{}}}],["profile",{"_index":85,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/DialogComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/UserDialogService.html":{}}}],["profiledatachange",{"_index":3314,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["profiledatachanged",{"_index":3303,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["profiledialog",{"_index":3304,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["profiledialogedit",{"_index":3305,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["profileform",{"_index":3306,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["profileopen",{"_index":33,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["profileopen:boolean",{"_index":155,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["profilespics",{"_index":870,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["profileview",{"_index":2685,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["profileview'},{'name",{"_index":249,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["profileview.component.html",{"_index":2686,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["profileview.component.scss",{"_index":2687,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["profileviewcomponent",{"_index":248,"title":{"components/ProfileviewComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["profiling",{"_index":2006,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["profiländerungen",{"_index":3399,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["promise",{"_index":1120,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ProfileviewComponent.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{}}}],["promise.reject('kein",{"_index":1152,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["propagating",{"_index":119,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["propagation",{"_index":3341,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["properties",{"_index":28,"title":{"properties.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"properties.html":{}}}],["property",{"_index":389,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MentionComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["provide",{"_index":522,"title":{},"body":{"components/AppComponent.html":{},"miscellaneous/variables.html":{}}}],["provideanimations",{"_index":3595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideanimationsasync",{"_index":3596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provideauth",{"_index":3601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":343,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{}}}],["providedatabase",{"_index":3603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":1066,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/EmojiStorageService.html":{},"injectables/MentionService.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{}}}],["providefirebaseapp",{"_index":3597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providefirestore",{"_index":3599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient",{"_index":3605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":1133,"title":{},"body":{"interfaces/CustomUser.html":{},"components/LegalnoticeComponent.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{}}}],["providerouter(routes",{"_index":3594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":3590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provides",{"_index":2786,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["providezonechangedetection",{"_index":3591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providing",{"_index":72,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChatComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["prüfe",{"_index":1550,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["prüfung",{"_index":2267,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["public",{"_index":283,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SearchService.html":{},"components/UsermenuComponent.html":{}}}],["purple",{"_index":809,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["quelle",{"_index":2191,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["query",{"_index":2879,"title":{},"body":{"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["radius",{"_index":723,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["rahmen",{"_index":1954,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["reaches",{"_index":1508,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["reacted",{"_index":2775,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reaction",{"_index":2682,"title":{"interfaces/Reaction.html":{}},"body":{"interfaces/Message.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"interfaces/ThreadMessage.html":{},"coverage.html":{}}}],["reaction.emoji",{"_index":2813,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reaction.userids.includes(this.activeuserid",{"_index":2793,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reaction.userids.join",{"_index":2814,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reaction.userids.length",{"_index":2815,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reaction.userids.map(id",{"_index":2795,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reaction.userids[index",{"_index":2801,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reactionadded",{"_index":2763,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reactions",{"_index":1215,"title":{},"body":{"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"injectables/SaveEditMessageService.html":{},"interfaces/ThreadMessage.html":{}}}],["reactions'},{'name",{"_index":251,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["reactions.component.html",{"_index":2756,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reactions.component.scss",{"_index":2757,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["reactionscomponent",{"_index":250,"title":{"components/ReactionsComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["reactiveformsmodule",{"_index":275,"title":{},"body":{"components/AddchatComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{}}}],["reagiert",{"_index":2805,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["real",{"_index":1075,"title":{},"body":{"interfaces/CustomUser.html":{},"components/MenuChannelsComponent.html":{}}}],["received",{"_index":1177,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["recentemojis",{"_index":1472,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["recently",{"_index":1456,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["rechners",{"_index":2136,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["recht",{"_index":1728,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["recht24.de",{"_index":2193,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechte",{"_index":1724,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtlich",{"_index":1917,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtlichen",{"_index":1941,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtm&auml;&szlig;igkeit",{"_index":1986,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtmäßigkeit",{"_index":2247,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtsanspr&uuml;chen",{"_index":2024,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtsansprüchen",{"_index":2255,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtsbehelfe",{"_index":2049,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtsgrundlage",{"_index":1969,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["rechtsgrundlagen",{"_index":1926,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["recipientid",{"_index":2680,"title":{},"body":{"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{}}}],["redirects",{"_index":3172,"title":{},"body":{"components/SignInComponent.html":{}}}],["redirecttoboard",{"_index":3161,"title":{},"body":{"components/SignInComponent.html":{}}}],["reference",{"_index":1300,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["referrer",{"_index":2133,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["regel",{"_index":2069,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["registering",{"_index":898,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["reicht",{"_index":2188,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["related",{"_index":951,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["relative",{"_index":714,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["relativedate",{"_index":2821,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["relativedatepipe",{"_index":2817,"title":{"pipes/RelativeDatePipe.html":{}},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"coverage.html":{}}}],["relevant",{"_index":962,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["removed",{"_index":324,"title":{},"body":{"components/AddchatComponent.html":{}}}],["removes",{"_index":315,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"injectables/EmojiStorageService.html":{},"injectables/UserDialogService.html":{}}}],["removing",{"_index":2516,"title":{},"body":{"injectables/MentionService.html":{}}}],["renderer",{"_index":2495,"title":{},"body":{"injectables/MentionService.html":{}}}],["renderer2",{"_index":2541,"title":{},"body":{"injectables/MentionService.html":{}}}],["rendererfactory",{"_index":2503,"title":{},"body":{"injectables/MentionService.html":{}}}],["rendererfactory.createrenderer(null",{"_index":2548,"title":{},"body":{"injectables/MentionService.html":{}}}],["rendererfactory2",{"_index":2504,"title":{},"body":{"injectables/MentionService.html":{}}}],["reopening",{"_index":3328,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["reopens",{"_index":3326,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["replaceurl",{"_index":3191,"title":{},"body":{"components/SignInComponent.html":{}}}],["represent",{"_index":1102,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["representing",{"_index":1461,"title":{},"body":{"injectables/EmojiStorageService.html":{},"injectables/SharedService.html":{}}}],["requested",{"_index":109,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["requesting",{"_index":3143,"title":{},"body":{"injectables/SharedService.html":{}}}],["required",{"_index":1436,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["reset",{"_index":253,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["resetpassword(email",{"_index":1145,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["resetpassword(this.userdata.email",{"_index":1523,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["resetpasswordcomponent",{"_index":252,"title":{"components/ResetPasswordComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["resets",{"_index":321,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["resize",{"_index":683,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["resolves",{"_index":1121,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ProfileviewComponent.html":{},"injectables/SharedService.html":{},"injectables/UserDialogService.html":{}}}],["respective",{"_index":655,"title":{},"body":{"components/BuilderComponent.html":{},"injectables/UserDialogService.html":{}}}],["responsible",{"_index":1236,"title":{},"body":{"components/DialogComponent.html":{}}}],["result",{"_index":345,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"components/HeaderComponent.html":{}}}],["result.name",{"_index":1044,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["results",{"_index":271,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["rethrowing",{"_index":1192,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["retrieve",{"_index":98,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"interfaces/CustomUser.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{}}}],["retrieved",{"_index":339,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{}}}],["retrieves",{"_index":92,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"injectables/EmojiStorageService.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{},"injectables/UserDialogService.html":{}}}],["retrieving",{"_index":102,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["return",{"_index":431,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2831,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["returns",{"_index":89,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["returnurl",{"_index":3188,"title":{},"body":{"components/SignInComponent.html":{}}}],["reveal",{"_index":2329,"title":{},"body":{"components/LoginComponent.html":{}}}],["reverse",{"_index":789,"title":{},"body":{"components/ChatComponent.html":{},"components/ToastMessageComponent.html":{}}}],["rgba(0",{"_index":784,"title":{},"body":{"components/ChatComponent.html":{}}}],["rgba(32",{"_index":2623,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["richtigkeit",{"_index":2066,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["right",{"_index":805,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["root",{"_index":506,"title":{},"body":{"components/AppComponent.html":{},"interfaces/CustomUser.html":{},"injectables/EmojiStorageService.html":{},"injectables/MentionService.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{}}}],["root'},{'name",{"_index":194,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["rotate",{"_index":582,"title":{},"body":{"components/AppComponent.html":{}}}],["rotate(0deg",{"_index":2639,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["rotate(229deg",{"_index":848,"title":{},"body":{"components/ChatComponent.html":{}}}],["rotate(231deg",{"_index":821,"title":{},"body":{"components/ChatComponent.html":{}}}],["rotate(270deg",{"_index":2637,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["rotateinfo",{"_index":589,"title":{},"body":{"components/AppComponent.html":{}}}],["route",{"_index":521,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"miscellaneous/variables.html":{}}}],["router",{"_index":518,"title":{},"body":{"components/AppComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"miscellaneous/variables.html":{}}}],["router.navigate",{"_index":3620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["router.navigatebyurl('/board",{"_index":3619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["routermodule",{"_index":1223,"title":{},"body":{"components/DialogComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["routeroutlet",{"_index":507,"title":{},"body":{"components/AppComponent.html":{},"components/LoginComponent.html":{}}}],["rule",{"_index":579,"title":{},"body":{"components/AppComponent.html":{}}}],["rxjs",{"_index":144,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"interfaces/CustomUser.html":{},"components/MentionComponent.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1056,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["sameday",{"_index":1217,"title":{},"body":{"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{}}}],["saturate(3091",{"_index":847,"title":{},"body":{"components/ChatComponent.html":{}}}],["saturate(5436",{"_index":819,"title":{},"body":{"components/ChatComponent.html":{}}}],["save",{"_index":1322,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/EmojiStorageService.html":{},"injectables/SaveEditMessageService.html":{}}}],["save(message",{"_index":2921,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["saved",{"_index":979,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["saveeditmessageservice",{"_index":2909,"title":{"injectables/SaveEditMessageService.html":{}},"body":{"injectables/SaveEditMessageService.html":{},"coverage.html":{}}}],["saveemoji",{"_index":1453,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["saveemoji(emoji",{"_index":1462,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["saveprofile",{"_index":3315,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["saves",{"_index":1464,"title":{},"body":{"injectables/EmojiStorageService.html":{},"injectables/UserDialogService.html":{}}}],["schloss",{"_index":2115,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["schnellen",{"_index":1809,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["schutz",{"_index":1859,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["schutzw&uuml;rdige",{"_index":2015,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["schutzwürdige",{"_index":2252,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["schönbergstr.14",{"_index":1607,"title":{},"body":{"components/ImprintComponent.html":{}}}],["screen",{"_index":530,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["scrollbalken",{"_index":792,"title":{},"body":{"components/ChatComponent.html":{}}}],["search",{"_index":319,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{}}}],["searchbar'},{'name",{"_index":255,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["searchbar/searchbar.component",{"_index":1586,"title":{},"body":{"components/HeaderComponent.html":{}}}],["searchbarcomponent",{"_index":254,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["searchchannels",{"_index":2954,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchchannels(searchtext",{"_index":2973,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchchannelsmessages",{"_index":2945,"title":{},"body":{"injectables/SearchService.html":{}}}],["searches",{"_index":988,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{}}}],["searchfor",{"_index":930,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["searchmessages",{"_index":2955,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchmessages(searchtext",{"_index":2976,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchservice",{"_index":943,"title":{"injectables/SearchService.html":{}},"body":{"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{},"coverage.html":{}}}],["searchspecificchannels",{"_index":2956,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchspecificchannels(searchtext",{"_index":2978,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchstring",{"_index":3063,"title":{},"body":{"injectables/SharedService.html":{}}}],["searchstringsubject",{"_index":3064,"title":{},"body":{"injectables/SharedService.html":{}}}],["searchtext",{"_index":931,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{}}}],["searchtext.trim",{"_index":3047,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchthreadmessages",{"_index":2957,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchthreadmessages(searchtext",{"_index":2980,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchusers",{"_index":2958,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchusers(searchtext",{"_index":2982,"title":{},"body":{"injectables/SearchService.html":{}}}],["searchvalue",{"_index":471,"title":{},"body":{"components/AddchatComponent.html":{}}}],["second",{"_index":1507,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["seconds",{"_index":532,"title":{},"body":{"components/AppComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["sect",{"_index":1819,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["section",{"_index":2365,"title":{},"body":{"components/LoginComponent.html":{}}}],["sectiondisplayheight",{"_index":2400,"title":{},"body":{"components/LoginComponent.html":{}}}],["see",{"_index":1234,"title":{},"body":{"components/DialogComponent.html":{}}}],["sehr",{"_index":1861,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sei",{"_index":2012,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sein",{"_index":491,"title":{},"body":{"components/AddchatComponent.html":{},"components/DialogComponent.html":{}}}],["seiner",{"_index":1838,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["seite",{"_index":1558,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["seiten",{"_index":1857,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["seitenaufrufs",{"_index":1695,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["seitenbetreiber",{"_index":2106,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sekunden",{"_index":1557,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["select",{"_index":2598,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["selectchannel",{"_index":2574,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["selectchannel(channelid",{"_index":2596,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["selected",{"_index":359,"title":{},"body":{"components/AddchatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{}}}],["selected.userid",{"_index":460,"title":{},"body":{"components/AddchatComponent.html":{}}}],["selectedemoji",{"_index":1444,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["selection",{"_index":385,"title":{},"body":{"components/AddchatComponent.html":{},"components/SignUpComponent.html":{}}}],["selectmember",{"_index":2443,"title":{},"body":{"components/MentionComponent.html":{}}}],["selectmember(member",{"_index":2459,"title":{},"body":{"components/MentionComponent.html":{}}}],["selectmember(member:any",{"_index":2484,"title":{},"body":{"components/MentionComponent.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["selects",{"_index":2461,"title":{},"body":{"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["self",{"_index":446,"title":{},"body":{"components/AddchatComponent.html":{},"components/ChatComponent.html":{}}}],["self.indexof(id",{"_index":447,"title":{},"body":{"components/AddchatComponent.html":{}}}],["senden",{"_index":1543,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["sending",{"_index":1218,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["sendmail",{"_index":1491,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["sendmail(form",{"_index":1500,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["sendmessage",{"_index":2690,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["sendpasswordresetemail",{"_index":1058,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["sendpasswordresetemail(this.auth",{"_index":1146,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["sends",{"_index":1143,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ForgetPasswordComponent.html":{},"components/ProfileviewComponent.html":{}}}],["sent",{"_index":802,"title":{},"body":{"components/ChatComponent.html":{},"interfaces/CustomUser.html":{}}}],["sepia(41",{"_index":818,"title":{},"body":{"components/ChatComponent.html":{}}}],["sepia(72",{"_index":846,"title":{},"body":{"components/ChatComponent.html":{}}}],["server",{"_index":2122,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["serveranfrage",{"_index":2137,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["servern",{"_index":1777,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["service",{"_index":71,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{}}}],["services",{"_index":2647,"title":{},"body":{"components/MenuComponent.html":{}}}],["services/auth.service",{"_index":2717,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["services/channels.service",{"_index":2718,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["services/state.service",{"_index":680,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{}}}],["services/toastmessage.service",{"_index":3282,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["services/user",{"_index":1243,"title":{},"body":{"components/DialogComponent.html":{},"components/UsermenuComponent.html":{}}}],["services/user.service",{"_index":2719,"title":{},"body":{"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{}}}],["session",{"_index":1155,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/UserDialogService.html":{}}}],["sessionstorage.getitem('introplayed",{"_index":2310,"title":{},"body":{"components/LoginComponent.html":{}}}],["sessionstorage.getitem('userdata",{"_index":3612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sessionstorage.removeitem('introplayed",{"_index":3406,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["sessionstorage.removeitem('token",{"_index":3405,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["sessionstorage.setitem('introplayed",{"_index":2313,"title":{},"body":{"components/LoginComponent.html":{}}}],["sessionstorage.setitem('userdata",{"_index":1158,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["set",{"_index":539,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/SharedService.html":{}}}],["setactive",{"_index":874,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["setactive(index",{"_index":891,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["setactive(index:number",{"_index":908,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["setanonymoususerdata(userid",{"_index":1140,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["setchannelidstring",{"_index":3075,"title":{},"body":{"injectables/SharedService.html":{}}}],["setchannelidstring(value",{"_index":3101,"title":{},"body":{"injectables/SharedService.html":{}}}],["setinterval",{"_index":567,"title":{},"body":{"components/AppComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{}}}],["setmenustate",{"_index":3229,"title":{},"body":{"injectables/StateService.html":{}}}],["setmenustate(state",{"_index":3235,"title":{},"body":{"injectables/StateService.html":{}}}],["sets",{"_index":328,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/MentionComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/StateService.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["setsearchstring",{"_index":3076,"title":{},"body":{"injectables/SharedService.html":{}}}],["setsearchstring(value",{"_index":3103,"title":{},"body":{"injectables/SharedService.html":{}}}],["settargetstring",{"_index":3077,"title":{},"body":{"injectables/SharedService.html":{}}}],["settargetstring(value",{"_index":3105,"title":{},"body":{"injectables/SharedService.html":{}}}],["setthreadchatstate",{"_index":3230,"title":{},"body":{"injectables/StateService.html":{}}}],["setthreadchatstate(state",{"_index":3237,"title":{},"body":{"injectables/StateService.html":{}}}],["settimeout",{"_index":704,"title":{},"body":{"components/BuilderComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"injectables/SaveEditMessageService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":87,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/BuilderComponent.html":{},"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/MentionService.html":{},"components/ThreadchatHeaderComponent.html":{},"injectables/UserDialogService.html":{}}}],["setuserdata",{"_index":1137,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["setuserdatainstorage(userdata",{"_index":1157,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["setuseridstring",{"_index":3078,"title":{},"body":{"injectables/SharedService.html":{}}}],["setuseridstring(value",{"_index":3107,"title":{},"body":{"injectables/SharedService.html":{}}}],["setze",{"_index":1553,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["setzen",{"_index":1843,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["shadow",{"_index":780,"title":{},"body":{"components/ChatComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["shared",{"_index":947,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"injectables/SharedService.html":{}}}],["shared/builder/builder.component",{"_index":2431,"title":{},"body":{"components/MainComponent.html":{}}}],["shared/chatbox/chatbox.component",{"_index":765,"title":{},"body":{"components/ChatComponent.html":{}}}],["shared/header/header.component",{"_index":1599,"title":{},"body":{"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/MainComponent.html":{}}}],["shared/header/searchbar/searchbar.component",{"_index":2655,"title":{},"body":{"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["shared/messagebox/messagebox.component",{"_index":766,"title":{},"body":{"components/ChatComponent.html":{}}}],["shared/services/auth.service",{"_index":406,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["shared/services/channels.service",{"_index":142,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["shared/services/mention.service",{"_index":1004,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/MentionComponent.html":{}}}],["shared/services/messages.service",{"_index":1357,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["shared/services/newmessage.service",{"_index":769,"title":{},"body":{"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["shared/services/search.service",{"_index":1003,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["shared/services/state.service",{"_index":2656,"title":{},"body":{"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["shared/services/toastmessage.service",{"_index":1359,"title":{},"body":{"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{}}}],["shared/services/user.service",{"_index":1516,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/MentionComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{}}}],["shared/toastmessage/toastmessage.component",{"_index":1515,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{}}}],["sharedservice",{"_index":758,"title":{"injectables/SharedService.html":{}},"body":{"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"injectables/SharedService.html":{},"coverage.html":{}}}],["sharedvariable",{"_index":756,"title":{},"body":{"components/ChatComponent.html":{},"injectables/SharedService.html":{}}}],["shift",{"_index":1320,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["short",{"_index":638,"title":{},"body":{"components/BuilderComponent.html":{},"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["show",{"_index":2914,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["showing",{"_index":3317,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["shown",{"_index":3257,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["showpeople",{"_index":170,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["shows",{"_index":1350,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["showsuccess",{"_index":871,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["showtoast",{"_index":3293,"title":{},"body":{"injectables/ToastMessageService.html":{}}}],["showtoast(error",{"_index":3269,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["showtoastmessage",{"_index":1292,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["showtoastmessage(text",{"_index":1348,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["showtoastmessage(text:string",{"_index":1412,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["showtoastsignal",{"_index":3294,"title":{},"body":{"injectables/ToastMessageService.html":{}}}],["showtoastsignal(message",{"_index":3272,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["shrinkimage",{"_index":2341,"title":{},"body":{"components/LoginComponent.html":{}}}],["shrinkimagemobile",{"_index":2406,"title":{},"body":{"components/LoginComponent.html":{}}}],["sich",{"_index":1675,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sicheren",{"_index":1808,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sicherheitsgr&uuml;nden",{"_index":2102,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sicherheitsgründen",{"_index":2276,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sicherheitsl&uuml;cken",{"_index":1880,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sicherheitslücken",{"_index":2226,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sie",{"_index":489,"title":{},"body":{"components/AddchatComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/MentionComponent.html":{},"components/SignUpComponent.html":{}}}],["sign",{"_index":257,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["signal",{"_index":1049,"title":{},"body":{"interfaces/CustomUser.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{}}}],["signal(false",{"_index":3366,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["signed",{"_index":1002,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["signincomponent",{"_index":256,"title":{"components/SignInComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["signup",{"_index":3204,"title":{},"body":{"components/SignUpComponent.html":{}}}],["signup(form",{"_index":3208,"title":{},"body":{"components/SignUpComponent.html":{}}}],["signupavatar",{"_index":875,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["signupcomponent",{"_index":259,"title":{"components/SignUpComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["sind",{"_index":1635,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/MentionComponent.html":{}}}],["sinne",{"_index":1828,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["situation",{"_index":1999,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["size",{"_index":610,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenutogglerComponent.html":{},"components/ToastMessageComponent.html":{}}}],["slide",{"_index":2674,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["slideanimationleft",{"_index":677,"title":{},"body":{"components/BuilderComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slideanimationright",{"_index":678,"title":{},"body":{"components/BuilderComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slideinfromright",{"_index":3287,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["smallwindow",{"_index":620,"title":{},"body":{"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["snapshot",{"_index":1079,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["snapshot.docs.map((doc",{"_index":1080,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["sobald",{"_index":1697,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sofern",{"_index":1711,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sogenannten",{"_index":1764,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["solange",{"_index":2083,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["solcher",{"_index":2029,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["solid",{"_index":807,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["sollten",{"_index":488,"title":{},"body":{"components/AddchatComponent.html":{}}}],["sonstige",{"_index":1720,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{}}}],["soweit",{"_index":1821,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["sowie",{"_index":1754,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["space",{"_index":711,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["span",{"_index":608,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{}}}],["specific",{"_index":2776,"title":{},"body":{"components/ReactionsComponent.html":{},"injectables/UserDialogService.html":{}}}],["specified",{"_index":2592,"title":{},"body":{"components/MenuChannelsComponent.html":{},"injectables/SharedService.html":{}}}],["speicherdauer",{"_index":1904,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["speichern",{"_index":1275,"title":{},"body":{"components/DialogComponent.html":{},"injectables/UserDialogService.html":{}}}],["speichert",{"_index":2126,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["speicherung",{"_index":1822,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["speziellere",{"_index":1907,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["src/.../animations.ts",{"_index":3588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.config.ts",{"_index":3586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.guard.ts",{"_index":3587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":503,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:17",{"_index":548,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:18",{"_index":545,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:19",{"_index":546,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:20",{"_index":549,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:21",{"_index":519,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:39",{"_index":540,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:53",{"_index":527,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:61",{"_index":543,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":3461,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/auth.guard.ts",{"_index":3464,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/imprint/imprint.component.ts",{"_index":1596,"title":{},"body":{"components/ImprintComponent.html":{},"coverage.html":{}}}],["src/app/legalnotice/legalnotice.component.ts",{"_index":1614,"title":{},"body":{"components/LegalnoticeComponent.html":{},"coverage.html":{}}}],["src/app/login/forget",{"_index":1483,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"coverage.html":{}}}],["src/app/login/login.component.ts",{"_index":2290,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/login/login.component.ts:15",{"_index":2302,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:16",{"_index":2301,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:17",{"_index":2298,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:24",{"_index":2303,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:40",{"_index":2299,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/login.component.ts:60",{"_index":2304,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/login/reset",{"_index":2866,"title":{},"body":{"components/ResetPasswordComponent.html":{},"coverage.html":{}}}],["src/app/login/sign",{"_index":862,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"coverage.html":{}}}],["src/app/main/addchat/addchat.component.ts",{"_index":273,"title":{},"body":{"components/AddchatComponent.html":{},"coverage.html":{}}}],["src/app/main/addchat/addchat.component.ts:103",{"_index":355,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:128",{"_index":342,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:142",{"_index":387,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:152",{"_index":383,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:163",{"_index":313,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:182",{"_index":325,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:198",{"_index":374,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:20",{"_index":396,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:21",{"_index":403,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:214",{"_index":365,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:22",{"_index":392,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:23",{"_index":393,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:24",{"_index":398,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:25",{"_index":399,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:26",{"_index":394,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:27",{"_index":401,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:28",{"_index":302,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:43",{"_index":397,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:57",{"_index":370,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/addchat/addchat.component.ts:80",{"_index":330,"title":{},"body":{"components/AddchatComponent.html":{}}}],["src/app/main/chat/chat.component.ts",{"_index":752,"title":{},"body":{"components/ChatComponent.html":{},"coverage.html":{}}}],["src/app/main/chat/chat.component.ts:17",{"_index":760,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/main/chat/chat.component.ts:18",{"_index":764,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/main/chat/chat.component.ts:19",{"_index":759,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/main/chat/chat.component.ts:34",{"_index":761,"title":{},"body":{"components/ChatComponent.html":{}}}],["src/app/main/chat/mainchat",{"_index":3479,"title":{},"body":{"coverage.html":{}}}],["src/app/main/chat/threadchat",{"_index":3252,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{},"coverage.html":{}}}],["src/app/main/createmessage/createmessage.component.ts",{"_index":924,"title":{},"body":{"components/CreatemessageComponent.html":{},"coverage.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:105",{"_index":958,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:121",{"_index":980,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:139",{"_index":984,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:155",{"_index":993,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:17",{"_index":998,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:171",{"_index":991,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:18",{"_index":997,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:186",{"_index":1001,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:19",{"_index":999,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:198",{"_index":971,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:20",{"_index":994,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:21",{"_index":996,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:22",{"_index":995,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:23",{"_index":945,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:57",{"_index":977,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:67",{"_index":952,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/createmessage/createmessage.component.ts:85",{"_index":968,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["src/app/main/main.component.ts",{"_index":2417,"title":{},"body":{"components/MainComponent.html":{},"coverage.html":{}}}],["src/app/main/main.component.ts:21",{"_index":2423,"title":{},"body":{"components/MainComponent.html":{}}}],["src/app/main/main.component.ts:26",{"_index":2427,"title":{},"body":{"components/MainComponent.html":{}}}],["src/app/main/main.component.ts:27",{"_index":2429,"title":{},"body":{"components/MainComponent.html":{}}}],["src/app/main/main.component.ts:29",{"_index":2430,"title":{},"body":{"components/MainComponent.html":{}}}],["src/app/main/main.component.ts:33",{"_index":2425,"title":{},"body":{"components/MainComponent.html":{}}}],["src/app/main/main.component.ts:37",{"_index":2424,"title":{},"body":{"components/MainComponent.html":{}}}],["src/app/main/menu/menu",{"_index":2562,"title":{},"body":{"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"coverage.html":{}}}],["src/app/main/menu/menu.component.ts",{"_index":2641,"title":{},"body":{"components/MenuComponent.html":{},"coverage.html":{}}}],["src/app/main/menu/menu.component.ts:16",{"_index":2645,"title":{},"body":{"components/MenuComponent.html":{}}}],["src/app/main/menu/menu.component.ts:31",{"_index":2648,"title":{},"body":{"components/MenuComponent.html":{}}}],["src/app/main/shared/add",{"_index":9,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"coverage.html":{}}}],["src/app/main/shared/chatbox/chatbox.component.ts",{"_index":3493,"title":{},"body":{"coverage.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts",{"_index":1276,"title":{},"body":{"components/EditmessageComponent.html":{},"coverage.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:104",{"_index":1337,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:125",{"_index":1339,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:149",{"_index":1306,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:162",{"_index":1329,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:17",{"_index":1355,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:18",{"_index":1354,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:183",{"_index":1324,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:19",{"_index":1295,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:203",{"_index":1331,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:220",{"_index":1349,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:232",{"_index":1341,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:248",{"_index":1312,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:37",{"_index":1353,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:40",{"_index":1352,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:65",{"_index":1340,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/editmessage/editmessage.component.ts:82",{"_index":1343,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["src/app/main/shared/emoji",{"_index":1426,"title":{},"body":{"components/EmojiPickerComponent.html":{},"coverage.html":{}}}],["src/app/main/shared/mention/mention.component.ts",{"_index":2435,"title":{},"body":{"components/MentionComponent.html":{},"coverage.html":{}}}],["src/app/main/shared/mention/mention.component.ts:115",{"_index":2452,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/mention/mention.component.ts:18",{"_index":2450,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/mention/mention.component.ts:19",{"_index":2465,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/mention/mention.component.ts:20",{"_index":2466,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/mention/mention.component.ts:21",{"_index":2467,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/mention/mention.component.ts:22",{"_index":2445,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/mention/mention.component.ts:51",{"_index":2458,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/mention/mention.component.ts:76",{"_index":2457,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/mention/mention.component.ts:97",{"_index":2460,"title":{},"body":{"components/MentionComponent.html":{}}}],["src/app/main/shared/menutoggler/menutoggler.component.ts",{"_index":2664,"title":{},"body":{"components/MenutogglerComponent.html":{},"coverage.html":{}}}],["src/app/main/shared/menutoggler/menutoggler.component.ts:12",{"_index":2670,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["src/app/main/shared/menutoggler/menutoggler.component.ts:13",{"_index":2676,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["src/app/main/shared/menutoggler/menutoggler.component.ts:14",{"_index":2669,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["src/app/main/shared/menutoggler/menutoggler.component.ts:31",{"_index":2671,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["src/app/main/shared/messagebox/messagebox.component.ts",{"_index":3501,"title":{},"body":{"coverage.html":{}}}],["src/app/main/shared/messages/messages.component.ts",{"_index":3504,"title":{},"body":{"coverage.html":{}}}],["src/app/main/shared/parentmessage/parent",{"_index":3507,"title":{},"body":{"coverage.html":{}}}],["src/app/main/shared/threadmessages/threadmessages.component.ts",{"_index":3510,"title":{},"body":{"coverage.html":{}}}],["src/app/models/channel.ts",{"_index":749,"title":{},"body":{"interfaces/Channel.html":{},"coverage.html":{}}}],["src/app/models/message.ts",{"_index":2679,"title":{},"body":{"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{},"coverage.html":{}}}],["src/app/models/user.ts",{"_index":3412,"title":{},"body":{"classes/UserModel.html":{},"coverage.html":{}}}],["src/app/models/user.ts:10",{"_index":3421,"title":{},"body":{"classes/UserModel.html":{}}}],["src/app/models/user.ts:11",{"_index":3416,"title":{},"body":{"classes/UserModel.html":{}}}],["src/app/models/user.ts:4",{"_index":3423,"title":{},"body":{"classes/UserModel.html":{}}}],["src/app/models/user.ts:5",{"_index":3419,"title":{},"body":{"classes/UserModel.html":{}}}],["src/app/models/user.ts:6",{"_index":3422,"title":{},"body":{"classes/UserModel.html":{}}}],["src/app/models/user.ts:7",{"_index":3420,"title":{},"body":{"classes/UserModel.html":{}}}],["src/app/models/user.ts:8",{"_index":3417,"title":{},"body":{"classes/UserModel.html":{}}}],["src/app/models/user.ts:9",{"_index":3418,"title":{},"body":{"classes/UserModel.html":{}}}],["src/app/pipes/timestamp",{"_index":2819,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"coverage.html":{}}}],["src/app/shared/animations.ts",{"_index":3518,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/shared/builder/builder.component.ts",{"_index":613,"title":{},"body":{"components/BuilderComponent.html":{},"coverage.html":{}}}],["src/app/shared/builder/builder.component.ts:100",{"_index":665,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:117",{"_index":636,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:132",{"_index":650,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:20",{"_index":667,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:21",{"_index":672,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:22",{"_index":669,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:23",{"_index":671,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:24",{"_index":673,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:25",{"_index":670,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:26",{"_index":668,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:27",{"_index":633,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:44",{"_index":635,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:59",{"_index":643,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/builder/builder.component.ts:77",{"_index":659,"title":{},"body":{"components/BuilderComponent.html":{}}}],["src/app/shared/header/header.component.ts",{"_index":1560,"title":{},"body":{"components/HeaderComponent.html":{},"coverage.html":{}}}],["src/app/shared/header/header.component.ts:25",{"_index":1580,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:26",{"_index":1583,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:27",{"_index":1581,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:28",{"_index":1582,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:29",{"_index":1584,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:30",{"_index":1567,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:49",{"_index":1568,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:57",{"_index":1575,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:70",{"_index":1576,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/header.component.ts:83",{"_index":1569,"title":{},"body":{"components/HeaderComponent.html":{}}}],["src/app/shared/header/searchbar/searchbar.component.ts",{"_index":3523,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/header/usermenu/dialog/dialog.component.ts",{"_index":1222,"title":{},"body":{"components/DialogComponent.html":{},"coverage.html":{}}}],["src/app/shared/header/usermenu/dialog/dialog.component.ts:24",{"_index":1239,"title":{},"body":{"components/DialogComponent.html":{}}}],["src/app/shared/header/usermenu/dialog/dialog.component.ts:25",{"_index":1232,"title":{},"body":{"components/DialogComponent.html":{}}}],["src/app/shared/header/usermenu/dialog/dialog.component.ts:33",{"_index":1242,"title":{},"body":{"components/DialogComponent.html":{}}}],["src/app/shared/header/usermenu/dialog/dialog.component.ts:42",{"_index":1240,"title":{},"body":{"components/DialogComponent.html":{}}}],["src/app/shared/header/usermenu/usermenu.component.ts",{"_index":3437,"title":{},"body":{"components/UsermenuComponent.html":{},"coverage.html":{}}}],["src/app/shared/header/usermenu/usermenu.component.ts:14",{"_index":3442,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["src/app/shared/header/usermenu/usermenu.component.ts:15",{"_index":3448,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["src/app/shared/header/usermenu/usermenu.component.ts:22",{"_index":3447,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["src/app/shared/header/usermenu/usermenu.component.ts:32",{"_index":3444,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["src/app/shared/logo/logo.component.ts",{"_index":2414,"title":{},"body":{"components/LogoComponent.html":{},"coverage.html":{}}}],["src/app/shared/menu",{"_index":3526,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/profileview/profileview.component.ts",{"_index":2684,"title":{},"body":{"components/ProfileviewComponent.html":{},"coverage.html":{}}}],["src/app/shared/profileview/profileview.component.ts:118",{"_index":2710,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:134",{"_index":2701,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:17",{"_index":2697,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:18",{"_index":2696,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:19",{"_index":2716,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:31",{"_index":2693,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:47",{"_index":2714,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:48",{"_index":2715,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:49",{"_index":2712,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:50",{"_index":2713,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:66",{"_index":2703,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:82",{"_index":2698,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/profileview/profileview.component.ts:92",{"_index":2706,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts",{"_index":2755,"title":{},"body":{"components/ReactionsComponent.html":{},"coverage.html":{}}}],["src/app/shared/reactions/reactions.component.ts:14",{"_index":2769,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:15",{"_index":2766,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:16",{"_index":2768,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:17",{"_index":2767,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:18",{"_index":2765,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:26",{"_index":2771,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:35",{"_index":2783,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:51",{"_index":2773,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:75",{"_index":2781,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/reactions/reactions.component.ts:86",{"_index":2785,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["src/app/shared/services/auth.service.ts",{"_index":3532,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/services/channels.service.ts",{"_index":3533,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/services/emoji",{"_index":1449,"title":{},"body":{"injectables/EmojiStorageService.html":{},"coverage.html":{}}}],["src/app/shared/services/mention.service.ts",{"_index":2494,"title":{},"body":{"injectables/MentionService.html":{},"coverage.html":{}}}],["src/app/shared/services/mention.service.ts:10",{"_index":2543,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:105",{"_index":2519,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:11",{"_index":2544,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:12",{"_index":2505,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:120",{"_index":2511,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:29",{"_index":2528,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:43",{"_index":2523,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:53",{"_index":2526,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:63",{"_index":2533,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:74",{"_index":2514,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:8",{"_index":2540,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:89",{"_index":2537,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/mention.service.ts:9",{"_index":2542,"title":{},"body":{"injectables/MentionService.html":{}}}],["src/app/shared/services/messages.service.ts",{"_index":3542,"title":{},"body":{"coverage.html":{}}}],["src/app/shared/services/newmessage.service.ts",{"_index":3061,"title":{},"body":{"injectables/SharedService.html":{},"coverage.html":{}}}],["src/app/shared/services/newmessage.service.ts:107",{"_index":3095,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:11",{"_index":3119,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:115",{"_index":3099,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:12",{"_index":3117,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:126",{"_index":3083,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:13",{"_index":3124,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:139",{"_index":3093,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:14",{"_index":3127,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:149",{"_index":3085,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:15",{"_index":3114,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:16",{"_index":3121,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:164",{"_index":3088,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:17",{"_index":3116,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:18",{"_index":3123,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:19",{"_index":3126,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:20",{"_index":3081,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:32",{"_index":3110,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:42",{"_index":3104,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:51",{"_index":3108,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:60",{"_index":3102,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:70",{"_index":3106,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:79",{"_index":3098,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:88",{"_index":3094,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/newmessage.service.ts:98",{"_index":3096,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/services/save",{"_index":2910,"title":{},"body":{"injectables/SaveEditMessageService.html":{},"coverage.html":{}}}],["src/app/shared/services/search.service.ts",{"_index":2935,"title":{},"body":{"injectables/SearchService.html":{},"coverage.html":{}}}],["src/app/shared/services/search.service.ts:106",{"_index":2963,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:119",{"_index":2977,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:134",{"_index":2981,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:14",{"_index":3000,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:15",{"_index":2989,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:150",{"_index":2983,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:16",{"_index":2994,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:171",{"_index":2974,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:18",{"_index":2998,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:188",{"_index":2979,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:19",{"_index":3007,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:20",{"_index":3010,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:21",{"_index":2992,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:22",{"_index":3003,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:23",{"_index":2997,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:24",{"_index":3006,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:25",{"_index":3009,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:26",{"_index":2991,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:27",{"_index":3002,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:28",{"_index":2986,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:29",{"_index":2987,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:30",{"_index":2988,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:31",{"_index":2985,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:32",{"_index":3004,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:33",{"_index":2995,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:41",{"_index":2967,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:58",{"_index":2959,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:81",{"_index":2969,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/search.service.ts:93",{"_index":2971,"title":{},"body":{"injectables/SearchService.html":{}}}],["src/app/shared/services/state.service.ts",{"_index":3225,"title":{},"body":{"injectables/StateService.html":{},"coverage.html":{}}}],["src/app/shared/services/state.service.ts:10",{"_index":3240,"title":{},"body":{"injectables/StateService.html":{}}}],["src/app/shared/services/state.service.ts:11",{"_index":3244,"title":{},"body":{"injectables/StateService.html":{}}}],["src/app/shared/services/state.service.ts:18",{"_index":3236,"title":{},"body":{"injectables/StateService.html":{}}}],["src/app/shared/services/state.service.ts:27",{"_index":3238,"title":{},"body":{"injectables/StateService.html":{}}}],["src/app/shared/services/state.service.ts:36",{"_index":3231,"title":{},"body":{"injectables/StateService.html":{}}}],["src/app/shared/services/state.service.ts:8",{"_index":3242,"title":{},"body":{"injectables/StateService.html":{}}}],["src/app/shared/services/state.service.ts:9",{"_index":3246,"title":{},"body":{"injectables/StateService.html":{}}}],["src/app/shared/services/toastmessage.service.ts",{"_index":3264,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"coverage.html":{}}}],["src/app/shared/services/toastmessage.service.ts:13",{"_index":3299,"title":{},"body":{"injectables/ToastMessageService.html":{}}}],["src/app/shared/services/toastmessage.service.ts:14",{"_index":3297,"title":{},"body":{"injectables/ToastMessageService.html":{}}}],["src/app/shared/services/toastmessage.service.ts:15",{"_index":3298,"title":{},"body":{"injectables/ToastMessageService.html":{}}}],["src/app/shared/services/toastmessage.service.ts:23",{"_index":3295,"title":{},"body":{"injectables/ToastMessageService.html":{}}}],["src/app/shared/services/toastmessage.service.ts:32",{"_index":3296,"title":{},"body":{"injectables/ToastMessageService.html":{}}}],["src/app/shared/services/user",{"_index":3300,"title":{},"body":{"injectables/UserDialogService.html":{},"coverage.html":{}}}],["src/app/shared/services/user.service.ts",{"_index":1047,"title":{},"body":{"interfaces/CustomUser.html":{},"coverage.html":{}}}],["src/app/shared/toastmessage/toastmessage.component.ts",{"_index":3276,"title":{},"body":{"components/ToastMessageComponent.html":{},"coverage.html":{}}}],["src/app/shared/toastmessage/toastmessage.component.ts:12",{"_index":3279,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["src/app/shared/toastmessage/toastmessage.component.ts:25",{"_index":3281,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["ssl",{"_index":2098,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["st0",{"_index":577,"title":{},"body":{"components/AppComponent.html":{}}}],["stacked",{"_index":686,"title":{},"body":{"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["standalone",{"_index":18,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["start",{"_index":720,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["startchannelsearch",{"_index":938,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["startdefaultsearch",{"_index":939,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["started",{"_index":3578,"title":{"index.html":{}},"body":{}}],["starts",{"_index":982,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/ForgetPasswordComponent.html":{}}}],["starttimer",{"_index":1492,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["startuserssearch",{"_index":940,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["state",{"_index":524,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/CreatemessageComponent.html":{},"components/HeaderComponent.html":{},"components/MentionComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"injectables/UserDialogService.html":{},"miscellaneous/variables.html":{}}}],["state('in",{"_index":3622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state('out",{"_index":3628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state.url",{"_index":3618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state:boolean",{"_index":2469,"title":{},"body":{"components/MentionComponent.html":{}}}],["statements",{"_index":3458,"title":{},"body":{"coverage.html":{}}}],["stateservice",{"_index":632,"title":{"injectables/StateService.html":{}},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"coverage.html":{}}}],["statistisch",{"_index":1761,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["statt",{"_index":2076,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["status",{"_index":128,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"classes/UserModel.html":{}}}],["status:boolean",{"_index":156,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"injectables/MentionService.html":{}}}],["status=false",{"_index":1135,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["steht",{"_index":1748,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["stelle",{"_index":1886,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["stelle&ldquo",{"_index":1665,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["stellen",{"_index":1959,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["step",{"_index":887,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["steuer",{"_index":1920,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["steuerbeh&ouml;rden",{"_index":1968,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["steuerbehörden",{"_index":2244,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["stimme",{"_index":3222,"title":{},"body":{"components/SignUpComponent.html":{}}}],["stimmen",{"_index":2889,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["stop",{"_index":125,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["stoppropagation",{"_index":42,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["stoppropagation(event",{"_index":116,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["stops",{"_index":3340,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["storage",{"_index":1156,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/EmojiStorageService.html":{},"injectables/UserDialogService.html":{}}}],["storage.service.ts",{"_index":1450,"title":{},"body":{"injectables/EmojiStorageService.html":{},"coverage.html":{}}}],["storage.service.ts:17",{"_index":1463,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["storage.service.ts:34",{"_index":1454,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["storage.service.ts:7",{"_index":1473,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["storagekey",{"_index":1451,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["stored",{"_index":1117,"title":{},"body":{"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{}}}],["stores",{"_index":99,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"interfaces/CustomUser.html":{},"injectables/SearchService.html":{}}}],["string",{"_index":75,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"classes/UserModel.html":{}}}],["strings",{"_index":1459,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["style",{"_index":2387,"title":{},"body":{"components/LoginComponent.html":{},"miscellaneous/variables.html":{}}}],["style({transform",{"_index":3636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style({width",{"_index":3623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":502,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["styleurl",{"_index":25,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/UsermenuComponent.html":{}}}],["styleurls",{"_index":508,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["styling",{"_index":2594,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["sub",{"_index":3344,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["subject",{"_index":3265,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["submission",{"_index":1344,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["subscribe",{"_index":1100,"title":{},"body":{"interfaces/CustomUser.html":{},"components/MentionComponent.html":{}}}],["subscribers",{"_index":3232,"title":{},"body":{"injectables/StateService.html":{}}}],["subscribes",{"_index":2446,"title":{},"body":{"components/MentionComponent.html":{},"injectables/SearchService.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["subscribing",{"_index":59,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/HeaderComponent.html":{}}}],["subscription",{"_index":400,"title":{},"body":{"components/AddchatComponent.html":{}}}],["subscriptions",{"_index":287,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{}}}],["success",{"_index":2965,"title":{},"body":{"injectables/SearchService.html":{}}}],["successful",{"_index":347,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["successfully",{"_index":1144,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"injectables/UserDialogService.html":{}}}],["successmessage",{"_index":2871,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["such",{"_index":3343,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["suggested",{"_index":1465,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["super",{"_index":841,"title":{},"body":{"components/ChatComponent.html":{}}}],["support",{"_index":1852,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["support&#64;avoro.eu",{"_index":1853,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["support&#64;avoro.euelfirma.de",{"_index":1893,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["support@avoro.eu",{"_index":2221,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["support@avoro.euelfirma.de",{"_index":2229,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["supposed",{"_index":3342,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["sure",{"_index":1423,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["surf",{"_index":1759,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["svg",{"_index":606,"title":{},"body":{"components/AppComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["switch",{"_index":2702,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["switches",{"_index":384,"title":{},"body":{"components/AddchatComponent.html":{},"components/ProfileviewComponent.html":{}}}],["switchmembersform",{"_index":295,"title":{},"body":{"components/AddchatComponent.html":{}}}],["switchtoexistingchannel",{"_index":2691,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["switchtoexistingchannel(existingchannels",{"_index":2709,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["symbol",{"_index":2116,"title":{},"body":{"components/LegalnoticeComponent.html":{},"injectables/MentionService.html":{}}}],["system",{"_index":1201,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["systeme",{"_index":1688,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["table",{"_index":3556,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3555,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":961,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/MentionService.html":{},"injectables/SharedService.html":{}}}],["target.closest('.cont",{"_index":2556,"title":{},"body":{"injectables/MentionService.html":{}}}],["target.closest('.mention",{"_index":2554,"title":{},"body":{"injectables/MentionService.html":{}}}],["targeting",{"_index":964,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SharedService.html":{}}}],["targetstring",{"_index":3065,"title":{},"body":{"injectables/SharedService.html":{}}}],["targetstringsubject",{"_index":3066,"title":{},"body":{"injectables/SharedService.html":{}}}],["taunusstra&szlig;e",{"_index":1847,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["taunusstraße",{"_index":2219,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["tdddg",{"_index":1820,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["team",{"_index":484,"title":{},"body":{"components/AddchatComponent.html":{}}}],["technisch",{"_index":2060,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["technische",{"_index":1691,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["teil",{"_index":1701,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["teilweise",{"_index":1962,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["telefax",{"_index":2147,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["telefon",{"_index":1888,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["templateurl",{"_index":23,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["text",{"_index":844,"title":{},"body":{"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"components/EditmessageComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["textcontainer",{"_index":2343,"title":{},"body":{"components/LoginComponent.html":{}}}],["thema",{"_index":1642,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["themenbezogen",{"_index":490,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.acitveuserid",{"_index":2470,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.activechannel",{"_index":2471,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.activechannel$.subscribe(channel",{"_index":2474,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.activepic",{"_index":909,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.activeuserid",{"_index":2802,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["this.addmembers",{"_index":457,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.allchannels",{"_index":3036,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.allchannels.filter",{"_index":3055,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.allmembers",{"_index":413,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.allmembersarray",{"_index":417,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.allmembersarray.filter(member",{"_index":473,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.allmembersarray.map(member",{"_index":442,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.allmessages",{"_index":3014,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.allmessages.filter",{"_index":3041,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.allthreadmessages",{"_index":3029,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.allthreadmessages.filter((message",{"_index":3045,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.allusers",{"_index":3031,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.allusers.filter((user",{"_index":3050,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.auth.currentuser",{"_index":1150,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.auth.getuserlist().subscribe",{"_index":415,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.auth.logout",{"_index":3407,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.auth.register(this.userdata.email",{"_index":913,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.auth.userid",{"_index":425,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MentionComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["this.auth.userid()!).then",{"_index":1407,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.authservice.getuserlist().subscribe((users",{"_index":3030,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.authservice.googlelogin",{"_index":3186,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.authservice.guestlogin",{"_index":3183,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.authservice.isauthenticated",{"_index":3174,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.authservice.isuserauthenticated",{"_index":563,"title":{},"body":{"components/AppComponent.html":{}}}],["this.authservice.loadingspinnerboard",{"_index":2428,"title":{},"body":{"components/MainComponent.html":{}}}],["this.authservice.login(this.logindata.email",{"_index":3177,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.authservice.updateuserdata(this.userdata.userid",{"_index":3396,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.authservice.userdata",{"_index":3400,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.authservice.userid",{"_index":1039,"title":{},"body":{"components/CreatemessageComponent.html":{},"components/ProfileviewComponent.html":{}}}],["this.avatar",{"_index":3214,"title":{},"body":{"components/SignUpComponent.html":{}}}],["this.back",{"_index":1530,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["this.backward.emit",{"_index":907,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.builder",{"_index":2464,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.channel",{"_index":159,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["this.channel.subscribe((channel",{"_index":163,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["this.channelform",{"_index":409,"title":{},"body":{"components/AddchatComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["this.channelform.reset",{"_index":449,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.channelform.valid",{"_index":424,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.channelform.value.description",{"_index":439,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.channelform.value.isprivate",{"_index":440,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.channelform.value.name",{"_index":438,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.channelidsubject.asobservable",{"_index":3113,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.channelidsubject.next(value",{"_index":3133,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.channelidsubject.value",{"_index":3136,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.channelname",{"_index":3262,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["this.channelresults",{"_index":1010,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.channelresultssubject.asobservable",{"_index":2990,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.channelresultssubject.next(filteredchannels",{"_index":3057,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.channels",{"_index":2611,"title":{},"body":{"components/MenuChannelsComponent.html":{},"classes/UserModel.html":{}}}],["this.channelservice.createchannel(newchannel",{"_index":2750,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.channelservice.currentchannel",{"_index":2472,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.channelservice.getprivatechannelbymembers([currentuserid",{"_index":2739,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.channelservice.selectchannel(existingchannel.id",{"_index":2747,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.channelsservice.createchannel(newchannel).then",{"_index":448,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.channelsservice.currentchannel",{"_index":160,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["this.channelsservice.loadchannelsrealtime((channels",{"_index":2610,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["this.channelsservice.selectchannel(channelid",{"_index":2618,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["this.checkcreatorwithactiveuser",{"_index":1375,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.checkcreatorwithactiveuser(message.createdby",{"_index":2929,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["this.checkmention(data.id",{"_index":2480,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.checkmentions(data",{"_index":2477,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.checkorientationandwidth",{"_index":568,"title":{},"body":{"components/AppComponent.html":{}}}],["this.checkorietationinterval",{"_index":566,"title":{},"body":{"components/AppComponent.html":{}}}],["this.checkpasswordsmatch",{"_index":2900,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.checkside",{"_index":2308,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.checkupdatedata(message",{"_index":2930,"title":{},"body":{"injectables/SaveEditMessageService.html":{}}}],["this.choosenmembers.findindex(selected",{"_index":459,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.choosenmembers.map(member",{"_index":444,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.choosenmembers.push(member",{"_index":462,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.choosenmembers.some(selected",{"_index":475,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.choosenmembers.splice(index",{"_index":463,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.clearloadingspinner",{"_index":2432,"title":{},"body":{"components/MainComponent.html":{}}}],["this.clearresults",{"_index":1016,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.closemenu",{"_index":706,"title":{},"body":{"components/BuilderComponent.html":{}}}],["this.closeprofile",{"_index":2748,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.countdown",{"_index":1519,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["this.createnewchannel(newchannel",{"_index":433,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.createprivatechannel(currentuserid",{"_index":2742,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.createuserbehaviorsubject(userid",{"_index":1092,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.currentchannel",{"_index":3260,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["this.currentchannel$.subscribe((channel",{"_index":3261,"title":{},"body":{"components/ThreadchatHeaderComponent.html":{}}}],["this.currenturl",{"_index":1588,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.currenturl.includes('imprint",{"_index":1593,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.currenturl.includes('legalnotice",{"_index":1592,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.data.deletemessage",{"_index":1363,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.data.docid",{"_index":1393,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.data.message,...this.messageform.value",{"_index":1376,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.data.message.createdby",{"_index":1395,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.data.message.docid",{"_index":1398,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.data.message.message",{"_index":1372,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.data.message.reactions",{"_index":1373,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.data.parentmessageid",{"_index":1365,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.data.thread",{"_index":1361,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.deletemainmessage",{"_index":1403,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.deletemessage",{"_index":1422,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.deletesearch",{"_index":1017,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.deletethreadmessage(docid",{"_index":1401,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.dialog",{"_index":3384,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.dialog.open(addchatcomponent",{"_index":2612,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["this.dialogchange.emit",{"_index":3397,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.dialogref.close",{"_index":450,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/ProfileviewComponent.html":{}}}],["this.email",{"_index":3429,"title":{},"body":{"classes/UserModel.html":{}}}],["this.emailsended",{"_index":1528,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["this.emoji.emit(selectedemoji",{"_index":1446,"title":{},"body":{"components/EmojiPickerComponent.html":{}}}],["this.errormessage",{"_index":2895,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.exitactiv",{"_index":3385,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.fb.group",{"_index":410,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["this.filteredmembersarray",{"_index":468,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.forgetpassword",{"_index":2318,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.generatechannelobject(currentuserid",{"_index":432,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.getchannelname",{"_index":3016,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.getmembers",{"_index":2473,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.getuser",{"_index":2724,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.getuserbyid(userid).pipe(map((user",{"_index":1110,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.getuserformessagebyid(activeuserid",{"_index":1209,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.id",{"_index":2705,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.id.push(data.id",{"_index":2723,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.initimessageonsubmit(updateddata",{"_index":1379,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.initthreadmessageonsubmit(updateddata",{"_index":1378,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.input",{"_index":1022,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.intervalid",{"_index":1518,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["this.introplayed",{"_index":2311,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.isclickinsidementionpicker(event.target",{"_index":2551,"title":{},"body":{"injectables/MentionService.html":{}}}],["this.isclickontogglebutton(event.target",{"_index":2552,"title":{},"body":{"injectables/MentionService.html":{}}}],["this.islegalpage",{"_index":1590,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.isthread",{"_index":1360,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.isthreadmessage",{"_index":2792,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["this.items",{"_index":559,"title":{},"body":{"components/AppComponent.html":{}}}],["this.legalpage",{"_index":1594,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.listenforoutsideclicks",{"_index":2549,"title":{},"body":{"injectables/MentionService.html":{}}}],["this.listentouserchanges",{"_index":1073,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.loadchannelsrealtime",{"_index":2607,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["this.loading",{"_index":2609,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["this.loadingstatus",{"_index":2433,"title":{},"body":{"components/MainComponent.html":{}}}],["this.logindata.password",{"_index":3178,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.loginerror",{"_index":3175,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.loginerror.set('invalid",{"_index":1197,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.loginerror.set('unexpected",{"_index":1198,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.loginpage",{"_index":2317,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.mailadressresults",{"_index":1018,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.member",{"_index":2725,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.member?.userid",{"_index":2733,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.memberids.splice(0",{"_index":162,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["this.members.length",{"_index":169,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["this.members.push(data",{"_index":2482,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.members.splice(0",{"_index":161,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["this.membersarray",{"_index":458,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.mentionservice.clearinput('messagebox",{"_index":1040,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.mentionservice.disselect(member.id",{"_index":2487,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.mentionservice.inserttextandfocus(target",{"_index":1023,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.mentionservice.mentionsomeone(member",{"_index":2486,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.mentionservice.mentionsuser.foreach((user:any",{"_index":2489,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.mentionuser(bulider",{"_index":2560,"title":{},"body":{"injectables/MentionService.html":{}}}],["this.menuopened",{"_index":697,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{}}}],["this.menustate",{"_index":696,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["this.menustatesubject.asobservable",{"_index":3239,"title":{},"body":{"injectables/StateService.html":{}}}],["this.menustatesubject.next('out",{"_index":3249,"title":{},"body":{"injectables/StateService.html":{}}}],["this.menustatesubject.next(state",{"_index":3247,"title":{},"body":{"injectables/StateService.html":{}}}],["this.messagedelete",{"_index":1362,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.messageform",{"_index":1364,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["this.messageform.reset",{"_index":1387,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.messageform.setvalue",{"_index":1371,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["this.messageform.valid",{"_index":1374,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.messageid",{"_index":2791,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["this.messageresults",{"_index":3019,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.messageresults$.subscribe((results",{"_index":3018,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.messageresults.length",{"_index":3020,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.messageresultssubject.asobservable",{"_index":2996,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.messageresultssubject.next",{"_index":3039,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.messageresultssubject.next(filteredmessages",{"_index":3043,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.messagesservice.updatemessage(updateddata.docid",{"_index":1385,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["this.messagesservice.updatethreadmessage",{"_index":1392,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["this.mobile",{"_index":693,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["this.mobiledialog",{"_index":3450,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["this.name",{"_index":3425,"title":{},"body":{"classes/UserModel.html":{}}}],["this.oninputchange",{"_index":1015,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.onresize",{"_index":1589,"title":{},"body":{"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["this.onsignup",{"_index":916,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.onsubmit",{"_index":1421,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.oobcode",{"_index":2893,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.passwordmatch",{"_index":2908,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.passwords",{"_index":2905,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.passwords.password",{"_index":2902,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.path}${this.profilespics[this.activepic",{"_index":912,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.photourl",{"_index":3427,"title":{},"body":{"classes/UserModel.html":{}}}],["this.privatechannelresults",{"_index":1012,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.privatechannelresultssubject.asobservable",{"_index":3001,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.privatechannelresultssubject.next(filteredchannels",{"_index":3060,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.privatenoteref",{"_index":3433,"title":{},"body":{"classes/UserModel.html":{}}}],["this.profiledatachanged.set(false",{"_index":3404,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profiledatachanged.set(true",{"_index":3403,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profiledialog",{"_index":3386,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profiledialogedit",{"_index":3387,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform",{"_index":3373,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform.disable",{"_index":3409,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform.enable",{"_index":3410,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform.get('userinputemail')?.value",{"_index":3402,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform.get('userinputname')?.value",{"_index":3401,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform.reset",{"_index":3388,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform.valid",{"_index":3392,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform.value.userinputemail",{"_index":3395,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.profileform.value.userinputname",{"_index":3394,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.provider",{"_index":3435,"title":{},"body":{"classes/UserModel.html":{}}}],["this.reactionadded.emit",{"_index":2790,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["this.redirecttoboard",{"_index":3179,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.renderer",{"_index":2547,"title":{},"body":{"injectables/MentionService.html":{}}}],["this.renderer.listen(this.document",{"_index":2550,"title":{},"body":{"injectables/MentionService.html":{}}}],["this.route.queryparams.subscribe((params",{"_index":2892,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.route.snapshot.queryparams['returnurl",{"_index":3189,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.router.navigatebyurl",{"_index":1517,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignUpComponent.html":{}}}],["this.router.navigatebyurl('/board",{"_index":565,"title":{},"body":{"components/AppComponent.html":{},"components/SignInComponent.html":{}}}],["this.router.navigatebyurl(returnurl",{"_index":3190,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.router.routerstate.snapshot.url",{"_index":2316,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.router.url",{"_index":564,"title":{},"body":{"components/AppComponent.html":{},"components/HeaderComponent.html":{}}}],["this.searchchannelsmessages",{"_index":3017,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.searchfor",{"_index":1031,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.channelresults$.subscribe((results",{"_index":1009,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.loadchannels",{"_index":1006,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.loadusers(this.userid",{"_index":1005,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.privatechannelresults$.subscribe((results",{"_index":1011,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.searchchannels",{"_index":1033,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.searchchannels(this.searchtext.slice(1),this.userid,'channel",{"_index":1035,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.searchusers",{"_index":1036,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.searchusers(this.searchtext",{"_index":1038,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.searchusers(this.searchtext.slice(1",{"_index":1037,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchservice.userresults$.subscribe((results",{"_index":1007,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchspecificchannels(searchtext",{"_index":3058,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.searchstringsubject.asobservable",{"_index":3115,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.searchstringsubject.next(value",{"_index":3131,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.searchstringsubject.value",{"_index":3138,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.searchtext",{"_index":1014,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchtext.length",{"_index":1032,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.searchtext[0",{"_index":1027,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.sendmessage",{"_index":2751,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.setsearchstring",{"_index":3139,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.sharedservice.deletemessage(deletemessage",{"_index":1406,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.sharedservice.deletethreadmessage(parentmessageid,docid",{"_index":1411,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["this.sharedservice.searchstring$.subscribe((value",{"_index":1013,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.sharedservice.setchannelidstring(channelid",{"_index":1026,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.sharedservice.setsearchstring(target",{"_index":1020,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.sharedservice.settargetstring('tochannel",{"_index":1025,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.sharedservice.settargetstring('touser",{"_index":1019,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.sharedservice.setuseridstring(userid",{"_index":1021,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.sharedservice.sharedvariable$.subscribe",{"_index":772,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.sharedservice.updatevariable('createmessagepressed",{"_index":2657,"title":{},"body":{"components/MenuComponent.html":{}}}],["this.sharedservice.updatevariable('false",{"_index":2617,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["this.sharedvariable",{"_index":773,"title":{},"body":{"components/ChatComponent.html":{}}}],["this.sharedvariable.asobservable",{"_index":3120,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.sharedvariable.next(newvalue",{"_index":3130,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.showsuccess",{"_index":910,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.showtoastmessage('nachricht",{"_index":1388,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["this.smallwindow",{"_index":694,"title":{},"body":{"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["this.startchannelsearch",{"_index":1028,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.startdefaultsearch",{"_index":1030,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.starttimer",{"_index":1529,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["this.startuserssearch",{"_index":1029,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.state",{"_index":2481,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.stateservice.setmenustate(\"out",{"_index":2658,"title":{},"body":{"components/MenuComponent.html":{}}}],["this.stateservice.setmenustate(this.menustate",{"_index":1591,"title":{},"body":{"components/HeaderComponent.html":{}}}],["this.stateservice.setthreadchatstate('out",{"_index":702,"title":{},"body":{"components/BuilderComponent.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["this.stateservice.threadchatstate$.subscribe((state",{"_index":698,"title":{},"body":{"components/BuilderComponent.html":{}}}],["this.status",{"_index":2553,"title":{},"body":{"injectables/MentionService.html":{},"classes/UserModel.html":{}}}],["this.subscriptions.add",{"_index":414,"title":{},"body":{"components/AddchatComponent.html":{}}}],["this.successmessage",{"_index":2903,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.switchtoexistingchannel(existingchannels",{"_index":2741,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.targetstringsubject.asobservable",{"_index":3122,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.targetstringsubject.next(value",{"_index":3134,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.targetstringsubject.value",{"_index":3137,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.threadchatopened",{"_index":700,"title":{},"body":{"components/BuilderComponent.html":{}}}],["this.threadchatstate",{"_index":699,"title":{},"body":{"components/BuilderComponent.html":{}}}],["this.threadchatstatesubject.asobservable",{"_index":3243,"title":{},"body":{"injectables/StateService.html":{}}}],["this.threadchatstatesubject.next('out",{"_index":3250,"title":{},"body":{"injectables/StateService.html":{}}}],["this.threadchatstatesubject.next(state",{"_index":3248,"title":{},"body":{"injectables/StateService.html":{}}}],["this.threadmessageresultssubject.asobservable",{"_index":3005,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.threadmessageresultssubject.next",{"_index":3044,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.threadmessageresultssubject.next(filteredmessages",{"_index":3046,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.threadwasopen",{"_index":701,"title":{},"body":{"components/BuilderComponent.html":{}}}],["this.toastmessageservice.showtoastsignal('email",{"_index":1525,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["this.toastmessageservice.showtoastsignal('profil",{"_index":3398,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.toastmessageservice.showtoastsignal(text",{"_index":1413,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["this.toastmessageservice.toastsignal",{"_index":1533,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/ToastMessageComponent.html":{}}}],["this.toastsignal.set",{"_index":3274,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["this.toastsignal.set(message",{"_index":3273,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["this.toastsubject.asobservable",{"_index":3267,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["this.toastsubject.next",{"_index":3270,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["this.togglethreadchat",{"_index":703,"title":{},"body":{"components/BuilderComponent.html":{}}}],["this.turnaround",{"_index":569,"title":{},"body":{"components/AppComponent.html":{}}}],["this.unsubscribefn",{"_index":2608,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["this.updatedatainfirestore(userid",{"_index":1188,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.user",{"_index":2559,"title":{},"body":{"injectables/MentionService.html":{}}}],["this.usercache.get(user.userid)!.next(user",{"_index":1084,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.usercache.get(userid)!.asobservable",{"_index":1090,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.usercache.has(user.userid",{"_index":1083,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.usercache.has(userid",{"_index":1089,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.usercache.set(user.userid",{"_index":1085,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.usercache.set(userid",{"_index":1093,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.userdata",{"_index":3393,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.userdata.name",{"_index":915,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.userdata.password",{"_index":914,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.userdata.photourl",{"_index":911,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["this.userdata?.email",{"_index":3380,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.userdata?.name",{"_index":3375,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.userdata?.provider",{"_index":3408,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["this.userdialog$.datachangeallowedcheck",{"_index":1246,"title":{},"body":{"components/DialogComponent.html":{}}}],["this.userdialog$.openprofile",{"_index":1247,"title":{},"body":{"components/DialogComponent.html":{}}}],["this.userdialog.opendialog(event",{"_index":3451,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["this.userid",{"_index":1034,"title":{},"body":{"components/CreatemessageComponent.html":{},"classes/UserModel.html":{}}}],["this.useridsubject.asobservable",{"_index":3125,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.useridsubject.next(value",{"_index":3132,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.useridsubject.value",{"_index":3135,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.userresults",{"_index":1008,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["this.userresultssubject.asobservable",{"_index":3008,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.userresultssubject.next(filteredusers",{"_index":3053,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.userresultssubject.next(this.allusers",{"_index":3048,"title":{},"body":{"injectables/SearchService.html":{}}}],["this.users",{"_index":2727,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.userservice",{"_index":1522,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["this.userservice.confirmpasswordreset(this.oobcode",{"_index":2901,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["this.userservice.getuserbyid(id).pipe(map(user",{"_index":2796,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["this.userservice.getuserbyid(member).subscribe(user",{"_index":2476,"title":{},"body":{"components/MentionComponent.html":{}}}],["this.userservice.getusername(userid",{"_index":2812,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["this.userservice.getusernamesbyids(this.id",{"_index":2726,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["this.userservice.loginerror",{"_index":3176,"title":{},"body":{"components/SignInComponent.html":{}}}],["this.userssubject.asobservable",{"_index":1070,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["this.userssubject.next(users",{"_index":1087,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["thread",{"_index":264,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["threadchat",{"_index":262,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["threadchat__chatbox",{"_index":857,"title":{},"body":{"components/ChatComponent.html":{}}}],["threadchat__header",{"_index":794,"title":{},"body":{"components/ChatComponent.html":{}}}],["threadchat__item1:has(.message:last",{"_index":786,"title":{},"body":{"components/ChatComponent.html":{}}}],["threadchat__messagebox",{"_index":861,"title":{},"body":{"components/ChatComponent.html":{}}}],["threadchatheadercomponent",{"_index":261,"title":{"components/ThreadchatHeaderComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["threadchatopened",{"_index":621,"title":{},"body":{"components/BuilderComponent.html":{}}}],["threadchatstate",{"_index":622,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"injectables/StateService.html":{}}}],["threadchatstatesubject",{"_index":3227,"title":{},"body":{"injectables/StateService.html":{}}}],["threaddocid",{"_index":3092,"title":{},"body":{"injectables/SharedService.html":{}}}],["threadmessage",{"_index":1064,"title":{"interfaces/ThreadMessage.html":{}},"body":{"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"interfaces/ThreadMessage.html":{},"coverage.html":{}}}],["threadmessageref",{"_index":3144,"title":{},"body":{"injectables/SharedService.html":{}}}],["threadmessageresults",{"_index":2946,"title":{},"body":{"injectables/SearchService.html":{}}}],["threadmessageresultssubject",{"_index":2947,"title":{},"body":{"injectables/SearchService.html":{}}}],["threadmessages",{"_index":2681,"title":{},"body":{"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{}}}],["threadmessagescomponent",{"_index":263,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["threadmessagesref",{"_index":3140,"title":{},"body":{"injectables/SharedService.html":{}}}],["threadwasopen",{"_index":623,"title":{},"body":{"components/BuilderComponent.html":{}}}],["through",{"_index":94,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"interfaces/CustomUser.html":{},"components/MentionComponent.html":{}}}],["throw",{"_index":1200,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/SharedService.html":{}}}],["time",{"_index":831,"title":{},"body":{"components/ChatComponent.html":{},"interfaces/CustomUser.html":{},"components/MenuChannelsComponent.html":{}}}],["timer",{"_index":1504,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["timestamp",{"_index":1214,"title":{},"body":{"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"pipes/RelativeDatePipe.html":{},"injectables/SharedService.html":{},"interfaces/ThreadMessage.html":{},"pipes/TimestampToDatePipe.html":{}}}],["timestamp.seconds",{"_index":3147,"title":{},"body":{"injectables/SharedService.html":{}}}],["timestamptodate",{"_index":2840,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["timestamptodatepipe",{"_index":2841,"title":{"pipes/TimestampToDatePipe.html":{}},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"coverage.html":{}}}],["titel",{"_index":2634,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["title",{"_index":513,"title":{},"body":{"components/AppComponent.html":{}}}],["tls",{"_index":2099,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["tmg",{"_index":1603,"title":{},"body":{"components/ImprintComponent.html":{}}}],["toast",{"_index":1302,"title":{},"body":{"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"injectables/SaveEditMessageService.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{}}}],["toast_msg",{"_index":3283,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["toastmessage",{"_index":1493,"title":{"interfaces/ToastMessage.html":{}},"body":{"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"coverage.html":{}}}],["toastmessage'},{'name",{"_index":266,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["toastmessage.component.html",{"_index":3278,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["toastmessage.component.scss",{"_index":3277,"title":{},"body":{"components/ToastMessageComponent.html":{}}}],["toastmessage.service",{"_index":2926,"title":{},"body":{"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["toastmessagecomponent",{"_index":265,"title":{"components/ToastMessageComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["toastmessageservice",{"_index":1294,"title":{"injectables/ToastMessageService.html":{}},"body":{"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"injectables/SaveEditMessageService.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"coverage.html":{}}}],["toastsignal",{"_index":3268,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["toastsubject",{"_index":3266,"title":{},"body":{"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{}}}],["today",{"_index":2829,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["today.getdate",{"_index":2858,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["today.getfullyear",{"_index":2862,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["today.getmonth",{"_index":2860,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["toggle",{"_index":2527,"title":{},"body":{"injectables/MentionService.html":{}}}],["toggleallmembers",{"_index":296,"title":{},"body":{"components/AddchatComponent.html":{}}}],["toggleallmembers(addall",{"_index":386,"title":{},"body":{"components/AddchatComponent.html":{}}}],["togglebutton",{"_index":733,"title":{},"body":{"components/BuilderComponent.html":{}}}],["togglemenu",{"_index":627,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{}}}],["toggles",{"_index":388,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["togglethreadchat",{"_index":628,"title":{},"body":{"components/BuilderComponent.html":{}}}],["toggling",{"_index":1579,"title":{},"body":{"components/HeaderComponent.html":{}}}],["token",{"_index":3347,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["tokens",{"_index":514,"title":{},"body":{"components/AppComponent.html":{}}}],["tools",{"_index":1757,"title":{},"body":{"components/LegalnoticeComponent.html":{},"dependencies.html":{}}}],["top",{"_index":745,"title":{},"body":{"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{}}}],["top:17px",{"_index":799,"title":{},"body":{"components/ChatComponent.html":{}}}],["tostate",{"_index":654,"title":{},"body":{"components/BuilderComponent.html":{}}}],["track",{"_index":481,"title":{},"body":{"components/AddchatComponent.html":{},"injectables/EmojiStorageService.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["trackbyreaction",{"_index":2762,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["trackbyreaction(index",{"_index":2784,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["transform",{"_index":2333,"title":{},"body":{"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"miscellaneous/variables.html":{}}}],["transform(value",{"_index":2822,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["transition",{"_index":716,"title":{},"body":{"components/BuilderComponent.html":{},"components/LoginComponent.html":{}}}],["transition('in",{"_index":3631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transition('out",{"_index":3633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transitioning",{"_index":3330,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["transitions",{"_index":3353,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["translate",{"_index":2334,"title":{},"body":{"components/LoginComponent.html":{}}}],["translatex",{"_index":2348,"title":{},"body":{"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{},"miscellaneous/variables.html":{}}}],["translatex(0",{"_index":3292,"title":{},"body":{"components/ToastMessageComponent.html":{},"miscellaneous/variables.html":{}}}],["translatex(0)',overflow",{"_index":3626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translatex(100",{"_index":3291,"title":{},"body":{"components/ToastMessageComponent.html":{},"miscellaneous/variables.html":{}}}],["translatex(100%)',overflow",{"_index":3635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translatex(35",{"_index":2344,"title":{},"body":{"components/LoginComponent.html":{}}}],["translatex({{width}})',width",{"_index":3637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transparent",{"_index":2627,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["tree",{"_index":7,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["trigger('slideanimationleft",{"_index":3621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigger('slideanimationright",{"_index":3634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["triggered",{"_index":3323,"title":{},"body":{"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["triggers",{"_index":987,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["true",{"_index":19,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":2738,"title":{},"body":{"components/ProfileviewComponent.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{}}}],["tslib",{"_index":3573,"title":{},"body":{"dependencies.html":{}}}],["turnaround",{"_index":515,"title":{},"body":{"components/AppComponent.html":{}}}],["turnaround:boolean",{"_index":555,"title":{},"body":{"components/AppComponent.html":{}}}],["two",{"_index":1455,"title":{},"body":{"injectables/EmojiStorageService.html":{}}}],["type",{"_index":68,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"interfaces/Channel.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"interfaces/Message.html":{},"components/ProfileviewComponent.html":{},"interfaces/Reaction.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"interfaces/ThreadMessage.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"interfaces/ToastMessage.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":2848,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["uhrzeit",{"_index":1694,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ui",{"_index":3331,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["uid",{"_index":168,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["um",{"_index":1677,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["umfasst",{"_index":1829,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["umkehrung",{"_index":790,"title":{},"body":{"components/ChatComponent.html":{}}}],["umst&auml;nden",{"_index":1744,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["umständen",{"_index":2208,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unbekannt",{"_index":1108,"title":{},"body":{"interfaces/CustomUser.html":{},"components/MentionComponent.html":{}}}],["unber&uuml;hrt",{"_index":1990,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unberührt",{"_index":2248,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unbeschadet",{"_index":2045,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["und",{"_index":1268,"title":{},"body":{"components/DialogComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ReactionsComponent.html":{},"components/SignUpComponent.html":{}}}],["undefined",{"_index":658,"title":{},"body":{"components/BuilderComponent.html":{},"interfaces/CustomUser.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{},"injectables/UserDialogService.html":{}}}],["unentgeltlich",{"_index":1729,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unentgeltliche",{"_index":2063,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["ungültig",{"_index":436,"title":{},"body":{"components/AddchatComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{}}}],["ungültiger",{"_index":2896,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["ungültiges",{"_index":2836,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["union",{"_index":2096,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unique",{"_index":1127,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ReactionsComponent.html":{}}}],["unix",{"_index":2828,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["unknown",{"_index":1210,"title":{},"body":{"interfaces/CustomUser.html":{},"injectables/SearchService.html":{}}}],["unrechtm&auml;&szlig;ig",{"_index":2074,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unrechtmäßig",{"_index":2268,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uns",{"_index":1671,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unser(e",{"_index":1831,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unsere",{"_index":1687,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unserem",{"_index":2159,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unseren",{"_index":1795,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unserer",{"_index":1644,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unseres",{"_index":1811,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["unset",{"_index":743,"title":{},"body":{"components/BuilderComponent.html":{},"components/LoginComponent.html":{}}}],["unsubscribefn",{"_index":2570,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["unsubscribes",{"_index":2581,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["unsubscribing",{"_index":2587,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["unter",{"_index":1645,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["up",{"_index":120,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/SignUpComponent.html":{}}}],["up'},{'name",{"_index":260,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["up.component.html",{"_index":3202,"title":{},"body":{"components/SignUpComponent.html":{}}}],["up.component.scss",{"_index":3203,"title":{},"body":{"components/SignUpComponent.html":{}}}],["up.component.ts",{"_index":3201,"title":{},"body":{"components/SignUpComponent.html":{},"coverage.html":{}}}],["up.component.ts:16",{"_index":3210,"title":{},"body":{"components/SignUpComponent.html":{}}}],["up.component.ts:17",{"_index":3205,"title":{},"body":{"components/SignUpComponent.html":{}}}],["up.component.ts:29",{"_index":3206,"title":{},"body":{"components/SignUpComponent.html":{}}}],["up.component.ts:37",{"_index":3209,"title":{},"body":{"components/SignUpComponent.html":{}}}],["up.component.ts:46",{"_index":3207,"title":{},"body":{"components/SignUpComponent.html":{}}}],["up/choose",{"_index":863,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"coverage.html":{}}}],["up/sign",{"_index":3200,"title":{},"body":{"components/SignUpComponent.html":{},"coverage.html":{}}}],["update",{"_index":1160,"title":{},"body":{"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["updated",{"_index":648,"title":{},"body":{"components/BuilderComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["updatedata",{"_index":288,"title":{},"body":{"components/AddchatComponent.html":{}}}],["updatedatainfirestore(userid",{"_index":1163,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updateddata",{"_index":1161,"title":{},"body":{"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["updateddata.createdby",{"_index":1386,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{}}}],["updateddata.docid",{"_index":1384,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["updateddata.email",{"_index":1189,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updateddata.name",{"_index":1185,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updatedoc",{"_index":1052,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updatedoc(userdocref",{"_index":1166,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updateemail",{"_index":1061,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updateemail(user",{"_index":1190,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updatepassword",{"_index":1059,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updatepassword(currentuser",{"_index":1151,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updateprofile",{"_index":1062,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updateprofile(user",{"_index":1186,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updates",{"_index":375,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"components/LoginComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/ThreadchatHeaderComponent.html":{}}}],["updateuserdata",{"_index":3362,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["updateuserdataindatabase(user",{"_index":1183,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updateuserpassword(newpassword",{"_index":1148,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["updatevariable",{"_index":3079,"title":{},"body":{"injectables/SharedService.html":{}}}],["updatevariable(newvalue",{"_index":3109,"title":{},"body":{"injectables/SharedService.html":{}}}],["upon",{"_index":346,"title":{},"body":{"components/AddchatComponent.html":{}}}],["url",{"_index":1106,"title":{},"body":{"interfaces/CustomUser.html":{},"components/HeaderComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["use",{"_index":584,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["used",{"_index":308,"title":{},"body":{"components/AddchatComponent.html":{},"components/BuilderComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/EmojiStorageService.html":{},"components/MentionComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"components/ThreadchatHeaderComponent.html":{},"injectables/UserDialogService.html":{}}}],["user",{"_index":10,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["user's",{"_index":897,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"injectables/UserDialogService.html":{}}}],["user,userid",{"_index":1184,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["user.delete",{"_index":1205,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["user.email.tolowercase().includes(searchtext.tolowercase",{"_index":3052,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.id",{"_index":2490,"title":{},"body":{"components/MentionComponent.html":{}}}],["user.name",{"_index":420,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/ReactionsComponent.html":{}}}],["user.name.tolowercase().includes(searchtext.tolowercase",{"_index":3051,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.photourl",{"_index":421,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/MentionComponent.html":{}}}],["user.provider",{"_index":3034,"title":{},"body":{"injectables/SearchService.html":{}}}],["user.status",{"_index":1114,"title":{},"body":{"interfaces/CustomUser.html":{},"components/MentionComponent.html":{}}}],["user.userid",{"_index":419,"title":{},"body":{"components/AddchatComponent.html":{},"components/MentionComponent.html":{},"injectables/SearchService.html":{}}}],["user:string",{"_index":2545,"title":{},"body":{"injectables/MentionService.html":{}}}],["user[0].email",{"_index":2731,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["user[0].name",{"_index":2728,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["user[0].photourl",{"_index":2730,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["user[0].status",{"_index":2732,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["user[0].userid",{"_index":2729,"title":{},"body":{"components/ProfileviewComponent.html":{}}}],["userarray",{"_index":34,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["userarray:any",{"_index":154,"title":{},"body":{"components/AddUserToChannelComponent.html":{}}}],["usercache",{"_index":1068,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["userdata",{"_index":876,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"interfaces/CustomUser.html":{},"components/ForgetPasswordComponent.html":{},"components/SignUpComponent.html":{},"injectables/UserDialogService.html":{}}}],["userdata.name",{"_index":919,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["userdialog",{"_index":1226,"title":{},"body":{"components/DialogComponent.html":{},"components/UsermenuComponent.html":{}}}],["userdialog$.dialog",{"_index":1248,"title":{},"body":{"components/DialogComponent.html":{}}}],["userdialog$.profiledialog",{"_index":1253,"title":{},"body":{"components/DialogComponent.html":{}}}],["userdialog$.profiledialogedit",{"_index":1260,"title":{},"body":{"components/DialogComponent.html":{}}}],["userdialog$.userdata?.email",{"_index":1259,"title":{},"body":{"components/DialogComponent.html":{}}}],["userdialog$.userdata?.name",{"_index":1255,"title":{},"body":{"components/DialogComponent.html":{}}}],["userdialog$.userdata?.status",{"_index":1257,"title":{},"body":{"components/DialogComponent.html":{}}}],["userdialog.dialog",{"_index":3453,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["userdialog.profiledialog",{"_index":3454,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["userdialog.profiledialogedit",{"_index":3455,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["userdialog.userdata?.name",{"_index":3452,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["userdialogservice",{"_index":1231,"title":{"injectables/UserDialogService.html":{}},"body":{"components/DialogComponent.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["userdoc",{"_index":1169,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["userdoc.data",{"_index":1172,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["userdoc.exists",{"_index":1171,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["userdocref",{"_index":1164,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["userid",{"_index":407,"title":{},"body":{"components/AddchatComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"classes/UserModel.html":{}}}],["useridisvalid",{"_index":3615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userids",{"_index":1119,"title":{},"body":{"interfaces/CustomUser.html":{},"interfaces/Message.html":{},"interfaces/Reaction.html":{},"interfaces/ThreadMessage.html":{}}}],["useridsubject",{"_index":3067,"title":{},"body":{"injectables/SharedService.html":{}}}],["userinputemail",{"_index":3379,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["userinputname",{"_index":3374,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["usermenu",{"_index":268,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["usermenu.component.html",{"_index":3438,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["usermenu.component.scss",{"_index":3439,"title":{},"body":{"components/UsermenuComponent.html":{}}}],["usermenu/usermenu.component",{"_index":1587,"title":{},"body":{"components/HeaderComponent.html":{}}}],["usermenucomponent",{"_index":267,"title":{"components/UsermenuComponent.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{},"coverage.html":{}}}],["usermodel",{"_index":148,"title":{"classes/UserModel.html":{}},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"interfaces/CustomUser.html":{},"injectables/SearchService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"coverage.html":{}}}],["usermodel(null",{"_index":550,"title":{},"body":{"components/AppComponent.html":{}}}],["username",{"_index":1129,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["usernames.filter((_",{"_index":2800,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["usernames.length",{"_index":2809,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["usernames[0",{"_index":2810,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["usernames[1",{"_index":2811,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["userobservables",{"_index":2794,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["userresults",{"_index":932,"title":{},"body":{"components/CreatemessageComponent.html":{},"injectables/SearchService.html":{}}}],["userresults.length",{"_index":1043,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["userresultssubject",{"_index":2948,"title":{},"body":{"injectables/SearchService.html":{}}}],["users",{"_index":358,"title":{},"body":{"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"injectables/MentionService.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"injectables/SearchService.html":{}}}],["users.filter",{"_index":3033,"title":{},"body":{"injectables/SearchService.html":{}}}],["users.foreach((user",{"_index":1082,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["users.map(user",{"_index":418,"title":{},"body":{"components/AddchatComponent.html":{}}}],["users.push(user",{"_index":1126,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["users/${user.uid",{"_index":1204,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["users/${userid",{"_index":1095,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["userscollection",{"_index":557,"title":{},"body":{"components/AppComponent.html":{},"interfaces/CustomUser.html":{}}}],["userservice",{"_index":1067,"title":{},"body":{"interfaces/CustomUser.html":{},"components/ForgetPasswordComponent.html":{},"components/MentionComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice.checkuserid(localuserid.userid",{"_index":3616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userssubject",{"_index":1069,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["usersubject",{"_index":1091,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["usersubject.asobservable",{"_index":1101,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["usersubject.next(userdata",{"_index":1099,"title":{},"body":{"interfaces/CustomUser.html":{}}}],["uses",{"_index":95,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"injectables/SearchService.html":{},"injectables/UserDialogService.html":{}}}],["usevalue",{"_index":3607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":334,"title":{},"body":{"components/AddchatComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/SignInComponent.html":{}}}],["uuml;ber",{"_index":1712,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;berblick",{"_index":1625,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;bermitteln",{"_index":2119,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;bermittelt",{"_index":2129,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;bermittelten",{"_index":1716,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;bermittlung",{"_index":1963,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;berpr&uuml;fen",{"_index":2071,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;bersandten",{"_index":2162,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;bertragung",{"_index":1933,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;berwiegen",{"_index":2019,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["uuml;brigen",{"_index":2158,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["v",{"_index":2213,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["v.&nbsp;a",{"_index":1781,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["valid",{"_index":332,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["validators",{"_index":2605,"title":{},"body":{"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["validators,reactiveformsmodule",{"_index":405,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{}}}],["validators.maxlength(25",{"_index":3378,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["validators.pattern('^[a",{"_index":3376,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["validators.required",{"_index":411,"title":{},"body":{"components/AddchatComponent.html":{},"components/EditmessageComponent.html":{},"components/MenuChannelsComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/UserDialogService.html":{}}}],["value",{"_index":77,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"pipes/RelativeDatePipe.html":{},"components/ResetPasswordComponent.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"pipes/TimestampToDatePipe.html":{},"components/ToastMessageComponent.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"classes/UserModel.html":{},"components/UsermenuComponent.html":{},"miscellaneous/variables.html":{}}}],["value.seconds",{"_index":2855,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["value.todate",{"_index":2847,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["values",{"_index":963,"title":{},"body":{"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/EditmessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["var",{"_index":188,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/ImprintComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/LogoComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"components/ThreadchatHeaderComponent.html":{},"components/ToastMessageComponent.html":{},"components/UsermenuComponent.html":{}}}],["variable",{"_index":1506,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/SharedService.html":{},"coverage.html":{}}}],["variables",{"_index":3585,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":946,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["verantwortlich",{"_index":1652,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verantwortliche",{"_index":1887,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verantwortlichen",{"_index":1664,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verarbeiten",{"_index":1835,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verarbeitet",{"_index":1722,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verarbeitung",{"_index":1746,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verbindung",{"_index":2030,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verbleiben",{"_index":1909,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verbundenen",{"_index":2182,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vergessen",{"_index":3197,"title":{},"body":{"components/SignInComponent.html":{}}}],["verhalten",{"_index":1760,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verlangen",{"_index":1739,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verpflichtet",{"_index":1966,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verpflichtung",{"_index":1942,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["versa",{"_index":1578,"title":{},"body":{"components/HeaderComponent.html":{}}}],["verschiedene",{"_index":1869,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verschiedenen",{"_index":1957,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verschl&uuml;sselte",{"_index":2107,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verschl&uuml;sselung",{"_index":2100,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verschlüsselte",{"_index":2277,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verschlüsselung",{"_index":2275,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["version",{"_index":3582,"title":{},"body":{"properties.html":{}}}],["verst&ouml;&szlig;en",{"_index":2035,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["versto&szlig;es",{"_index":2043,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verstoßes",{"_index":2261,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verstößen",{"_index":2258,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["versuchen",{"_index":3182,"title":{},"body":{"components/SignInComponent.html":{}}}],["verteidigung",{"_index":2023,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertical",{"_index":840,"title":{},"body":{"components/ChatComponent.html":{}}}],["vertically",{"_index":687,"title":{},"body":{"components/BuilderComponent.html":{},"components/MenuHeaderComponent.html":{}}}],["vertr&auml;ge",{"_index":1713,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertrag",{"_index":1979,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertrags",{"_index":1976,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertragsangebote",{"_index":1718,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertragsdaten",{"_index":1787,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertragserf&uuml;llung",{"_index":1793,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertragserfüllung",{"_index":2214,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertraulich",{"_index":1864,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vertraulicher",{"_index":2103,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verträge",{"_index":2203,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verwaltungsrechtlicher",{"_index":2047,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verwendest",{"_index":3196,"title":{},"body":{"components/SignInComponent.html":{}}}],["verwendet",{"_index":1710,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["verwendetes",{"_index":2132,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["via",{"_index":1936,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vice",{"_index":1577,"title":{},"body":{"components/HeaderComponent.html":{}}}],["viele",{"_index":1982,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["view",{"_index":86,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/UserDialogService.html":{}}}],["visible",{"_index":2368,"title":{},"body":{"components/LoginComponent.html":{}}}],["void",{"_index":90,"title":{},"body":{"components/AddUserToChannelComponent.html":{},"components/AddchatComponent.html":{},"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/ChooseAvatarComponent.html":{},"components/CreatemessageComponent.html":{},"interfaces/CustomUser.html":{},"components/DialogComponent.html":{},"components/EditmessageComponent.html":{},"components/EmojiPickerComponent.html":{},"injectables/EmojiStorageService.html":{},"components/ForgetPasswordComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MainComponent.html":{},"components/MentionComponent.html":{},"injectables/MentionService.html":{},"components/MenuChannelsComponent.html":{},"components/MenuComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ProfileviewComponent.html":{},"components/ReactionsComponent.html":{},"components/ResetPasswordComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SearchService.html":{},"injectables/SharedService.html":{},"components/SignInComponent.html":{},"components/SignUpComponent.html":{},"injectables/StateService.html":{},"components/ThreadchatHeaderComponent.html":{},"interfaces/ToastMessage.html":{},"injectables/ToastMessageService.html":{},"injectables/UserDialogService.html":{},"components/UsermenuComponent.html":{}}}],["vollst&auml;ndig",{"_index":2185,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vollständig",{"_index":2289,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vollständiger",{"_index":1262,"title":{},"body":{"components/DialogComponent.html":{}}}],["vom",{"_index":1989,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["von",{"_index":477,"title":{},"body":{"components/AddchatComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["vor",{"_index":1267,"title":{},"body":{"components/DialogComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["vorgenommen",{"_index":2082,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vorhanden",{"_index":793,"title":{},"body":{"components/ChatComponent.html":{}}}],["vorliegende",{"_index":1870,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["vorname",{"_index":3217,"title":{},"body":{"components/SignUpComponent.html":{}}}],["vorvertraglicher",{"_index":1939,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["want",{"_index":1424,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["warning",{"_index":2395,"title":{},"body":{"components/LoginComponent.html":{}}}],["warntext",{"_index":2872,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["wasmobile",{"_index":692,"title":{},"body":{"components/BuilderComponent.html":{}}}],["webkit",{"_index":2370,"title":{},"body":{"components/LoginComponent.html":{}}}],["website",{"_index":1632,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["websitebetreiber",{"_index":1658,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["websitezugriffe",{"_index":1789,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["wechselt",{"_index":2114,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["weekday",{"_index":2832,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["weight",{"_index":828,"title":{},"body":{"components/ChatComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/ToastMessageComponent.html":{}}}],["weisen",{"_index":1874,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["weisungen",{"_index":1840,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["weiter",{"_index":923,"title":{},"body":{"components/ChooseAvatarComponent.html":{},"components/LegalnoticeComponent.html":{},"components/SignUpComponent.html":{}}}],["weitere",{"_index":2807,"title":{},"body":{"components/ReactionsComponent.html":{}}}],["weiteren",{"_index":1747,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["weitergabe",{"_index":1967,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["weitergeleitet",{"_index":1559,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["welche",{"_index":1723,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["welchem",{"_index":1873,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["wenden",{"_index":1756,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["wenn",{"_index":791,"title":{},"body":{"components/ChatComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["wer",{"_index":1651,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["werbung",{"_index":2028,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["werden",{"_index":430,"title":{},"body":{"components/AddchatComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ProfileviewComponent.html":{}}}],["wessen",{"_index":2086,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["whenever",{"_index":763,"title":{},"body":{"components/ChatComponent.html":{}}}],["whether",{"_index":369,"title":{},"body":{"components/AddchatComponent.html":{},"components/MenutogglerComponent.html":{},"injectables/SharedService.html":{},"injectables/UserDialogService.html":{}}}],["white",{"_index":2352,"title":{},"body":{"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{}}}],["whose",{"_index":380,"title":{},"body":{"components/AddchatComponent.html":{}}}],["wichtigen",{"_index":2093,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["widerruf",{"_index":1981,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["widerrufbar",{"_index":1830,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["widerrufen",{"_index":1742,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["widersprechen",{"_index":2031,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["widerspruch",{"_index":2001,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["widerspruchsrecht",{"_index":1991,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["width",{"_index":529,"title":{},"body":{"components/AppComponent.html":{},"components/BuilderComponent.html":{},"components/ChatComponent.html":{},"components/HeaderComponent.html":{},"components/LoginComponent.html":{},"components/MenuChannelsComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{},"components/ToastMessageComponent.html":{},"miscellaneous/variables.html":{}}}],["width.hidden",{"_index":730,"title":{},"body":{"components/BuilderComponent.html":{}}}],["width}}','min",{"_index":3624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["width}}',transform",{"_index":3625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wie",{"_index":1666,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["window",{"_index":682,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["window.innerwidth",{"_index":695,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["window.matchmedia(\"(max",{"_index":575,"title":{},"body":{"components/AppComponent.html":{}}}],["window.matchmedia(\"(orientation",{"_index":572,"title":{},"body":{"components/AppComponent.html":{}}}],["window:resize",{"_index":630,"title":{},"body":{"components/BuilderComponent.html":{},"components/HeaderComponent.html":{},"components/MenuHeaderComponent.html":{},"components/MenutogglerComponent.html":{}}}],["wir",{"_index":1542,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/SignInComponent.html":{}}}],["wird",{"_index":1702,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["wirst",{"_index":1556,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["within",{"_index":2375,"title":{},"body":{"components/LoginComponent.html":{},"injectables/SearchService.html":{}}}],["without",{"_index":1317,"title":{},"body":{"components/EditmessageComponent.html":{}}}],["wof&uuml;r",{"_index":1699,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["wofür",{"_index":2201,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["workspace",{"_index":2677,"title":{},"body":{"components/MenutogglerComponent.html":{}}}],["wrap",{"_index":2631,"title":{},"body":{"components/MenuChannelsComponent.html":{}}}],["wurde",{"_index":1526,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["wähle",{"_index":917,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["wählen",{"_index":922,"title":{},"body":{"components/ChooseAvatarComponent.html":{}}}],["x",{"_index":974,"title":{},"body":{"components/CreatemessageComponent.html":{}}}],["year",{"_index":2835,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["yes",{"_index":1333,"title":{},"body":{"components/EditmessageComponent.html":{},"injectables/SaveEditMessageService.html":{},"injectables/SharedService.html":{},"classes/UserModel.html":{}}}],["yyyy",{"_index":2845,"title":{},"body":{"pipes/RelativeDatePipe.html":{},"pipes/TimestampToDatePipe.html":{}}}],["z",{"_index":738,"title":{},"body":{"components/BuilderComponent.html":{},"components/LegalnoticeComponent.html":{},"components/LoginComponent.html":{},"components/ToastMessageComponent.html":{},"injectables/UserDialogService.html":{}}}],["z.&nbsp;b",{"_index":1676,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["z0",{"_index":3381,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["z]{2",{"_index":3383,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["za",{"_index":3377,"title":{},"body":{"injectables/UserDialogService.html":{}}}],["zeichen",{"_index":3220,"title":{},"body":{"components/SignUpComponent.html":{}}}],["zeit",{"_index":2070,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zeitpunkt",{"_index":2173,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zone.js",{"_index":3575,"title":{},"body":{"dependencies.html":{}}}],["zu",{"_index":1705,"title":{},"body":{"components/LegalnoticeComponent.html":{},"components/SignInComponent.html":{}}}],["zugreifenden",{"_index":2135,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zugriff",{"_index":1824,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zukunft",{"_index":1741,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zul&auml;ssigen",{"_index":1918,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zulässigen",{"_index":2233,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zum",{"_index":493,"title":{},"body":{"components/AddchatComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["zur",{"_index":485,"title":{},"body":{"components/AddchatComponent.html":{},"components/ForgetPasswordComponent.html":{},"components/LegalnoticeComponent.html":{}}}],["zurück",{"_index":1554,"title":{},"body":{"components/ForgetPasswordComponent.html":{}}}],["zurückgesetzt",{"_index":2904,"title":{},"body":{"components/ResetPasswordComponent.html":{}}}],["zurücksetzen",{"_index":1536,"title":{},"body":{"components/ForgetPasswordComponent.html":{},"components/ResetPasswordComponent.html":{}}}],["zus&auml;tzlich",{"_index":1937,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zusammen",{"_index":1960,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zusammenf&uuml;hrung",{"_index":2138,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zusammenführung",{"_index":2282,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zusammenh&auml;ngt",{"_index":2156,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zusammenhängt",{"_index":2284,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zust&auml;ndigen",{"_index":1751,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zuständigen",{"_index":2210,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zusätzlich",{"_index":2237,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zweck",{"_index":1733,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zwecke",{"_index":1792,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zwingende",{"_index":2014,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}],["zwischen",{"_index":2081,"title":{},"body":{"components/LegalnoticeComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AddUserToChannelComponent.html":{"url":"components/AddUserToChannelComponent.html","title":"component - AddUserToChannelComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddUserToChannelComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-add-user-to-channel\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./add-user-to-channel.component.html\n            \n\n\n\n            \n                styleUrl\n                ./add-user-to-channel.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeMember\n                            \n                            \n                                channel\n                            \n                            \n                                loading\n                            \n                            \n                                memberIDs\n                            \n                            \n                                members\n                            \n                            \n                                profileOpen\n                            \n                            \n                                userArray\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeProfile\n                            \n                            \n                                    Async\n                                getData\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onClose\n                            \n                            \n                                openProfile\n                            \n                            \n                                stopPropagation\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                active\n                            \n                            \n                                channelName\n                            \n                            \n                                ids\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                close\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(channelsService: ChannelsService, firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:39\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the AddUserToChannelComponent.\nInitializes the component by subscribing to the current channel observable and clearing the\nmembers and member IDs arrays.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        channelsService\n                                                  \n                                                        \n                                                                        ChannelsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service providing the current channel data.\n\n\n                                                        \n                                                \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Firestore database service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:19\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        channelName\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ids\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:21\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        close\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeProfile\n                        \n                    \n                \n            \n            \n                \ncloseProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:144\n                        \n                    \n\n\n            \n                \n                        Closes the profile view by setting profileOpen to false.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getData()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:87\n                        \n                    \n\n\n            \n                \n                        Retrieves user data for the members of the current channel.\nLoops through the member IDs and uses the Firestore getDoc method to retrieve the user data.\nStores the user data in the members array.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:65\n                        \n                    \n\n\n            \n                \n                        Initializes the component by subscribing to the current channel observable and retrieving\nthe member IDs of the channel. Calls the getData method to retrieve the user data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onClose\n                        \n                    \n                \n            \n            \n                \nonClose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:108\n                        \n                    \n\n\n            \n                \n                        Emits the close event to notify parent components that the user has requested to close the component.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openProfile\n                        \n                    \n                \n            \n            \n                \nopenProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Opens the profile of the user with the given id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the user to open the profile of.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stopPropagation\n                        \n                    \n                \n            \n            \n                \nstopPropagation(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Prevents the event from propagating up the DOM tree, effectively canceling\nany further event handling.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event to stop propagating.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeMember\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: '',\n    email: '',\n    status: false,\n    avatar: '',\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        memberIDs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ChannelsService } from '../../../shared/services/channels.service';\nimport { CommonModule } from '@angular/common';\nimport { Observable } from 'rxjs';\nimport { Channel } from '../../../models/channel';\nimport { doc, Firestore, getDoc } from '@angular/fire/firestore';\nimport { UserModel } from '../../../models/user';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-user-to-channel',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './add-user-to-channel.component.html',\n  styleUrl: './add-user-to-channel.component.scss'\n})\n\nexport class AddUserToChannelComponent{\n  @Input() active = '';\n  @Input() channelName = '';\n  @Input() ids:string[] = [];\n  @Output() close = new EventEmitter();\n  memberIDs: any[] = [];\n  members: any[] = [];\n  channel: Observable;\n  loading = true;\n  userArray:any;\n  profileOpen:boolean = false;\n  activeMember: {\n    name: string,\n    email: string,\n    status:boolean,\n    avatar: string,\n  } = {\n    name: '',\n    email: '',\n    status: false,\n    avatar: '',\n  };\n\n\n  /**\n   * Constructs a new instance of the AddUserToChannelComponent.\n   *\n   * Initializes the component by subscribing to the current channel observable and clearing the\n   * members and member IDs arrays.\n   *\n   * @param channelsService - The service providing the current channel data.\n   * @param firestore - The Firestore database service.\n   */\n  constructor(\n    private channelsService: ChannelsService, \n    private firestore: Firestore,\n  ) {\n    this.channel = this.channelsService.currentChannel$;\n    this.members.splice(0);\n    this.memberIDs.splice(0);\n  }\n\n\n  /**\n   * Initializes the component by subscribing to the current channel observable and retrieving\n   * the member IDs of the channel. Calls the getData method to retrieve the user data.\n   */\n  ngOnInit(): void {\n    this.channel.subscribe((channel) => {\n      if (channel) {\n        const members = channel.members.map((memberId) => ({\n          id: memberId,\n        }));\n        for (let i = 0; i }\n   */\n  async getData() {\n    let Uid;\n      if (this.members.length \n    \n\n    \n        @if (active == 'showPeople') {\n    \n        \n            \n                Mitglieder\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                     \n                                   \n            \n            \n                \n                    \n                        \n                        {{ member.name }}\n                    \n                \n            \n            \n                \n                    \n                    Mitglieder hinzufügen\n                \n            \n        \n    \n}\n\n@if (active == 'addPeople') {\n    \n        \n            \n                Leute hinzufügen\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                \n            \n            # {{ channelName }}\n            \n                \n                \n                    Hinzufügen\n                \n            \n        \n    \n}\n\n@if (profileOpen) {\n    \n        \n            \n                Profil\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                \n            \n            \n                \n            \n            \n                {{ activeMember.name }}\n                {{ activeMember.status }}\n            \n            \n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    E-Mail-Adresse\n                \n                {{ activeMember.email }}\n            \n            \n                \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                Nachricht\n            \n        \n    \n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (active == \\'showPeople\\') {                                        Mitglieder                                                                                                                                                                                                                                                                                                                                                        {{ member.name }}                                                                                                                    Mitglieder hinzufügen                                        }@if (active == \\'addPeople\\') {                                        Leute hinzufügen                                                                                                                                                                                                                                                # {{ channelName }}                                                                Hinzufügen                                        }@if (profileOpen) {                                        Profil                                                                                                                                                                                                                                                                                                        {{ activeMember.name }}                {{ activeMember.status }}                                                                                                                                                                                                                                                        E-Mail-Adresse                                {{ activeMember.email }}                                                                                                                                                                                                    Nachricht                        }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AddUserToChannelComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AddchatComponent.html":{"url":"components/AddchatComponent.html","title":"component - AddchatComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AddchatComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/addchat/addchat.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-addchat\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./addchat.component.html\n            \n\n\n\n            \n                styleUrl\n                ./addchat.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addMembers\n                            \n                            \n                                allMembers\n                            \n                            \n                                allMembersArray\n                            \n                            \n                                channelForm\n                            \n                            \n                                choosenMembers\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                            \n                                filteredMembersArray\n                            \n                            \n                                membersArray\n                            \n                            \n                                subscriptions\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMembersToChannelArray\n                            \n                            \n                                close\n                            \n                            \n                                createChannel\n                            \n                            \n                                createNewChannel\n                            \n                            \n                                generateChannelObject\n                            \n                            \n                                isMemberSelected\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onSearchInput\n                            \n                            \n                                switchMembersForm\n                            \n                            \n                                toggleAllMembers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, channelsService: ChannelsService, auth: AuthService, dialogRef: MatDialogRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/addchat/addchat.component.ts:28\n                            \n                        \n\n                \n                    \n                            The constructor for the AddchatComponent.\nExample :                   channels collection in Firestore.\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The FormBuilder for creating the channelForm.\n\n                                                        \n                                                \n                                                \n                                                        channelsService\n                                                  \n                                                        \n                                                                        ChannelsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The ChannelsService used to interact with the\nchannels collection in Firestore.\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The AuthService used to get the active user.\n\n                                                        \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The MatDialogRef object for the dialog.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMembersToChannelArray\n                        \n                    \n                \n            \n            \n                \naddMembersToChannelArray(member: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:163\n                        \n                    \n\n\n            \n                \n                        Adds a member to the choosenMembers array or removes it if it already exists.\nClears the search input field and resets the filteredMembersArray.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The member object containing the user data to be added or removed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:182\n                        \n                    \n\n\n            \n                \n                        Closes the add chat dialog and resets the form.\nSets the addMembers flag to false, resets the channelForm, and closes the dialogRef.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createChannel\n                        \n                    \n                \n            \n            \n                \ncreateChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:80\n                        \n                    \n\n\n            \n                \n                        Creates a new channel if the form is valid. Retrieves the current user ID\nand generates a channel object using the form data. Calls the method to\ncreate a new channel with the generated object.\nLogs an error if the user ID cannot be retrieved or if the form is invalid.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createNewChannel\n                        \n                    \n                \n            \n            \n                \ncreateNewChannel(newChannel: Channel)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Creates a new channel using the provided Channel object.\nCalls the ChannelsService to create the channel and handles the result.\nResets the channel form and closes the dialog upon successful creation.\nLogs an error message if channel creation fails.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newChannel\n                                            \n                                                            Channel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Channel object containing the channel information to be created.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateChannelObject\n                        \n                    \n                \n            \n            \n                \ngenerateChannelObject(currentUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:103\n                        \n                    \n\n\n            \n                \n                        Generates a Channel object based on the form data and the current user ID.\nPopulates the members array with either all users (if allMembers is true) or\nthe selected users (if allMembers is false). Removes duplicate IDs from the\nmembers array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                currentUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the currently logged-in user.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Channel\n\n                        \n                            \n                                The generated Channel object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMemberSelected\n                        \n                    \n                \n            \n            \n                \nisMemberSelected(member: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:214\n                        \n                    \n\n\n            \n                \n                        Checks if a member is selected in the choosenMembers array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The member object containing the user data to be checked.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean indicating whether the member is selected or not.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Initializes the component by subscribing to the user list observable and\npopulating the allMembersArray with the user data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSearchInput\n                        \n                    \n                \n            \n            \n                \nonSearchInput(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:198\n                        \n                    \n\n\n            \n                \n                        Handles the input event for the search field and updates the filtered members array.\nThis method clears the filteredMembersArray if the input is empty. Otherwise, it filters\nthe allMembersArray based on the search value and updates the filteredMembersArray with\nmembers whose names include the search value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input event containing the search field value.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        switchMembersForm\n                        \n                    \n                \n            \n            \n                \nswitchMembersForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:152\n                        \n                    \n\n\n            \n                \n                        Switches the component to the members selection form.\nResets the members array and sets the addMembers flag to true.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleAllMembers\n                        \n                    \n                \n            \n            \n                \ntoggleAllMembers(addAll: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/addchat/addchat.component.ts:142\n                        \n                    \n\n\n            \n                \n                        Toggles the allMembers flag based on the given boolean value.\nSets the allMembers property to the given value and logs a message to the console.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                addAll\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A boolean indicating whether to add all members or not.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        allMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        allMembersArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        choosenMembers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:43\n                        \n                    \n\n            \n                \n                    The MatDialogRef object for the dialog.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filteredMembersArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        membersArray\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/main/addchat/addchat.component.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component  } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators,ReactiveFormsModule } from '@angular/forms';\nimport { ChannelsService } from '../../shared/services/channels.service';\nimport { AuthService } from '../../shared/services/auth.service';\nimport { Channel } from '../../models/channel';\nimport { UserModel } from '../../models/user';\nimport { Subscription } from 'rxjs';\n\n\n\n@Component({\n  selector: 'app-addchat',\n  standalone: true,\n  imports: [ReactiveFormsModule],\n  templateUrl: './addchat.component.html',\n  styleUrl: './addchat.component.scss',\n})\nexport class AddchatComponent {\n  channelForm: FormGroup;\n  updateData: Partial = {};\n  addMembers: boolean = false;\n  allMembers: boolean = true;\n  filteredMembersArray: { userId: string; name: string; photoURL: string }[] = [];\n  membersArray: { userId: string; name: string; photoURL: string }[] = [];\n  allMembersArray: { userId: string; name: string; photoURL: string }[] = [];\n  subscriptions: Subscription = new Subscription()\n  choosenMembers: { userId: string; name: string; photoURL: string }[] = [];\n\n  /**\n   * The constructor for the AddchatComponent.\n   *\n   * @param fb The FormBuilder for creating the channelForm.\n   * @param channelsService The ChannelsService used to interact with the\n   *                        channels collection in Firestore.\n   * @param auth The AuthService used to get the active user.\n   * @param dialogRef The MatDialogRef object for the dialog.\n   */\n  constructor(\n    private fb: FormBuilder,\n    private channelsService: ChannelsService,\n    private auth: AuthService,\n    public dialogRef: MatDialogRef\n  ) {\n    this.channelForm = this.fb.group({\n      name: ['', Validators.required],\n      description: [''],\n      isPrivate: [false],\n    });\n  }\n\n\n  /**\n   * Initializes the component by subscribing to the user list observable and\n   * populating the allMembersArray with the user data.\n   */\n  ngOnInit(): void {\n    this.allMembers = true;\n      this.subscriptions.add(\n      this.auth.getUserList().subscribe({\n        next: (users: UserModel[]) => {\n          this.allMembersArray = users.map(user => ({\n            userId: user.userId,\n            name: user.name,\n            photoURL: user.photoURL,\n          }));\n        },\n        error: (error) => {console.error('Error fetching user list:', error);},\n      })\n    );\n  }\n\n\n  /**\n   * Creates a new channel if the form is valid. Retrieves the current user ID\n   * and generates a channel object using the form data. Calls the method to\n   * create a new channel with the generated object.\n   * Logs an error if the user ID cannot be retrieved or if the form is invalid.\n   */\n  createChannel() {\n    if (this.channelForm.valid) {\n      const currentUserId = this.auth.userId();\n      if (!currentUserId) {\n        console.error('User-ID konnte nicht abgerufen werden.');\n        return;\n      }\n      const newChannel = this.generateChannelObject(currentUserId);\n      this.createNewChannel(newChannel);\n    } else {\n      console.error('Formular ist ungültig.');\n    }\n  }\n\n\n  /**\n   * Generates a Channel object based on the form data and the current user ID.\n   * Populates the members array with either all users (if allMembers is true) or\n   * the selected users (if allMembers is false). Removes duplicate IDs from the\n   * members array.\n   * @param currentUserId The ID of the currently logged-in user.\n   * @returns The generated Channel object.\n   */\n  generateChannelObject(currentUserId: string): Channel {\n    const channelObject = {\n      name: this.channelForm.value.name,\n      description: this.channelForm.value.description || '',\n      isPrivate: this.channelForm.value.isPrivate,\n      createdBy: currentUserId,\n      members: [\n        currentUserId,\n        ...(this.allMembers\n          ? this.allMembersArray.map(member => member.userId)\n          : this.choosenMembers.map(member => member.userId))\n      ].filter((id, index, self) => self.indexOf(id) === index)\n    };\n    return channelObject\n  }\n\n\n/**\n * Creates a new channel using the provided Channel object.\n * Calls the ChannelsService to create the channel and handles the result.\n * Resets the channel form and closes the dialog upon successful creation.\n * Logs an error message if channel creation fails.\n *\n * @param newChannel The Channel object containing the channel information to be created.\n */\n  createNewChannel(newChannel: Channel) {\n    this.channelsService.createChannel(newChannel).then(() => {\n      this.channelForm.reset();\n      this.dialogRef.close();\n    })\n    .catch(error => {console.error('Fehler beim Erstellen des Channels:', error);});\n  }\n\n\n  /**\n   * Toggles the allMembers flag based on the given boolean value.\n   * Sets the allMembers property to the given value and logs a message to the console.\n   * @param addAll A boolean indicating whether to add all members or not.\n   */\n  toggleAllMembers(addAll: boolean): void {\n    this.allMembers = addAll;\n    console.log('All members:', this.allMembers);\n  }\n\n\n  /**\n   * Switches the component to the members selection form.\n   * Resets the members array and sets the addMembers flag to true.\n   */\n  switchMembersForm() {\n      this.addMembers = true; \n      this.membersArray = [];\n  }\n\n\n  /**\n   * Adds a member to the choosenMembers array or removes it if it already exists.\n   * Clears the search input field and resets the filteredMembersArray.\n   * @param member The member object containing the user data to be added or removed.\n   */\n  addMembersToChannelArray(member: { userId: string; name: string; photoURL: string }): void {\n    const index = this.choosenMembers.findIndex(selected => selected.userId === member.userId);\n    if (index === -1) {\n      this.choosenMembers.push(member);\n    } else {\n      this.choosenMembers.splice(index, 1);\n    }\n    const inputElement = document.querySelector('input[type=\"text\"]') as HTMLInputElement;\n    if (inputElement) {\n      inputElement.value = '';\n    }\n    this.filteredMembersArray = [];\n  }\n\n\n  /**\n   * Closes the add chat dialog and resets the form.\n   * Sets the addMembers flag to false, resets the channelForm, and closes the dialogRef.\n   */\n  close(): void {\n    this.addMembers = false\n    this.channelForm.reset();\n    this.dialogRef.close(); \n  }\n\n\n/**\n * Handles the input event for the search field and updates the filtered members array.\n *\n * This method clears the filteredMembersArray if the input is empty. Otherwise, it filters\n * the allMembersArray based on the search value and updates the filteredMembersArray with\n * members whose names include the search value.\n *\n * @param {Event} event - The input event containing the search field value.\n */\n  onSearchInput(event: Event): void {\n    if ((event.target as HTMLInputElement).value === '') {\n      this.filteredMembersArray = [];\n    } else {\n      const searchValue = (event.target as HTMLInputElement).value.toLowerCase();\n      this.filteredMembersArray = this.allMembersArray.filter(member =>\n        member.name.toLowerCase().includes(searchValue)\n      );\n    }\n  }\n\n  /**\n   * Checks if a member is selected in the choosenMembers array.\n   * @param member The member object containing the user data to be checked.\n   * @returns A boolean indicating whether the member is selected or not.\n   */\n  isMemberSelected(member: { userId: string; name: string; photoURL: string }): boolean {\n    return this.choosenMembers.some(selected => selected.userId === member.userId);\n  }\n}\n    \n\n    \n        @if (addMembers) {\n\n    \n        Leute hinzufügen\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        \n        Alle Mitglieder von DevSpace hinzufügen\n    \n    \n        \n        Bestimmte Leute hinzufügen\n    \n    \n        @if (!allMembers && addMembers) {\n        @if (choosenMembers) {\n        \n            \n        \n        }\n        @if (filteredMembersArray.length > 0){\n        \n            \n                @for (member of filteredMembersArray; track member) {\n                \n                    \n                    {{ member.name }}\n                \n                }\n            \n        \n        }\n        }\n    \n    \n        \n            @for (member of choosenMembers; track member) {\n            \n                \n                {{ member.name }}\n            \n            }\n        \n        Erstellen\n    \n\n} @else if (!addMembers) {\n\n    \n        Channel erstellen\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    Channels dienen deinem Team zur Kommunikation. Am besten sollten sie themenbezogen sein\n        \n        #marketing zum Beispiel.\n    \n    \n        \n            Channel-Name\n            \n            @if (channelForm.get('name')?.invalid && channelForm.get('name')?.touched) {\n            \n                Der Name ist erforderlich.\n            \n            }\n        \n        \n            \n                Beschreibung\n                (optional)\n            \n            \n        \n        \n            Erstellen\n        \n    \n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (addMembers) {            Leute hinzufügen                                                                                                                                                                        Alle Mitglieder von DevSpace hinzufügen                        Bestimmte Leute hinzufügen                @if (!allMembers && addMembers) {        @if (choosenMembers) {                                    }        @if (filteredMembersArray.length > 0){                                    @for (member of filteredMembersArray; track member) {                                                        {{ member.name }}                                }                            }        }                            @for (member of choosenMembers; track member) {                                            {{ member.name }}                        }                Erstellen    } @else if (!addMembers) {            Channel erstellen                                                                                                                                                        Channels dienen deinem Team zur Kommunikation. Am besten sollten sie themenbezogen sein                #marketing zum Beispiel.                            Channel-Name                        @if (channelForm.get(\\'name\\')?.invalid && channelForm.get(\\'name\\')?.touched) {                            Der Name ist erforderlich.                        }                                            Beschreibung                (optional)                                                    Erstellen            }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AddchatComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                \n            \n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                checkOrientationAndWidth\n                            \n                            \n                                firestore\n                            \n                            \n                                items$\n                            \n                            \n                                title\n                            \n                            \n                                tokens\n                            \n                            \n                                turnAround\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkOrietationInterval\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:21\n                            \n                        \n\n                \n                    \n                            The constructor for the AppComponent class.\nauthenticated and the current route is the root route.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The AuthService to provide the user authentication state.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Router to navigate to the board route if the user is\nauthenticated and the current route is the root route.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkOrietationInterval\n                        \n                    \n                \n            \n            \n                \ncheckOrietationInterval()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:53\n                        \n                    \n\n\n            \n                \n                        Checks the orientation and width of the screen every 2 seconds and\nsets the turnAround flag accordingly. If the screen is in landscape\nmode and the width is less than or equal to 800px, then turnAround\nis set to true. Otherwise, it is set to false.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:39\n                        \n                    \n\n\n            \n                \n                        OnInit lifecycle hook. If the user is authenticated and the current\nroute is the root route ('/'), navigate to the board route ('/board').\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        checkOrientationAndWidth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                \n                    \n                        Default value : inject(Firestore)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'DABubble'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        turnAround\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserModel\n\n                    \n                \n                \n                    \n                        Default value : new UserModel(null)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, OnInit } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { Firestore, collection, collectionData } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { UserModel } from '../app/models/user';\nimport { AuthService } from './shared/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  title = 'DABubble';\n  firestore: Firestore = inject(Firestore);\n  items$: Observable;\n  user: UserModel = new UserModel(null);  tokens: string[] = [];\n  turnAround:boolean = false;\n\n  /**\n   * The constructor for the AppComponent class.\n   * @param authService The AuthService to provide the user authentication state.\n   * @param router The Router to navigate to the board route if the user is\n   * authenticated and the current route is the root route.\n   */\n  constructor(private authService: AuthService, private router: Router) {\n    const usersCollection = collection(this.firestore, 'users');\n    this.items$ = collectionData(usersCollection, { idField: 'id' });\n  }\n\n\n  /**\n   * OnInit lifecycle hook. If the user is authenticated and the current\n   * route is the root route ('/'), navigate to the board route ('/board').\n   */\n  ngOnInit(): void {\n    const isAuthenticated = this.authService.isUserAuthenticated();\n    if (isAuthenticated && this.router.url === '/') {\n      this.router.navigateByUrl('/board');\n    }\n    this.checkOrietationInterval();\n  }\n\n  /**\n   * Checks the orientation and width of the screen every 2 seconds and\n   * sets the `turnAround` flag accordingly. If the screen is in landscape\n   * mode and the width is less than or equal to 800px, then `turnAround`\n   * is set to true. Otherwise, it is set to false.\n   */\n  checkOrietationInterval() {\n    setInterval(() => {\n      if (this.checkOrientationAndWidth()) \n        this.turnAround = true;\n      else \n        this.turnAround = false;\n    }, 2000)\n  }\n  checkOrientationAndWidth = () => {\n    const isLandscape = window.matchMedia(\"(orientation: landscape)\").matches;\n    const maxWidth800px = window.matchMedia(\"(max-width: 800px)\").matches;\n    return isLandscape && maxWidth800px;\n  }\n}\n\n    \n\n    \n        @if (turnAround) {\n\n\t\n\t\t\n\t\t\t.st0 {\n\t\t\t\tfill-rule: evenodd;\n\t\t\t\tclip-rule: evenodd;\n\t\t\t}\n\t\t\n\t\t\n\t\t\t\n\t\t\n\t\n\trotate your Device\n\n}@else {\n\n}\n    \n\n    \n                \n                    ./app.component.scss\n                \n                @use \"./../colors.scss\" as colors;\n\n.container{\n    width: 100vw;\n}\n\n.rotateInfo {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    gap: 20px;\n    height: 100vh;\n    width: 100%;\n    background-color: colors.$bg-color;\n    svg {\n        width: 50%;\n        height: 50%;\n    }\n    \n    span {\n        font-size: 18px;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (turnAround) {\t\t\t\t\t\t.st0 {\t\t\t\tfill-rule: evenodd;\t\t\t\tclip-rule: evenodd;\t\t\t}\t\t\t\t\t\t\t\t\t\t\trotate your Device}@else {}'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BuilderComponent.html":{"url":"components/BuilderComponent.html","title":"component - BuilderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BuilderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/builder/builder.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-builder\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                ChatComponent\n                                MenuComponent\n                                MenutogglerComponent\n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./builder.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./builder.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                builder\n                            \n                            \n                                menuOpened\n                            \n                            \n                                menuState\n                            \n                            \n                                mobile\n                            \n                            \n                                smallWindow\n                            \n                            \n                                threadchatOpened\n                            \n                            \n                                threadchatState\n                            \n                            \n                                threadWasOpen\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeMenu\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onAnimationDone\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMenu\n                            \n                            \n                                toggleThreadChat\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(stateService: StateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/builder/builder.component.ts:27\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the BuilderComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        stateService\n                                                  \n                                                        \n                                                                        StateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The service used to manage the state of the thread chat.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/builder/builder.component.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeMenu\n                        \n                    \n                \n            \n            \n                \ncloseMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/builder/builder.component.ts:117\n                        \n                    \n\n\n            \n                \n                        Closes the menu by setting menuState to 'out' and after a short delay sets the menuOpened boolean to false.\nThe menuOpened boolean is set after a short delay to ensure the animation is completed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/builder/builder.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the component by calling the onResize method, and subscribing to the menuState and threadchatState observables.\nWhen the menuState or threadchatState changes, the corresponding boolean property is updated.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAnimationDone\n                        \n                    \n                \n            \n            \n                \nonAnimationDone(event: any, type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/builder/builder.component.ts:132\n                        \n                    \n\n\n            \n                \n                        Updates the menuOpened and threadchatOpened boolean properties based on the completed animation state.\nThe onAnimationDone function is called when the animation is complete and the value of the 'toState' property is either 'in' or 'out'.\nIf the 'toState' property is 'in', the respective boolean is set to true, otherwise it is set to false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe animation event.\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of the animation, either 'menu' or 'threadchat'.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/app/shared/builder/builder.component.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/builder/builder.component.ts:77\n                        \n                    \n\n\n            \n                \n                        Toggles the menu state between 'in' and 'out'.\nIf the screen is narrow (mobile) and the menu is opened, the thread chat is closed.\nIf the screen is narrow (mobile) and the menu is closed, the thread chat is opened if it was open before.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleThreadChat\n                        \n                    \n                \n            \n            \n                \ntoggleThreadChat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/builder/builder.component.ts:100\n                        \n                    \n\n\n            \n                \n                        Toggles the thread chat state between 'in' and 'out'.\nIf the thread chat is opened and the screen is narrow (mobile), the menu is closed first.\nThe boolean property threadchatOpened is updated after a short delay to ensure the animation is completed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        builder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : ['menu', 'mainchat', 'threadchat']\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/builder/builder.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpened\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/builder/builder.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'in'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/builder/builder.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/builder/builder.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        smallWindow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/builder/builder.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadchatOpened\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/builder/builder.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadchatState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'out'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/builder/builder.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadWasOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/builder/builder.component.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener } from '@angular/core';\nimport { MenuComponent } from '../../main/menu/menu.component';\nimport { MenutogglerComponent } from '../../main/shared/menutoggler/menutoggler.component';\nimport { slideAnimationLeft, slideAnimationRight } from './../animations';\nimport { CommonModule } from '@angular/common';\nimport { StateService } from '../services/state.service';\nimport { ChatComponent } from '../../main/chat/chat.component';\n\n@Component({\n  selector: 'app-builder',\n  standalone: true,\n  imports: [ChatComponent, MenuComponent, MenutogglerComponent, CommonModule],\n  templateUrl: './builder.component.html',\n  styleUrls: ['./builder.component.scss'],\n  animations: [slideAnimationRight, slideAnimationLeft],\n})\n\n\nexport class BuilderComponent {\n  builder: string[] = ['menu', 'mainchat', 'threadchat'];\n  threadchatState = 'out';\n  menuState = 'in';\n  threadchatOpened = false;\n  threadWasOpen = false;\n  smallWindow = false;\n  menuOpened = true;\n  mobile = true;\n\n  /**\n   * Constructs a new instance of the BuilderComponent.\n   *\n   * @param stateService The service used to manage the state of the thread chat.\n   */\n  constructor( private stateService: StateService) {}\n\n  \n  @HostListener('window:resize', [])\n  /**\n   * Handles window resize events.\n   * When the window width is less than 1400px, the chat and menu are stacked vertically.\n   * When the window width is less than 900px, the menu is closed and the chat is full width.\n   * When the window width is greater than 900px and previously was less than 900px, the menu is opened.\n   */\n  onResize(): void {\n    const wasMobile = this.mobile;\n    this.smallWindow = window.innerWidth  {\n      this.menuState = state;\n      this.menuOpened = state === 'in';\n    });\n    this.stateService.threadchatState$.subscribe((state) => {\n      this.threadchatState = state;\n      this.threadchatOpened = state === 'in';\n    });\n  }\n\n\n  /**\n   * Toggles the menu state between 'in' and 'out'.\n   * If the screen is narrow (mobile) and the menu is opened, the thread chat is closed.\n   * If the screen is narrow (mobile) and the menu is closed, the thread chat is opened if it was open before.\n   */\n  toggleMenu(): void {\n    this.menuState = this.menuState === 'in' ? 'out' : 'in';\n    this.menuOpened = this.menuState === 'in';\n    if (this.mobile && this.menuOpened) {\n      if (this.threadchatOpened) {\n        this.threadWasOpen = true;\n        this.stateService.setThreadchatState('out');\n      } else {\n        this.threadWasOpen = false;\n      }\n    } else if (this.mobile && !this.menuOpened) {\n      if (this.threadWasOpen) {\n        this.toggleThreadChat();\n      }\n    }\n  }\n\n\n  /**\n   * Toggles the thread chat state between 'in' and 'out'. \n   * If the thread chat is opened and the screen is narrow (mobile), the menu is closed first.\n   * The boolean property threadchatOpened is updated after a short delay to ensure the animation is completed.\n   */\n  toggleThreadChat(): void {\n    if (this.threadchatState === 'in') {\n      this.threadchatState = 'out';\n      setTimeout(() => {this.threadchatOpened = false;}, 300);\n    } else {\n      if (this.mobile && this.menuOpened) \n        this.closeMenu();\n      this.threadchatOpened = true;\n      setTimeout(() => {this.threadchatState = 'in';});\n    }\n  }\n\n\n  /**\n   * Closes the menu by setting menuState to 'out' and after a short delay sets the menuOpened boolean to false.\n   * The menuOpened boolean is set after a short delay to ensure the animation is completed.\n   */\n  closeMenu(): void {\n    this.menuState = 'out';\n    setTimeout(() => {\n      this.menuOpened = false;\n    }, 300);\n  }\n\n\n  /**\n   * Updates the menuOpened and threadchatOpened boolean properties based on the completed animation state.\n   * The onAnimationDone function is called when the animation is complete and the value of the 'toState' property is either 'in' or 'out'.\n   * If the 'toState' property is 'in', the respective boolean is set to true, otherwise it is set to false.\n   * @param event - The animation event.\n   * @param type - The type of the animation, either 'menu' or 'threadchat'.\n   */\n  onAnimationDone(event: any, type: string): void {\n    if (event.toState === 'in') {\n      if (type === 'menu') \n        this.menuOpened = true;\n      if (type === 'threadchat') \n        this.threadchatOpened = true;\n    } else if (event.toState === 'out') {\n      if (type === 'menu') \n        this.menuOpened = false;\n      if (type === 'threadchat') \n        this.threadchatOpened = false;\n    }\n  }\n}\n\n    \n\n    \n        \n    \n      \n    \n\n    \n\n    \n      \n    \n\n  \n\n\n    \n\n    \n                \n                    ./builder.component.scss\n                \n                @use \"../../../mixins.scss\" as mixins;\n@use \"../../../colors.scss\" as colors;\n\n.builder-container {\n  @include mixins.flexbox(row, space-between, center, nowrap);\n  position: relative;\n  height: 100%;\n  max-width: 100%;\n  gap: 20px;\n  transition: gap 0.3s ease-in-out;\n}\n\n.menu-container {\n  @include mixins.flexbox(column, flex-start, flex-start, nowrap);\n  background-color: colors.$white;\n  height: 100%;\n  max-width: 100%;\n  border-radius: 30px;\n  gap: 25px;\n}\n\n.m-height {\n  height: 100%;\n}\n\n.mainchat-container {\n  flex: 1;\n  transition: flex 0.3s ease-in-out;\n}\n\n.menu-width {\n  max-width: 366px;\n}\n\n.thread-width {\n  max-width: 485px;\n}\n\n.menu-container.hidden,\n.thread-width.hidden {\n  flex: 0 0 0;\n  max-width: 0;\n  overflow: hidden;\n}\n\n.thread-width {\n  flex: 0 0 366px;\n  transition: flex 0.3s ease-in-out, max-width 0.3s ease-in-out;\n}\n\n.toggleButton {\n  position: absolute;\n  bottom: 10%;\n  left: -20px;\n  z-index: 444;\n  cursor: pointer;\n}\n\n$breakpoint-smallWindow: 1400px;\n\n.builder-container {\n  .menu-container {\n    transition: all 0.3s ease-in-out;\n  }\n\n  .mainchat-container {\n    flex: 1;\n    overflow: hidden;\n    transition: all 0.3s ease-in-out;\n\n    &.hidden {\n      width: unset;\n      max-width: 0;\n    }\n  }\n\n  .thread-container {\n    flex: 0 0 100%;\n    max-width: 100%;\n    transition: all 0.3s ease-in-out;\n\n    @media (max-width: $breakpoint-smallWindow) {\n      position: absolute;\n      top: 0;\n      left: 0;\n      z-index: 100;\n      width: 100%;\n      height: 100%;\n      max-width: none;\n    }\n  }\n}\n\n.toggleButton {\n  position: absolute;\n  bottom: 10%;\n  left: -20px;\n  z-index: 444;\n  cursor: pointer;\n}\n\n$breakpoint-mobile: 900px;\n@media (max-width: $breakpoint-mobile) {\n  .builder-container {\n    gap: 0;\n  }\n\n  .menu-container{\n    border-radius: unset;\n  }\n  .menu-width {\n    width: 100%;\n    max-width: 100%;\n  }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                  '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BuilderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Channel.html":{"url":"interfaces/Channel.html","title":"interface - Channel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Channel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/channel.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            isPrivate\n                                        \n                                \n                                \n                                        \n                                            members\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isPrivate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPrivate:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        members\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        members:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Channel {\n    id?: string;\n    name: string;\n    description?: string;\n    createdBy: string;\n    members: string[];\n    isPrivate: boolean;\n    createdAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChatComponent.html":{"url":"components/ChatComponent.html","title":"component - ChatComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ChatComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/chat/chat.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-chat\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                ThreadchatHeaderComponent\n                                CreatemessageComponent\n                                MainchatHeaderComponent\n                                ChatboxComponent\n                                MessageboxComponent\n                \n            \n\n            \n                styleUrls\n                ./chat.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./chat.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createmessage\n                            \n                            \n                                sharedVariable\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                builder\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(sharedService: SharedService)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/chat/chat.component.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the ChatComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sharedService\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service providing the sharedVariable$ observable.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        builder\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/chat/chat.component.ts:17\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/chat/chat.component.ts:34\n                        \n                    \n\n\n            \n                \n                        Initializes the ChatComponent by subscribing to the sharedVariable$ observable from the SharedService.\nUpdates the sharedVariable with the emitted value whenever it changes.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createmessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"createmessage\"\n                    \n                \n                    \n                        \n                                Defined in src/app/main/chat/chat.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sharedVariable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/chat/chat.component.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnInit } from '@angular/core';\nimport { ChatboxComponent } from '../shared/chatbox/chatbox.component';\nimport { MessageboxComponent } from '../shared/messagebox/messagebox.component';\nimport { MainchatHeaderComponent } from './mainchat-header/mainchat-header.component';\nimport { SharedService } from '../../shared/services/newmessage.service';\nimport { CreatemessageComponent } from '../createmessage/createmessage.component';\nimport { ThreadchatHeaderComponent } from './threadchat-header/threadchat-header.component';\n\n@Component({\n  selector: 'app-chat',\n  standalone: true,\n  imports: [ThreadchatHeaderComponent, CreatemessageComponent, MainchatHeaderComponent, ChatboxComponent, MessageboxComponent],\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss']\n})\nexport class ChatComponent implements OnInit {\n  @Input() builder!: string;\n  sharedVariable!: string;\n  createmessage = \"createmessage\";\n\n\n/**\n * Constructs a new instance of the ChatComponent.\n *\n * @param {SharedService} sharedService - The service providing the sharedVariable$ observable.\n */\n  constructor(private sharedService: SharedService) {}\n\n\n/**\n * Initializes the ChatComponent by subscribing to the sharedVariable$ observable from the SharedService.\n * Updates the sharedVariable with the emitted value whenever it changes.\n */\n  ngOnInit() {\n    this.sharedService.sharedVariable$.subscribe(\n      (value) => (this.sharedVariable = value)\n    );\n  }\n}\n\n\n\n    \n\n    \n        \n  @if(sharedVariable != \"createMessagePressed\"){\n    @if (builder === 'mainchat') {\n      \n    }@else if (builder === 'threadchat') {\n      \n    }\n    \n    \n  } @else {\n    \n    \n  }\n\n    \n\n    \n                \n                    ./chat.component.scss\n                \n                @use \"../../../mixins.scss\" as mixins;\n@use \"../../../colors.scss\" as colors;\n\n.mainchat-container{\n    @include mixins.flexbox(column, space-between, space-between, nowrap);\n    height: 100%;\n    width: 100%;\n}\n\n.mainchat__header{ \n    width: 100%;\n}\n\n.mainchat{\n    overflow: hidden;\n    height: 100%;\n}\n\n.mainchat__messagebox{\n    padding: 20px;\n    box-shadow: 0px -2px 10px 0px rgba(0, 0, 0, 0.08);\n    border-radius: 0 0 30px 30px;\n}\n\n\n\n.threadchat-container {\n  @include mixins.flexbox(column, space-between, space-between, nowrap);\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.threadchat {\n    overflow: hidden;\n    height: 100%;\n  }\n  \n  .threadchat__item1:has(.message:last-child:not(:first-child)) {\n    flex-direction: column-reverse; /* Umkehrung, wenn Scrollbalken vorhanden */\n  }\n  \n  .threadchat__header {\n    width: 100%;\n    position: fixed;\n  }\n  \n  .chatbox__mainthread-container {\n    @include mixins.flexbox(row, flex-start, flex-start, nowrap);\n    gap: 20px;\n    padding: 10px 40px;\n    margin-top:17px;\n    position: relative;\n  \n    &:hover {\n      background-color: colors.$bg-color;\n    }\n    &:hover .chatbox__msg {\n      background-color: colors.$white;\n    }\n    &:hover .chatbox__msg-sent {\n      background-color: colors.$purple2;\n    }\n  \n    &:hover .chatbox__addemoji-container {\n      @include mixins.flexbox(row, center, center, nowrap);\n    }\n  }\n  \n  .chatbox__msg-avatar {\n    border-radius: 40px;\n  }\n  \n  .chatbox__addemoji-container {\n    display: none;\n    background: colors.$white;\n    border-top-left-radius: 25px;\n    border-top-right-radius: 25px;\n    border-bottom-left-radius: 25px;\n    border: 1px solid colors.$light-purple;\n    padding: 3px 13px;\n    position: absolute;\n    top: -15px;\n    right: 60px;\n    img {\n      display: block;\n      border-radius: 20px;\n      width: 40px;\n      height: 40px;\n  \n      &:hover {\n        filter: invert(31%) sepia(41%) saturate(5436%) hue-rotate(231deg)\n          brightness(101%) contrast(99%);\n      }\n    }\n  \n    > div {\n      @include mixins.flexbox(row, center, center, nowrap);\n      width: 40px;\n      height: 40px;\n      border-radius: 20px;\n    }\n  \n    .chatbox__addemoji__emoji-container {\n      &:hover {\n        background-color: colors.$bg-color;\n      }\n    }\n    svg {\n      width: 24px;\n      height: 24px;\n    }\n  }\n  \n  .chatbox__msg-info {\n    @include mixins.flexbox(row, flex-start, center);\n    gap: 20px;\n  }\n  \n  .chatbox__msg-name {\n    font-size: 1.125rem;\n    font-weight: 700;\n    cursor: pointer;\n  \n    &:hover {\n      color: colors.$purple;\n    }\n  }\n  \n  .chatbox__msg-time {\n    font-size: 0.875rem;\n    color: colors.$grey;\n  }\n  \n  .chatbox__msg {\n    background-color: colors.$bg-color;\n    padding: 15px;\n    margin-top: 8px;\n    border-top-right-radius: 20px;\n    border-bottom-right-radius: 20px;\n    border-bottom-left-radius: 20px;\n    line-height: 24.55px;\n    display: block;\n  }\n  \n  .chatbox__emojis {\n    border: 1px solid colors.$light-purple;\n    display: inline-block;\n    padding: 5px 10px;\n    border-radius: 20px;\n    margin-top: 8px;\n    cursor: pointer;\n  \n    span {\n      margin-left: 10px;\n      vertical-align: super;\n    }\n  \n    &:hover {\n      border: 1px solid colors.$purple3;\n    }\n  }\n  \n  .chatbox__addreaction-container {\n    display: inline-block;\n    padding: 5px;\n    margin-left: 8px;\n    vertical-align: text-bottom;\n    border-radius: 20px;\n    img {\n      display: block;\n    }\n    &:hover {\n      filter: invert(30%) sepia(72%) saturate(3091%) hue-rotate(229deg)\n        brightness(98%) contrast(92%);\n    }\n  }\n  \n  .chatbox__threads-divider {\n    width: 100%;\n    display: flex;\n    align-self: flex-start;\n    align-items: center;\n    font-size: 1.125rem;\n    color: colors.$light-purple;\n    margin-inline: auto;\n    padding-left: 33px;\n    padding-right: 32px;\n  }\n  \n  .chatbox__threads-divider::after {\n    flex: 1;\n    content: \"\";\n    padding: 1px;\n    background-color: colors.$light-purple;\n    margin-left: 20px;\n    margin-top: 8px;\n    margin-bottom: 2px;\n  }\n  \n  .threadchat__chatbox {\n    width: 100%;\n    height: calc(100% - 104px);\n    position: relative;\n    top: 0;\n    bottom: -100px;\n  }\n  \n  .threadchat__messagebox {\n    padding: 20px;\n    flex: 1;\n    box-shadow: 0px -2px 10px 0px rgba(0, 0, 0, 0.08);\n  }\n  \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @if(sharedVariable != \"createMessagePressed\"){    @if (builder === \\'mainchat\\') {          }@else if (builder === \\'threadchat\\') {          }          } @else {          }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ChatComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ChooseAvatarComponent.html":{"url":"components/ChooseAvatarComponent.html","title":"component - ChooseAvatarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ChooseAvatarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/sign-up/choose-avatar/choose-avatar.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-choose-avatar\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./choose-avatar.component.html\n            \n\n\n\n            \n                styleUrl\n                ./choose-avatar.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activePic\n                            \n                            \n                                path\n                            \n                            \n                                profilesPics\n                            \n                            \n                                showSuccess\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                back\n                            \n                            \n                                onSignup\n                            \n                            \n                                setActive\n                            \n                            \n                                signUpAvatar\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                userData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                backward\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for ChooseAvatarComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authentication service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        userData\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : {name: \"\", email: \"\", password: \"\", privacy: false, photoURL: \"\"}\n                    \n                \n                        \n                            \n                                    Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:14\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        backward\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:15\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        back\n                        \n                    \n                \n            \n            \n                \nback()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:34\n                        \n                    \n\n\n            \n                \n                        Emits the backward event to go back to the previous step.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSignup\n                        \n                    \n                \n            \n            \n                \nonSignup()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Handles the sign-up process when the avatar is chosen.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setActive\n                        \n                    \n                \n            \n            \n                \nsetActive(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:43\n                        \n                    \n\n\n            \n                \n                        Sets the active profile picture.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the selected profile picture.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUpAvatar\n                        \n                    \n                \n            \n            \n                \nsignUpAvatar()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:59\n                        \n                    \n\n\n            \n                \n                        Completes the sign-up process by setting the user's avatar and registering the user.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activePic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : -1\n                    \n                \n                    \n                        \n                                Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"/img/avatars/\"\n                    \n                \n                    \n                        \n                                Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profilesPics\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : ['avatar2.svg','avatar1.svg','avatar3.svg','avatar6.svg','avatar5.svg','avatar4.svg',]\n                    \n                \n                    \n                        \n                                Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showSuccess\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/sign-up/choose-avatar/choose-avatar.component.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../shared/services/auth.service';\n\n@Component({\n  selector: 'app-choose-avatar',\n  imports: [ CommonModule ],\n  standalone: true,\n  templateUrl: './choose-avatar.component.html',\n  styleUrl: './choose-avatar.component.scss'\n})\nexport class ChooseAvatarComponent {\n  @Input() userData: any = {name: \"\", email: \"\", password: \"\", privacy: false, photoURL: \"\"};\n  @Output() backward = new EventEmitter();\n\n  activePic:number = -1 ;\n  profilesPics: string[] = ['avatar2.svg','avatar1.svg','avatar3.svg','avatar6.svg','avatar5.svg','avatar4.svg',];\n  path:string = \"/img/avatars/\";\n  showSuccess: boolean = false;\n\n\n  /**\n   * Constructor for ChooseAvatarComponent.\n   * @param {Router} router - The Angular Router service.\n   * @param {AuthService} auth - The authentication service.\n   */\n  constructor(private auth: AuthService) {}\n\n\n  /**\n   * Emits the backward event to go back to the previous step.\n   */\n  back() {\n    this.backward.emit();\n  }\n\n\n  /**\n   * Sets the active profile picture.\n   * @param {number} index - The index of the selected profile picture.\n   */\n  setActive(index:number) {\n    this.activePic = index;\n  }\n\n\n  /**\n   * Handles the sign-up process when the avatar is chosen.\n   */\n  onSignup(){\n    this.showSuccess = true;\n  }\n\n\n  /**\n   * Completes the sign-up process by setting the user's avatar and registering the user.\n   */\n  signUpAvatar() {\n    this.userData.photoURL = `${this.path}${this.profilesPics[this.activePic]}`;\n    this.auth.register(this.userData.email, this.userData.password, this.userData.name, this.userData.photoURL);\n    this.onSignup();\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n        \n        \n          \n        \n      \n    \n    Wähle deinen Avatar\n  \n  \n    \n    \n  \n  \n    \n      {{ userData.name }}\n      Aus der Liste wählen\n    \n    \n      \n        \n      \n    \n  \n  \n    Weiter\n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                              Wähle deinen Avatar                          {{ userData.name }}      Aus der Liste wählen                                        Weiter  '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ChooseAvatarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CreatemessageComponent.html":{"url":"components/CreatemessageComponent.html","title":"component - CreatemessageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CreatemessageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/createmessage/createmessage.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-createmessage\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            FormsModule\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./createmessage.component.html\n            \n\n\n\n            \n                styleUrl\n                ./createmessage.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelResults\n                            \n                            \n                                input\n                            \n                            \n                                mailadressResults\n                            \n                            \n                                privateChannelResults\n                            \n                            \n                                searchFor\n                            \n                            \n                                searchText\n                            \n                            \n                                userResults\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearResults\n                            \n                            \n                                clickChannel\n                            \n                            \n                                clickUser\n                            \n                            \n                                deleteSearch\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onInputChange\n                            \n                            \n                                startChannelSearch\n                            \n                            \n                                startDefaultSearch\n                            \n                            \n                                startUsersSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    userId\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(searchService: SearchService, authService: AuthService, sharedService: SharedService, mentionService: MentionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/createmessage/createmessage.component.ts:23\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the CreatemessageComponent.\nInitializes the component by loading user and channel data and sets up\nsubscriptions to various search results and shared service observables.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                        SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle search operations.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage authentication operations.\n\n\n                                                        \n                                                \n                                                \n                                                        sharedService\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to manage shared data and operations.\n\n\n                                                        \n                                                \n                                                \n                                                        mentionService\n                                                  \n                                                        \n                                                                        MentionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to handle mention-related operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearResults\n                        \n                    \n                \n            \n            \n                \nclearResults()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Clears all search results and resets the component's results arrays to empty arrays.\nThis method is called when the component is initialized and when the search input field is cleared.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clickChannel\n                        \n                    \n                \n            \n            \n                \nclickChannel(target: string, channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:105\n                        \n                    \n\n\n            \n                \n                        Handles a click event on a channel result.\nUpdates the search text with the selected channel's target string and sets relevant\nshared service values for targeting a channel. Clears existing search results.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe target string for the clicked channel.\n\n\n                                            \n                                        \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the clicked channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clickUser\n                        \n                    \n                \n            \n            \n                \nclickUser(target: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:85\n                        \n                    \n\n\n            \n                \n                        Handles a click event on a user result.\nUpdates the search text with the selected user's target string and sets relevant\nshared service values for targeting a user. Inserts the target text into the\nmessage box and focuses it. Clears existing search results.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe target string for the clicked user.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user ID of the clicked user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteSearch\n                        \n                    \n                \n            \n            \n                \ndeleteSearch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:198\n                        \n                    \n\n\n            \n                \n                        Deletes the current search input and resets the state of the search box.\nThis method is called when the user clicks the \"X\" button in the search box.\nIt resets the state of the search box, clears the search input, and removes\nany search results that may be currently displayed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Initializes the component by clearing existing search results and deleting any saved search data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onInputChange\n                        \n                    \n                \n            \n            \n                \nonInputChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:121\n                        \n                    \n\n\n            \n                \n                        Handles input changes in the search bar.\nStarts a search for channels if the first character is '#', for users if the first\ncharacter is '@', and for a default search otherwise.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startChannelSearch\n                        \n                    \n                \n            \n            \n                \nstartChannelSearch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Initiates a search for channels based on the current search text.\nIf the search text length is 1, it triggers a search for all public channels the user is a member of.\nOtherwise, it searches for channels with names matching the search text (excluding the initial character).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startDefaultSearch\n                        \n                    \n                \n            \n            \n                \nstartDefaultSearch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:171\n                        \n                    \n\n\n            \n                \n                        Initiates a search for users based on the current search text.\nIf the search text length is 0, it triggers a search for all users.\nOtherwise, it searches for users with emails matching the search text.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startUsersSearch\n                        \n                    \n                \n            \n            \n                \nstartUsersSearch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/createmessage/createmessage.component.ts:155\n                        \n                    \n\n\n            \n                \n                        Initiates a search for users based on the current search text.\nIf the search text length is 1, it triggers a search for all users.\nOtherwise, it searches for users with names matching the search text (excluding the initial character).\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelResults\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/createmessage/createmessage.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/main/createmessage/createmessage.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mailadressResults\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/createmessage/createmessage.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        privateChannelResults\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/createmessage/createmessage.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchFor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/main/createmessage/createmessage.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/main/createmessage/createmessage.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userResults\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/createmessage/createmessage.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        userId\n                    \n                \n\n                \n                    \n                        getuserId()\n                    \n                \n                            \n                                \n                                    Defined in src/app/main/createmessage/createmessage.component.ts:186\n                                \n                            \n                    \n                        \n                                The user ID of the currently signed-in user.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SearchService } from '../../shared/services/search.service';\nimport { AuthService } from '../../shared/services/auth.service';\nimport { SharedService } from '../../shared/services/newmessage.service';\nimport { MentionService } from '../../shared/services/mention.service';\n\n@Component({\n  selector: 'app-createmessage',\n  standalone: true,\n  imports: [FormsModule, CommonModule],\n  templateUrl: './createmessage.component.html',\n  styleUrl: './createmessage.component.scss',\n})\nexport class CreatemessageComponent implements OnInit {\n  searchText: string = '';\n  searchFor: string = '';\n  userResults: any[] = [];\n  channelResults: any[] = [];\n  privateChannelResults: any[] = [];\n  mailadressResults: any[] = [];\n  input: boolean = true;\n\n/**\n * Constructs a new instance of the CreatemessageComponent.\n *\n * Initializes the component by loading user and channel data and sets up \n * subscriptions to various search results and shared service observables.\n *\n * @param searchService - Service to handle search operations.\n * @param authService - Service to manage authentication operations.\n * @param sharedService - Service to manage shared data and operations.\n * @param mentionService - Service to handle mention-related operations.\n */\n  constructor(\n    private searchService: SearchService,\n    private authService: AuthService,\n    private sharedService: SharedService,\n    private mentionService: MentionService,\n  ) {\n    this.searchService.loadUsers(this.userId);\n    this.searchService.loadChannels();\n    this.searchService.userResults$.subscribe((results) => {this.userResults = results;});\n    this.searchService.channelResults$.subscribe((results) => {this.channelResults = results;});\n    this.searchService.privateChannelResults$.subscribe((results) => {this.privateChannelResults = results;});\n    this.sharedService.searchString$.subscribe((value) => {\n      this.searchText = value;\n      this.onInputChange();\n    });\n  }\n\n\n/**\n * Initializes the component by clearing existing search results and deleting any saved search data.\n */\n  ngOnInit() {\n    this.clearResults();\n    this.deleteSearch();\n  }\n\n\n  /**\n   * Clears all search results and resets the component's results arrays to empty arrays.\n   * This method is called when the component is initialized and when the search input field is cleared.\n   */\n  clearResults() {\n    this.userResults = [];\n    this.channelResults = [];\n    this.privateChannelResults = [];\n    this.mailadressResults = [];\n  }\n\n\n/**\n * Handles a click event on a user result.\n * \n * Updates the search text with the selected user's target string and sets relevant\n * shared service values for targeting a user. Inserts the target text into the \n * message box and focuses it. Clears existing search results.\n *\n * @param {string} target - The target string for the clicked user.\n * @param {string} userId - The user ID of the clicked user.\n */\n  clickUser(target: string, userId: string) {\n    this.searchText = target;\n    this.sharedService.setTargetString('toUser');\n    this.sharedService.setSearchString(target);\n    this.sharedService.setUserIdString(userId);\n    this.input = false;\n    this.mentionService.insertTextAndFocus(target, 'messagebox')\n    this.clearResults();\n  }\n\n\n/**\n * Handles a click event on a channel result.\n * \n * Updates the search text with the selected channel's target string and sets relevant\n * shared service values for targeting a channel. Clears existing search results.\n *\n * @param {string} target - The target string for the clicked channel.\n * @param {string} channelId - The ID of the clicked channel.\n */\n  clickChannel(target: string, channelId: string) {\n    this.searchText = target;\n    this.sharedService.setTargetString('toChannel');\n    this.sharedService.setSearchString(target);\n    this.sharedService.setChannelIdString(channelId);\n    this.input = false;\n    this.clearResults();\n  }\n\n\n/**\n * Handles input changes in the search bar.\n * \n * Starts a search for channels if the first character is '#', for users if the first\n * character is '@', and for a default search otherwise.\n */\n  onInputChange() {\n    if (this.searchText[0] === '#') {\n      this.startChannelSearch();\n    } else if (this.searchText[0] === '@') {\n      this.startUsersSearch();\n    }\n    else {\n      this.startDefaultSearch();\n    }\n  }\n\n\n/**\n * Initiates a search for channels based on the current search text.\n * \n * If the search text length is 1, it triggers a search for all public channels the user is a member of.\n * Otherwise, it searches for channels with names matching the search text (excluding the initial character).\n */\n  startChannelSearch() {\n      this.searchFor = 'channels';\n      if (this.searchText.length == 1) {\n        this.searchService.searchChannels('', this.userId, 'channel');\n      } else {\n        this.searchService.searchChannels(this.searchText.slice(1),this.userId,'channel');\n      }\n  }\n\n\n  /**\n   * Initiates a search for users based on the current search text.\n   * \n   * If the search text length is 1, it triggers a search for all users.\n   * Otherwise, it searches for users with names matching the search text (excluding the initial character).\n   */\n  startUsersSearch() {\n    this.searchFor = 'users';\n    if (this.searchText.length == 1) {\n      this.searchService.searchUsers('', 'name');\n    } else {\n      this.searchService.searchUsers(this.searchText.slice(1), 'name');\n    }\n  }\n\n\n  /**\n   * Initiates a search for users based on the current search text.\n   * \n   * If the search text length is 0, it triggers a search for all users.\n   * Otherwise, it searches for users with emails matching the search text.\n   */\n  startDefaultSearch() {\n    this.searchFor = 'users';\n    if (this.searchText.length == 0) {\n      this.searchService.searchUsers('', 'email');\n    } else {\n      this.searchService.searchUsers(this.searchText, 'email');\n    }\n  }\n\n\n  /**\n   * The user ID of the currently signed-in user.\n   * \n   * @returns The user ID of the currently signed-in user.\n   */\n  get userId() {\n    return this.authService.userId() as string;\n  }\n\n\n  /**\n   * Deletes the current search input and resets the state of the search box.\n   * \n   * This method is called when the user clicks the \"X\" button in the search box.\n   * It resets the state of the search box, clears the search input, and removes\n   * any search results that may be currently displayed.\n   */\n  deleteSearch() {\n    this.input = true;\n    this.searchText = '';\n    this.mentionService.clearInput('messagebox')\n  }\n}\n    \n\n    \n        Neue Nachricht\n\n    @if(input) {\n    \n    } @else {\n    \n        \n            {{ searchText }}\n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    }\n    @if (searchText && userResults.length > 0 && searchFor == 'users') {\n    \n        \n            {{'@'+result.name}}\n        \n    \n    }\n    @if (searchText && channelResults.length > 0 && searchFor == 'channels') {\n    \n        \n            {{'#'+result.name}}\n        \n    \n    }\n    @if (searchText && userResults.length > 0 && searchFor == 'emails') {\n    \n        \n            {{result.name}}\n        \n    \n    }\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Neue Nachricht    @if(input) {        } @else {                        {{ searchText }}                                                                                                                                                }    @if (searchText && userResults.length > 0 && searchFor == \\'users\\') {                        {{\\'@\\'+result.name}}                }    @if (searchText && channelResults.length > 0 && searchFor == \\'channels\\') {                        {{\\'#\\'+result.name}}                }    @if (searchText && userResults.length > 0 && searchFor == \\'emails\\') {                        {{result.name}}                }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CreatemessageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomUser.html":{"url":"interfaces/CustomUser.html","title":"interface - CustomUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/user.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            photoURL\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        photoURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        photoURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, signal } from '@angular/core';\nimport { Firestore, collection, deleteDoc, doc, getDoc, onSnapshot, updateDoc,  } from '@angular/fire/firestore';\nimport { BehaviorSubject, Observable, firstValueFrom, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { UserModel } from '../../models/user';\nimport { confirmPasswordReset, sendPasswordResetEmail, updatePassword, User } from 'firebase/auth';\nimport { Auth, updateEmail, updateProfile } from '@angular/fire/auth';\nimport { Message, ThreadMessage } from '../../models/message';\n\nexport interface CustomUser {\n  userId: string;\n  name: string;\n  photoURL: string;\n  email: string;\n  status: boolean;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private userCache = new Map>();\n  private usersSubject = new BehaviorSubject([]);\n  users$ = this.usersSubject.asObservable();\n  loginError = signal('');\n\n\n  /**\n   * Initializes the UserService.\n   * @param {Firestore} firestore Firestore database service.\n   */\n  constructor(private firestore: Firestore,private auth: Auth) {\n    this.listenToUserChanges();\n  }\n\n\n  /**\n   * Listens to changes in the Firestore 'users' collection in real-time.\n   * Updates the user cache and emits the updated list of users through the usersSubject observable.\n   */\n  private listenToUserChanges() {\n    const usersCollection = collection(this.firestore, 'users');\n    onSnapshot(usersCollection, (snapshot) => {\n      const users = snapshot.docs.map((doc) => {\n        const data = doc.data() as CustomUser;\n        return { ...data };\n      });\n      users.forEach((user) => {\n        if (this.userCache.has(user.userId)) \n          this.userCache.get(user.userId)!.next(user);\n        else \n          this.userCache.set(user.userId, new BehaviorSubject(user));\n      });\n      this.usersSubject.next(users);\n    });\n  }\n\n\n  /**\n   * Returns an observable that emits the user data for the given user ID.\n   * @param {string} userId The ID of the user to retrieve the data for.\n   * @returns An observable that emits the user data.\n   */\n  getUserById(userId: string): Observable {\n    if (this.userCache.has(userId)) return this.userCache.get(userId)!.asObservable();\n    const userSubject = this.createUserBehaviorSubject(userId);\n    this.userCache.set(userId, userSubject);\n    from(getDoc(doc(this.firestore, `users/${userId}`)))\n      .pipe(map((docSnap) => {\n          if (docSnap.exists()) {\n            const userData = { userId, ...docSnap.data() } as CustomUser;\n            userSubject.next(userData);\n          }\n        })\n      )\n      .subscribe();\n    return userSubject.asObservable();\n  }\n\n\n  /**\n   * Creates a new BehaviorSubject for the given user ID.\n   * The BehaviorSubject is initialized with a default user object,\n   * which is used to represent the user in the user list if the user data is not available.\n   * The default user object contains the user ID, an empty name, photo URL, email and a status of false.\n   * @param {string} userId The ID of the user to create the BehaviorSubject for.\n   * @returns A new BehaviorSubject with the default user object as initial value.\n   */\n  createUserBehaviorSubject(userId: string): BehaviorSubject {\n    return new BehaviorSubject({\n      userId,\n      name: 'Unbekannt',\n      photoURL: '',\n      email: '',\n      status: false,\n    });\n  }\n\n\n  /**\n   * Retrieves the avatar URL of a user given their ID.\n   * @param {string} userId The user ID to retrieve the avatar URL for.\n   * @returns An observable that emits the avatar URL of the user.\n   */\n  getuserAvatar(userId: string): Observable {\n    return this.getUserById(userId).pipe(map((user) => user.photoURL || '/img/avatars/picPlaceholder.svg'));\n  }\n\n\n  /**\n   * Retrieves the online status of a user given their ID.\n   * @param {string} userId - The user ID to retrieve the status for.\n   * @returns {Observable} - An observable that emits 'online' if the user is online,\n   */\n  getuserStatus(userId: string): Observable {\n    return this.getUserById(userId).pipe(map((user) => (user.status ? 'online' : 'offline')));\n  }\n\n\n  /**\n   * Retrieves the name of a user given their ID.\n   * @param {string} userId The user ID to retrieve the name for.\n   * @returns An observable that emits the user name.\n   * If the user is found in Firestore, it emits the user name stored in Firestore.\n   * If the user is not found, it emits 'Unbekannt'.\n   */\n  getuserName(userId: string): Observable {\n    return this.getUserById(userId).pipe(map((user) => user.name ? user.name : 'Unbekannt'));\n  }\n\n\n  /**\n   * Retrieves user data for a list of user IDs.\n   * @param userIds An array of user IDs for which to retrieve user data.\n   * @returns A promise that resolves to an array of `User` objects.\n   */\n  async getUsernamesByIds(userIds: string[]): Promise {\n    const users: CustomUser[] = [];\n    for (const userId of userIds) {\n      const user = await firstValueFrom(this.getUserById(userId));\n      users.push(user);\n    }\n    return users;\n  }\n\n\n  /**\n   * Creates and returns a `UserModel` object with the provided user data.\n   * @param {string} userId - The unique identifier for the user.\n   * @param {string} username - The name of the user.\n   * @param {string} email - The email address of the user.\n   * @param {string} avatarURL - The URL for the user's avatar image.\n   * @param {string} [provider=''] - The provider of the user's authentication. Defaults to an empty string.\n   * @param {boolean} [status=false] - The online status of the user. Defaults to false.\n   * @returns {UserModel} - A `UserModel` object populated with the provided data.\n   */\n  setUserData(\n    userId: string,\n    username: string,\n    email: string,\n    avatarURL: string,\n    provider: string = '',\n    status: boolean = false\n  ): UserModel {\n    return {\n      userId,\n      name: username,\n      email,\n      photoURL: avatarURL,\n      channels: [],\n      privateNoteRef: '',\n      status: status,\n      provider: provider,\n    };\n  }\n\n\n  /**\n   * Returns a `User` object with default values for an anonymous user.\n   * @param {string} userId - The ID of the anonymous user.\n   * @returns A `User` object with default values for an anonymous user.\n   */\n  setAnonymousUserData(userId: string): UserModel {\n      return {\n        userId,\n        name: 'Gast',\n        email: 'gast@gast.de',\n        photoURL: 'img/avatars/picPlaceholder.svg',\n        channels: [],\n        privateNoteRef: '',\n        status: true,\n        provider: 'anonymous',\n      };\n  }\n\n\n  /**\n   * Sends a password reset email to the user with the given email address.\n   * @param email - The email address of the user.\n   * @returns A promise that resolves when the password reset email has been successfully sent.\n   */\n  resetPassword(email: string): Promise {\n    return sendPasswordResetEmail(this.auth, email);\n  }\n\n\n  /**\n   * Updates the password for the currently authenticated user.\n   * @param newPassword - The new password to set for the user.\n   * @returns A promise that resolves when the password has been successfully updated.\n   */\n  updateUserPassword(newPassword: string): Promise {\n    const currentUser = this.auth.currentUser;\n    if (currentUser) \n      return updatePassword(currentUser, newPassword);\n    else \n      return Promise.reject('Kein Benutzer ist angemeldet.');\n  }\n\n\n  /**\n   * Stores the given user data in the session storage.\n   * @param userData - A UserModel object containing the user data to be stored.\n   */\n  setUserDataInStorage(userData: UserModel) {\n    sessionStorage.setItem('userData', JSON.stringify(userData));\n  }\n\n\n  /**\n   * Updates a user's data in Firestore with the given data.\n   * @param {string} userId - The ID of the user to update.\n   * @param {Partial} updatedData - The user data to update.\n   * @returns {Promise} - A promise that resolves when the update operation is complete.\n   */\n  updateDataInFirestore(userId: string, updatedData: Partial): Promise {\n    const userDocRef = doc(this.firestore, `users/${userId}`);\n    return updateDoc(userDocRef, updatedData);\n  }\n\n\n  /**\n   * Retrieves a user object for the given user ID from Firestore.\n   * @param {string | null} userId - The ID of the user to retrieve.\n   * @returns {Promise} - A promise that resolves to a `UserModel` object if the user is found in Firestore,\n   * or `null` if the user is not found.\n   */\n  async getUserForMessageById(userId: string | null): Promise {\n    const userDoc = await getDoc(doc(this.firestore, `users/${userId}`));\n    return userDoc.exists() ? (userDoc.data() as UserModel) : null;\n  }\n\n\n  /**\n   * Confirms the password reset process using the given out-of-band code and new password.\n   * @param oobCode - The out-of-band code received for password reset.\n   * @param newPassword - The new password to set for the user.\n   * @returns A promise that resolves when the password has been successfully reset.\n   */\n  confirmPasswordReset(oobCode: string, newPassword: string): Promise {\n    return confirmPasswordReset(this.auth, oobCode, newPassword);\n  }\n\n\n  /**\n   * Checks if a user exists in Firestore given a user ID.\n   * @param userId - The ID of the user to check.\n   * @returns A promise that resolves to true if the user exists in Firestore and false otherwise.\n   */\n  async checkUserId(userId: string) {\n    if (userId) {\n      const userDoc = await getDoc(doc(this.firestore, 'users', userId));\n      return userDoc.exists();\n    } else \n      return false;\n  }\n\n\n  /**\n   * Updates the user data in Firestore and in the Firebase Authentication service.\n   * @param user The User object to update.\n   * @param userId The ID of the user to update.\n   * @param updatedData The data to update for the user.\n   * @returns A promise that resolves when the user data is updated.\n   */\n  async updateUserDataInDatabase(user : User,userId: string, updatedData: Partial) {\n    if (user) {\n      if (updatedData.name) {\n        await updateProfile(user, { displayName: updatedData.name });\n        this.updateDataInFirestore(userId, { name: updatedData.name });\n      }\n      if (updatedData.email) {\n        await updateEmail(user, updatedData.email);\n        this.updateDataInFirestore(userId, { email: updatedData.email });\n      }\n    }\n  }\n\n\n  /**\n   * Handles a login error by setting the error message in the `loginError` observable and rethrowing the error.\n   * @param error - The error object from the login operation.\n   */\n  public handleLoginError(error: any): void {\n    if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') \n      this.loginError.set('Invalid email or password');\n    else \n      this.loginError.set('Unexpected error occurred');\n    throw error;\n  }\n\n\n  /**\n   * Deletes the anonymous user from Firestore and removes the user from the authentication system.\n   */\n  deleteAnonymousUserFromFirestore(): void {\n    const user = this.auth.currentUser;\n    if (user) {\n      deleteDoc(doc(this.firestore, `users/${user.uid}`));\n      user.delete()\n    }\n  }\n\n\n  /**\n   * Generates a ThreadMessage object based on the active user and the message content.\n   * @returns {ThreadMessage} - The generated ThreadMessage object.\n   */\n  async generateThreadMessageObject( activeUserId: string | null, messageContent: string): Promise {\n    let user: UserModel = (this.getUserForMessageById(activeUserId)) as unknown as UserModel;\n    const threadMessage: ThreadMessage = {\n      createdBy: activeUserId || '',\n      creatorName: user.name || '',\n      creatorPhotoURL: user.photoURL || '',\n      message: messageContent.trim(),\n      timestamp: new Date(),\n      reactions: [],\n      isThreadMessage: true,\n      sameDay: false,\n    };\n    return threadMessage;\n  }\n\n\n  /**\n   * Generates a Message object based on the user, channel ID, active user ID and the message content.\n   * @param user The UserModel of the user that is sending the message.\n   * @param channelId The ID of the channel this message is being sent to.\n   * @param activeUserId The ID of the currently logged in user.\n   * @param messageContent The content of the message.\n   * @returns The generated Message object.\n   */\n  generateMessageObject(user : UserModel, channelId: string | undefined, activeUserId: string | null, messageContent: string): Omit {\n    return {\n      channelId: channelId || '',\n      createdBy: activeUserId || '',\n      creatorName: user.name || '',\n      creatorPhotoURL: user.photoURL || '',\n      message: messageContent.trim(),\n      timestamp: new Date(),\n      members: [],\n      reactions: [],\n      sameDay: false\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DialogComponent.html":{"url":"components/DialogComponent.html","title":"component - DialogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DialogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/header/usermenu/dialog/dialog.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dialog\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                            FormsModule\n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./dialog.component.html\n            \n\n\n\n            \n                styleUrl\n                ./dialog.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                userDialog$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onOpenMobileProfile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                mobileDialog\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                dialogChange\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userDialog$: UserDialogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/header/usermenu/dialog/dialog.component.ts:25\n                            \n                        \n\n                \n                    \n                            Creates an instance of DialogComponent and performs an initial check\nto see if data changes are allowed using the UserDialogService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userDialog$\n                                                  \n                                                        \n                                                                        UserDialogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe service responsible for managing user dialog interactions.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        mobileDialog\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/header/usermenu/dialog/dialog.component.ts:25\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        dialogChange\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/header/usermenu/dialog/dialog.component.ts:24\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onOpenMobileProfile\n                        \n                    \n                \n            \n            \n                \nonOpenMobileProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/header/usermenu/dialog/dialog.component.ts:42\n                        \n                    \n\n\n            \n                \n                        Opens the user profile dialog with a mobile layout.\nThis method calls openProfile on the UserDialogService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userDialog$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDialogService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/usermenu/dialog/dialog.component.ts:33\n                        \n                    \n\n            \n                \n                    - The service responsible for managing user dialog interactions.\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  Component,\n  Output,\n  EventEmitter,\n  OnInit,\n  Input,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { UserDialogService } from '../../../services/user-dialog.service';\n\n@Component({\n  selector: 'app-dialog',\n  standalone: true,\n  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],\n  templateUrl: './dialog.component.html',\n  styleUrl: './dialog.component.scss',\n})\nexport class DialogComponent {\n  @Output() dialogChange = new EventEmitter();\n  @Input() mobileDialog = false;\n\n/**\n * Creates an instance of DialogComponent and performs an initial check \n * to see if data changes are allowed using the UserDialogService.\n * \n * @param userDialog$ - The service responsible for managing user dialog interactions.\n */\n  constructor(public userDialog$: UserDialogService,) {\n    this.userDialog$.dataChangeAllowedCheck();\n  }\n\n\n/**\n * Opens the user profile dialog with a mobile layout.\n * This method calls `openProfile` on the `UserDialogService`.\n */\n  onOpenMobileProfile(){\n    this.userDialog$.openProfile();\n  }\n}\n\n    \n\n    \n        @if (userDialog$.dialog) { @if(mobileDialog){\n\n  \n  \n    \n      \n    \n    Profil\n  \n  \n    \n      \n        \n      \n    \n\n    Impressum\n  \n  \n    \n      \n        \n      \n    \n    Datenschutz\n  \n  \n    \n      \n    \n    Logout\n  \n\n} @else {\n\n  Profil\n  Impressum\n  Datenschutz\n  Logout\n\n} } @else if (userDialog$.profileDialog) {\n\n  \n    \n      Profil\n      @if(userDialog$.exitActiv) {\n      \n        \n          \n        \n        \n          \n        \n      \n      } @else {\n      \n        \n          \n        \n        \n          \n        \n      \n      }\n    \n    \n      \n    \n    \n      \n        {{ userDialog$.userData?.name }}\n        Bearbeiten\n      \n      \n        \n        @if (userDialog$.userData?.status) {\n        Aktiv\n        } @else {\n        Offline\n        }\n      \n    \n    \n      \n      \n        E-Mail-Adresse\n        {{ userDialog$.userData?.email }}\n      \n    \n  \n\n} @else if (userDialog$.profileDialogEdit){\n\n  \n    \n      Dein Profil bearbeiten\n      @if(userDialog$.exitActiv) {\n      \n        \n          \n        \n        \n          \n        \n      \n      } @else {\n      \n        \n          \n        \n        \n          \n        \n      \n      }\n    \n    \n      \n    \n\n    \n      \n        \n        Vollständiger Name\n      \n      \n      \n        Feld darf nicht leer sein.\n      \n      \n        Bitte Vor- und Nachnamen angeben.\n      \n      \n        Maximal 25 Buchstaben\n      \n    \n\n    \n      \n        \n        E-Mail-Adresse\n      \n      \n      \n        Feld darf nicht leer sein.\n      \n      \n        E-Mail ist ungültig.\n      \n    \n\n    \n      \n        Abbrechen\n      \n      \n        Speichern\n      \n    \n  \n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (userDialog$.dialog) { @if(mobileDialog){                      Profil                                    Impressum                                    Datenschutz                      Logout  } @else {  Profil  Impressum  Datenschutz  Logout} } @else if (userDialog$.profileDialog) {            Profil      @if(userDialog$.exitActiv) {                                                                      } @else {                                                                      }                                    {{ userDialog$.userData?.name }}        Bearbeiten                            @if (userDialog$.userData?.status) {        Aktiv        } @else {        Offline        }                                  E-Mail-Adresse        {{ userDialog$.userData?.email }}            } @else if (userDialog$.profileDialogEdit){            Dein Profil bearbeiten      @if(userDialog$.exitActiv) {                                                                      } @else {                                                                      }                                            Vollständiger Name                          Feld darf nicht leer sein.                    Bitte Vor- und Nachnamen angeben.                    Maximal 25 Buchstaben                                    E-Mail-Adresse                          Feld darf nicht leer sein.                    E-Mail ist ungültig.                            Abbrechen                    Speichern            }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DialogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EditmessageComponent.html":{"url":"components/EditmessageComponent.html","title":"component - EditmessageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EditmessageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/shared/editmessage/editmessage.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-editmessage\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./editmessage.component.html\n            \n\n\n\n            \n                styleUrl\n                ./editmessage.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                            \n                                isThread\n                            \n                            \n                                messageDelete\n                            \n                            \n                                messageForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkCreatorWithActiveUser\n                            \n                            \n                                checkKeyStatus\n                            \n                            \n                                deleteMainMessage\n                            \n                            \n                                deleteMessage\n                            \n                            \n                                deleteThreadMessage\n                            \n                            \n                                initiMessageOnSubmit\n                            \n                            \n                                initThreadMessageOnSubmit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onCancel\n                            \n                            \n                                onSubmit\n                            \n                            \n                                showToastMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, messagesService: MessagesService, auth: AuthService, dialogRef: MatDialogRef, toastMessageService: ToastMessageService, sharedService: SharedService, data: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/shared/editmessage/editmessage.component.ts:19\n                            \n                        \n\n                \n                    \n                            Constructs an instance of the EditmessageComponent.\nInitializes the messageForm with empty message and reactions fields.\nSets isThread and messageDelete properties based on the injected data.\nLogs an error if the message is a thread but parentMessageId is missing.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nFormBuilder service used to create a FormGroup for the message form.\n\n\n                                                        \n                                                \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for managing message operations.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAuthService for authentication operations.\n\n\n                                                        \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReference to the dialog containing this component.\n\n\n                                                        \n                                                \n                                                \n                                                        toastMessageService\n                                                  \n                                                        \n                                                                        ToastMessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for displaying toast messages.\n\n\n                                                        \n                                                \n                                                \n                                                        sharedService\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInjected data containing the message details, including:\nInitializes the messageForm with empty message and reactions fields.\nSets isThread and messageDelete properties based on the injected data.\nLogs an error if the message is a thread but parentMessageId is missing.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkCreatorWithActiveUser\n                        \n                    \n                \n            \n            \n                \ncheckCreatorWithActiveUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Checks if the user stored in the message data equals the active user ID.\nThis is used to check if the user is allowed to edit or delete the message.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \ntrue if the user equals the active user, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkKeyStatus\n                        \n                    \n                \n            \n            \n                \ncheckKeyStatus(event: KeyboardEvent, chat: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:248\n                        \n                    \n\n\n            \n                \n                        Checks the key status of the given event and performs the corresponding action.\nIf the user presses the Enter key without holding down the Shift key, the function\nperforms the action depending on the given chat type.\nIf chat === 'save', the function calls onSubmit().\nIf chat === 'deleteMessage', the function calls deleteMessage().\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event to check the key status from.\n\n                                            \n                                        \n                                        \n                                                chat\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The type of chat to check against.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteMainMessage\n                        \n                    \n                \n            \n            \n                \ndeleteMainMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:183\n                        \n                    \n\n\n            \n                \n                        Deletes the main message in the Firestore DB.\nThe message can only be deleted by the creator of the message.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteMessage\n                        \n                    \n                \n            \n            \n                \ndeleteMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:162\n                        \n                    \n\n\n            \n                \n                        Deletes the message based on the provided data in the Firestore DB.\nThe message can only be deleted by the creator of the message.\nDepending on the message type, either a thread message or a main message will be deleted.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteThreadMessage\n                        \n                    \n                \n            \n            \n                \ndeleteThreadMessage(docId?: string, parentMessageId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:203\n                        \n                    \n\n\n            \n                \n                        Deletes a thread message in the Firestore DB.\nThe message can only be deleted by the creator of the message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe ID of the document (thread message) to be deleted.\n\n\n                                            \n                                        \n                                        \n                                                parentMessageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nThe ID of the parent message to which the thread message belongs.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initiMessageOnSubmit\n                        \n                    \n                \n            \n            \n                \ninitiMessageOnSubmit(updatedData: Message)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:104\n                        \n                    \n\n\n            \n                \n                        Updates the message with the new data in Firestore.\nResets the form and closes the dialog after a successful update.\nIf the message does not have a docId, it will not be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedData\n                                            \n                                                            Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The updated message data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initThreadMessageOnSubmit\n                        \n                    \n                \n            \n            \n                \ninitThreadMessageOnSubmit(updatedData: ThreadMessage)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:125\n                        \n                    \n\n\n            \n                \n                        Updates the thread message with the new data in Firestore.\nResets the form and closes the dialog after a successful update.\nIf the message does not have a docId, it will not be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                updatedData\n                                            \n                                                            ThreadMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The updated thread message data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:65\n                        \n                    \n\n\n            \n                \n                        Initializes the component by setting the initial form values for the message form.\nThese values are retrieved from the injected data.\nIf the message is a thread, the parent message ID is not set in the form.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCancel\n                        \n                    \n                \n            \n            \n                \nonCancel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:232\n                        \n                    \n\n\n            \n                \n                        Cancels the edit mode and closes the dialog.\nResets the message form.\n\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onSubmit\n                        \n                    \n                \n            \n            \n                \nonSubmit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Handles the submission of the message form.\nChecks if the form is valid and if the current user is the creator of the message.\nIf both conditions are met, it updates the message with the new data.\nIf the message is a thread, it calls initThreadMessageOnSubmit to update the thread,\notherwise it calls initiMessageOnSubmit to update the main message.\nIf the form is invalid or the user is not the creator, it logs an error message.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showToastMessage\n                        \n                    \n                \n            \n            \n                \nshowToastMessage(text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/editmessage/editmessage.component.ts:220\n                        \n                    \n\n\n            \n                \n                        Shows a toast message with the given text after a short delay.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe text to be displayed in the toast message.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/editmessage/editmessage.component.ts:40\n                        \n                    \n\n            \n                \n                    - Injected data containing the message details, including:\nInitializes the `messageForm` with empty message and reactions fields.\nSets `isThread` and `messageDelete` properties based on the injected data.\nLogs an error if the message is a thread but `parentMessageId` is missing.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/editmessage/editmessage.component.ts:37\n                        \n                    \n\n            \n                \n                    - Reference to the dialog containing this component.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isThread\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/editmessage/editmessage.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/editmessage/editmessage.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/editmessage/editmessage.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component,Inject  } from '@angular/core';\nimport { MessagesService } from '../../../shared/services/messages.service';\nimport { Message, ThreadMessage } from '../../../models/message';\nimport { AuthService } from '../../../shared/services/auth.service';\nimport { FormBuilder, FormGroup, Validators,ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ToastMessageService } from '../../../shared/services/toastmessage.service';\nimport { SharedService } from '../../../shared/services/newmessage.service';\n@Component({\n  selector: 'app-editmessage',\n  standalone: true,\n  imports: [ReactiveFormsModule],\n  templateUrl: './editmessage.component.html',\n  styleUrl: './editmessage.component.scss'\n})\nexport class EditmessageComponent {\n  messageForm: FormGroup;\n  messageDelete: boolean;\n  isThread: boolean;\n\n  /**\n   * Constructs an instance of the EditmessageComponent.\n   * @param fb - FormBuilder service used to create a FormGroup for the message form.\n   * @param messagesService - Service for managing message operations.\n   * @param auth - AuthService for authentication operations.\n   * @param dialogRef - Reference to the dialog containing this component.\n   * @param toastMessageService - Service for displaying toast messages.\n   * @param data - Injected data containing the message details, including:\n   * Initializes the `messageForm` with empty message and reactions fields.\n   * Sets `isThread` and `messageDelete` properties based on the injected data.\n   * Logs an error if the message is a thread but `parentMessageId` is missing.\n   */\n  constructor(\n    private fb: FormBuilder,\n    private messagesService: MessagesService,\n    private auth: AuthService,\n    public dialogRef: MatDialogRef,\n    private toastMessageService: ToastMessageService,\n    private sharedService: SharedService,\n    @Inject(MAT_DIALOG_DATA) public data: { \n      message: Partial; \n      deleteMessage: boolean; \n      thread: boolean; \n      parentMessageId?: string; \n      docId?: string \n    }\n  ) {\n    this.isThread = this.data.thread;\n    this.messageDelete = this.data.deleteMessage;\n    this.messageForm = this.fb.group({\n      message: ['', Validators.required],\n      reactions: [''],\n    });\n    if (this.isThread && !this.data.parentMessageId) {\n      console.error('parentMessageId fehlt für Thread-Nachricht');\n    }\n  }\n\n\n  /**\n   * Initializes the component by setting the initial form values for the message form.\n   * These values are retrieved from the injected data.\n   * If the message is a thread, the parent message ID is not set in the form.\n   */\n    ngOnInit(): void {\n      console.log('openEdit Compoponent',this.data.thread); \n      this.messageForm.setValue({\n        message: this.data.message.message || '',\n        reactions: this.data.message.reactions || [],\n      });\n    }\n\n\n  /**\n   * Handles the submission of the message form.\n   * Checks if the form is valid and if the current user is the creator of the message.\n   * If both conditions are met, it updates the message with the new data.\n   * If the message is a thread, it calls `initThreadMessageOnSubmit` to update the thread,\n   * otherwise it calls `initiMessageOnSubmit` to update the main message.\n   * If the form is invalid or the user is not the creator, it logs an error message.\n   */\n    onSubmit(): void {\n      if (this.messageForm.valid && this.checkCreatorWithActiveUser()) {\n        const updatedData = {...this.data.message,...this.messageForm.value};\n        if (this.isThread) {\n          if (!this.data.parentMessageId) \n            return console.error('Fehlende parentMessageId für Thread-Nachricht');\n          this.initThreadMessageOnSubmit(updatedData);\n        } else \n          this.initiMessageOnSubmit(updatedData);\n      } else if (!this.messageForm.valid) \n        console.error('Formular ist ungültig.');\n      else if (!this.checkCreatorWithActiveUser()) \n        console.error('Nur der Ersteller kann die Nachricht bearbeiten.');\n    }\n\n\n  /**\n   * Updates the message with the new data in Firestore.\n   * Resets the form and closes the dialog after a successful update.\n   * If the message does not have a docId, it will not be updated.\n   * @param updatedData The updated message data.\n   */\n  initiMessageOnSubmit(updatedData: Message) {\n    if (updatedData.docId) {\n      this.messagesService.updateMessage(updatedData.docId, updatedData.createdBy, updatedData)\n      .then(() => {\n        this.messageForm.reset();\n        this.dialogRef.close();\n        this.showToastMessage('Nachricht aktualisiert');\n      })\n      .catch((error) => {\n        console.error('Fehler beim Aktualisieren der Nachricht:', error);\n      });\n    }\n  }\n\n\n  /**\n   * Updates the thread message with the new data in Firestore.\n   * Resets the form and closes the dialog after a successful update.\n   * If the message does not have a docId, it will not be updated.\n   * @param updatedData The updated thread message data.\n   */\n  initThreadMessageOnSubmit(updatedData: ThreadMessage) {\n    if (this.data.parentMessageId) {\n      this.messagesService.updateThreadMessage(\n        this.data.parentMessageId,\n        this.data.docId!,\n        this.auth.userId()!,\n        updatedData\n      )\n        .then(() => {\n          this.dialogRef.close();\n          this.showToastMessage('Nachricht aktualisiert');\n        })\n        .catch((error) => {\n          console.error('Fehler beim Aktualisieren der Thread-Nachricht:', error);\n        })\n    }\n  }\n\n\n  /**\n   * Checks if the user stored in the message data equals the active user ID.\n   * This is used to check if the user is allowed to edit or delete the message.\n   * @returns {boolean} - `true` if the user equals the active user, `false` otherwise.\n   */\n  checkCreatorWithActiveUser(): boolean {\n    const dataUser = this.data.message.createdBy;\n    const activeUser = this.auth.userId();\n    return dataUser === activeUser; \n  }\n\n\n  /**\n   * Deletes the message based on the provided data in the Firestore DB.\n   * The message can only be deleted by the creator of the message.\n   * Depending on the message type, either a thread message or a main message will be deleted.\n   * @returns {void}\n   */\n  deleteMessage(): void {\n    if (!this.checkCreatorWithActiveUser()) {\n      return console.error('Nur der Ersteller kann die Nachricht löschen.');\n    }\n    const docId = this.data.message.docId;\n    const parentMessageId = this.data.parentMessageId;\n    if (this.isThread == true) {\n      console.log('lösche Thread-Nachricht',docId, parentMessageId);\n      this.deleteThreadMessage(docId, parentMessageId);\n    } else {\n      console.log('lösche Haupt-Nachricht',docId);\n      this.deleteMainMessage();\n    }\n  }\n\n\n  /**\n   * Deletes the main message in the Firestore DB.\n   * The message can only be deleted by the creator of the message.\n   * @returns {void}\n   */\n  deleteMainMessage(){\n    const deleteMessage = this.data.message.docId;\n    if (!deleteMessage) {\n      return console.error('DocId fehlt für das Löschen der Nachricht.');\n    }\n    this.sharedService.deleteMessage(deleteMessage, this.auth.userId()!).then(() => {\n        this.dialogRef.close();\n        this.showToastMessage('Nachricht erfolgreich gelöscht');\n      })\n      .catch((error) => {console.error('Fehler beim Löschen der Nachricht:', error);});\n  }\n\n\n  /**\n   * Deletes a thread message in the Firestore DB.\n   * The message can only be deleted by the creator of the message.\n   * @param {string} docId - The ID of the document (thread message) to be deleted.\n   * @param {string} parentMessageId - The ID of the parent message to which the thread message belongs.\n   * @returns {void}\n   */\n  deleteThreadMessage(docId?: string, parentMessageId?: string) {\n    if (!docId || !parentMessageId) \n      return console.error('DocId oder ParentMessageId fehlt für das Löschen der Thread-Nachricht.');\n    this.sharedService.deleteThreadMessage(parentMessageId,docId)\n      .then(() => {\n        this.dialogRef.close();\n        this.showToastMessage('Nachricht erfolgreich gelöscht');\n      })\n      .catch((error) => {console.error('Fehler beim Löschen der Thread-Nachricht:', error);});\n  }\n\n\n  /**\n   * Shows a toast message with the given text after a short delay.\n   * @param {string} text - The text to be displayed in the toast message.\n   * @returns {void}\n   */\n  showToastMessage(text:string) {\n    setTimeout(() => {\n      this.toastMessageService.showToastSignal(text);\n    }, 500);\n  }\n\n  \n  /**\n   * Cancels the edit mode and closes the dialog.\n   * Resets the message form.\n   * @returns {void}\n   */\n  onCancel(): void { \n    console.log('Edit cancelled');\n    this.messageForm.reset();\n    this.dialogRef.close(); \n  }\n\n\n  /**\n   * Checks the key status of the given event and performs the corresponding action.\n   * If the user presses the Enter key without holding down the Shift key, the function\n   * performs the action depending on the given chat type.\n   * If `chat === 'save'`, the function calls `onSubmit()`.\n   * If `chat === 'deleteMessage'`, the function calls `deleteMessage()`.\n   * @param event The event to check the key status from.\n   * @param chat The type of chat to check against.\n   */\n  checkKeyStatus(event: KeyboardEvent, chat: string): void {\n    if (event.shiftKey && event.keyCode == 13) {\n      event.preventDefault();\n    } else if (event.keyCode == 13) {\n      if (chat === 'save') {\n        this.onSubmit();\n      } else if (chat === 'deleteMessage') {\n        this.deleteMessage();\n      }\n    }\n  }\n}\n\n    \n\n    \n        @if (this.data.deleteMessage) {\n    \n        \n            Are you sure you want to delete this message?\n        \n        Delete Message\n        Cancel\n    \n}\n@else {\n    \n        \n            Message\n            \n            \n        \n        Save\n        Cancel\n    \n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (this.data.deleteMessage) {                        Are you sure you want to delete this message?                Delete Message        Cancel    }@else {                        Message                                        Save        Cancel    }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EditmessageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/EmojiPickerComponent.html":{"url":"components/EmojiPickerComponent.html","title":"component - EmojiPickerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  EmojiPickerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/shared/emoji-picker/emoji-picker.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-emoji-picker\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            PickerComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./emoji-picker.component.html\n            \n\n\n\n            \n                styleUrl\n                ./emoji-picker.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onSelectEmoji\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                componentName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                emoji\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        componentName\n                    \n                \n                \n                    \n                        Type :     \"chatbox\" | \"messagebox\"\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/shared/emoji-picker/emoji-picker.component.ts:13\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        emoji\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/shared/emoji-picker/emoji-picker.component.ts:12\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onSelectEmoji\n                        \n                    \n                \n            \n            \n                \nonSelectEmoji(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/emoji-picker/emoji-picker.component.ts:20\n                        \n                    \n\n\n            \n                \n                        Emits the selected emoji when an emoji is clicked in the picker.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe event object containing the emoji data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { PickerComponent } from '@ctrl/ngx-emoji-mart';\n\n@Component({\n  selector: 'app-emoji-picker',\n  standalone: true,\n  imports: [PickerComponent],\n  templateUrl: './emoji-picker.component.html',\n  styleUrl: './emoji-picker.component.scss',\n})\nexport class EmojiPickerComponent {\n  @Output() emoji = new EventEmitter();\n  @Input({required: true}) componentName!: 'chatbox' | 'messagebox'; \n\n  /**\n   * Emits the selected emoji when an emoji is clicked in the picker.\n   * \n   * @param event - The event object containing the emoji data.\n   */\n  onSelectEmoji(event: any) {\n    const selectedEmoji = event.emoji.native;\n    this.emoji.emit(selectedEmoji);\n  }\n}\n    \n\n    \n        @if (componentName == 'messagebox') {\n\n} @else if (componentName == 'chatbox') {\n\n  \n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (componentName == \\'messagebox\\') {} @else if (componentName == \\'chatbox\\') {  }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'EmojiPickerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmojiStorageService.html":{"url":"injectables/EmojiStorageService.html","title":"injectable - EmojiStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmojiStorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/emoji-storage.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                storageKey\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getEmojis\n                            \n                            \n                                saveEmoji\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getEmojis\n                        \n                    \n                \n            \n            \n                \ngetEmojis()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji-storage.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Retrieves the list of two most recently used emojis from the local storage.\nExample :element is the most recently used emoji.\n\n                        \n                            Returns :     string[]\n\n                        \n                            \n                                An array of two strings, each representing an emoji. The first\nelement is the most recently used emoji.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveEmoji\n                        \n                    \n                \n            \n            \n                \nsaveEmoji(emoji: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/emoji-storage.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Saves an emoji to the local storage so it can be suggested later.\nIt keeps track of the two most recently used emojis. If the emoji is\nalready in the list, it does nothing. Otherwise it adds it to the list\nand removes the oldest one if there are more than two emojis in the list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                emoji\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The emoji to save.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        storageKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'recentEmojis'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/emoji-storage.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class EmojiStorageService {\n  private storageKey = 'recentEmojis';\n\n  /**\n   * Saves an emoji to the local storage so it can be suggested later.\n   *\n   * It keeps track of the two most recently used emojis. If the emoji is\n   * already in the list, it does nothing. Otherwise it adds it to the list\n   * and removes the oldest one if there are more than two emojis in the list.\n   * @param emoji The emoji to save.\n   */\n  saveEmoji(emoji: string): void {\n    let emojis: string[] = JSON.parse(\n      localStorage.getItem(this.storageKey) || '[]'\n    );\n    if (emojis[1] === emoji) return;\n    emojis = emojis.filter((e) => e !== emoji);\n    emojis.unshift(emoji);\n    emojis = emojis.slice(0, 2);\n    localStorage.setItem(this.storageKey, JSON.stringify(emojis));\n  }\n\n  /**\n   * Retrieves the list of two most recently used emojis from the local storage.\n   *\n   * @returns An array of two strings, each representing an emoji. The first\n   *     element is the most recently used emoji.\n   */\n  getEmojis(): string[] {\n    return JSON.parse(localStorage.getItem(this.storageKey) || '[]');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ForgetPasswordComponent.html":{"url":"components/ForgetPasswordComponent.html","title":"component - ForgetPasswordComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ForgetPasswordComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/forget-password/forget-password.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-forget-password\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                                ToastMessageComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./forget-password.component.html\n            \n\n\n\n            \n                styleUrl\n                ./forget-password.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                countdown\n                            \n                            \n                                emailSended\n                            \n                            \n                                    Private\n                                intervalId\n                            \n                            \n                                userData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                back\n                            \n                            \n                                sendMail\n                            \n                            \n                                startTimer\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    toastMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, userService: UserService, toastMessageService: ToastMessageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/forget-password/forget-password.component.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for ForgetPasswordComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular Router service.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        toastMessageService\n                                                  \n                                                        \n                                                                        ToastMessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        back\n                        \n                    \n                \n            \n            \n                \nback()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/forget-password/forget-password.component.ts:36\n                        \n                    \n\n\n            \n                \n                        Navigates back to the home page.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(form: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/forget-password/forget-password.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Sends a reset password email.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form containing the user email.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startTimer\n                        \n                    \n                \n            \n            \n                \nstartTimer()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/forget-password/forget-password.component.ts:44\n                        \n                    \n\n\n            \n                \n                        Starts a timer that decrements the countdown variable every second.\nWhen the countdown reaches 0, the timer is cleared.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        countdown\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/app/login/forget-password/forget-password.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailSended\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/forget-password/forget-password.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        intervalId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/forget-password/forget-password.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {email: '',}\n                    \n                \n                    \n                        \n                                Defined in src/app/login/forget-password/forget-password.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        toastMessage\n                    \n                \n\n                \n                    \n                        gettoastMessage()\n                    \n                \n                            \n                                \n                                    Defined in src/app/login/forget-password/forget-password.component.ts:79\n                                \n                            \n                    \n                        \n                                Gets the current toast message.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastMessageService } from '../../shared/services/toastmessage.service';\nimport { ToastMessageComponent } from '../../shared/toastmessage/toastmessage.component';\nimport { UserService } from '../../shared/services/user.service';\n\n@Component({\n  selector: 'app-forget-password',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ToastMessageComponent],\n  templateUrl: './forget-password.component.html',\n  styleUrl: './forget-password.component.scss',\n})\nexport class ForgetPasswordComponent {\n  userData = {email: '',};\n  emailSended: boolean = false;\n  countdown: number = 10;\n  private intervalId: any;\n\n  /**\n   * Constructor for ForgetPasswordComponent.\n   * @param {Router} router - The Angular Router service.\n   * @param {AuthService} authService - The authentication service.\n   */\n  constructor(\n    private router: Router,\n    private userService: UserService,\n    private toastMessageService: ToastMessageService\n  ) {}\n\n  /**\n   * Navigates back to the home page.\n   */\n  back() {\n    this.router.navigateByUrl('');\n  }\n\n  /**\n   * Starts a timer that decrements the countdown variable every second.\n   * When the countdown reaches 0, the timer is cleared.\n   */\n  startTimer() {\n    this.intervalId = setInterval(() => {\n      if (this.countdown > 0) {\n        this.countdown--;\n      } else {\n        clearInterval(this.intervalId);\n      }\n    }, 1000);\n  }\n\n  /**\n   * Sends a reset password email.\n   * @param {NgForm} form - The form containing the user email.\n   */\n  sendMail(form: NgForm) {\n    this.userService\n      .resetPassword(this.userData.email)\n      .then(() => {\n        form.resetForm();\n        this.toastMessageService.showToastSignal('Email wurde gesendet!');\n        this.emailSended = true;\n        this.startTimer();\n        setTimeout(() => {\n          this.back();\n        }, 10000);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n\n  /**\n   * Gets the current toast message.\n   * @returns {string} - The current toast message.\n   */\n  get toastMessage() {\n    return this.toastMessageService.toastSignal();\n  }\n}\n\n    \n\n    \n        @if(!emailSended) {\n\n    \n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n        Passwort zurücksetzen\n    \n    Bitte geben Sie Ihre E-Mail-Adresse ein.\n    \n        \n            \n                \n                    \n                        \n                    \n                    \n                        \n                    \n                \n                \n            \n            *Diese E-Mail-Adresse\n                ist leider ungültig.\n        \n        Wir senden Ihnen eine E-Mail, über die Sie Ihr Passwort ändern können.\n        \n            E-Mail senden\n        \n    \n\n\n} @else {\n\n    Mail erfolgreich gesendet\n    Bitte prüfe deine E-Mails und setze dein Passwort zurück.\n    Du wirst in {{ countdown }} Sekunden zur Login-Seite weitergeleitet.\n    \n\n}\n\n@if (toastMessage != '') {\n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if(!emailSended) {                                                                                                                                                            Passwort zurücksetzen        Bitte geben Sie Ihre E-Mail-Adresse ein.                                                                                                                                                                                                                                *Diese E-Mail-Adresse                ist leider ungültig.                Wir senden Ihnen eine E-Mail, über die Sie Ihr Passwort ändern können.                    E-Mail senden            } @else {    Mail erfolgreich gesendet    Bitte prüfe deine E-Mails und setze dein Passwort zurück.    Du wirst in {{ countdown }} Sekunden zur Login-Seite weitergeleitet.    }@if (toastMessage != \\'\\') {}'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ForgetPasswordComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HeaderComponent.html":{"url":"components/HeaderComponent.html","title":"component - HeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/header/header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                LogoComponent\n                                SearchbarComponent\n                                UsermenuComponent\n                            RouterModule\n                                MenutogglerComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentUrl\n                            \n                            \n                                legalPage\n                            \n                            \n                                menuOpened\n                            \n                            \n                                menuState\n                            \n                            \n                                mobile\n                            \n                            \n                                threadchatState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isLegalPage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    \n                                onResize\n                            \n                            \n                                toggleMenu\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, stateService: StateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/header/header.component.ts:30\n                            \n                        \n\n                \n                    \n                            The constructor for the HeaderComponent class.\nIt sets the currentUrl property to the current route, and calls the onResize method.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected Router service.\n\n                                                        \n                                                \n                                                \n                                                        stateService\n                                                  \n                                                        \n                                                                        StateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected StateService service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/header/header.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Handles window resize events.\nWhen the window width is less than 900px, the menu is closed and the chat is full width.\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isLegalPage\n                        \n                    \n                \n            \n            \n                \nisLegalPage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/header/header.component.ts:83\n                        \n                    \n\n\n            \n                \n                        Checks if the current URL corresponds to a legal page.\nA legal page is identified if the URL contains 'legalnotice' or 'imprint'.\nSets the legalPage property to true if it is a legal page, otherwise sets it to false.\nLogs the result to the console.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/header/header.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Initializes the component by subscribing to the menuState$ observable of the StateService.\nWhen the menuState$ observable emits a value, the menuState and menuOpened properties are updated accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/app/shared/header/header.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Handles window resize events.\nWhen the window width is less than 900px, the menu is closed and the chat is full width.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleMenu\n                        \n                    \n                \n            \n            \n                \ntoggleMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/header/header.component.ts:70\n                        \n                    \n\n\n            \n                \n                        Toggles the menu state between 'in' and 'out'.\nIf the menu is opened, it is closed and vice versa.\nThe menuOpened property is updated after toggling the menuState.\nThe current menuState is also emitted to the menuState$ observable of the StateService.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currentUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/header.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        legalPage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/header.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpened\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/header.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        menuState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'in'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/header.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/header.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadchatState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'out'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/header.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener, Input } from '@angular/core';\nimport { LogoComponent } from '../logo/logo.component';\nimport { SearchbarComponent } from './searchbar/searchbar.component';\nimport { UsermenuComponent } from './usermenu/usermenu.component';\nimport { Router, RouterModule } from '@angular/router';\nimport { MenutogglerComponent } from '../../main/shared/menutoggler/menutoggler.component';\nimport { StateService } from '../services/state.service';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [\n    LogoComponent,\n    SearchbarComponent,\n    UsermenuComponent,\n    RouterModule,\n    MenutogglerComponent,\n    CommonModule\n  ],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss',\n})\nexport class HeaderComponent {\n  currentUrl: string = '';\n  mobile = false;\n  menuOpened = false;\n  menuState = 'in';\n  threadchatState = 'out';\n  legalPage = false;\n\n  /**\n   * The constructor for the HeaderComponent class.\n   * It sets the currentUrl property to the current route, and calls the onResize method.\n   * @param router The injected Router service.\n   * @param stateService The injected StateService service.\n   */\n  constructor(private router: Router, private stateService: StateService) {\n    this.currentUrl = this.router.url;\n    this.onResize();\n    this.isLegalPage();\n  }\n\n  /**\n   * Handles window resize events.\n   * When the window width is less than 900px, the menu is closed and the chat is full width.\n  */\n  @HostListener('window:resize', [])\n  onResize(): void {\n    this.mobile = window.innerWidth  {\n      this.menuState = state;\n      this.menuOpened = state === 'in';\n    });\n  }\n\n  /**\n   * Toggles the menu state between 'in' and 'out'.\n   * If the menu is opened, it is closed and vice versa.\n   * The menuOpened property is updated after toggling the menuState.\n   * The current menuState is also emitted to the menuState$ observable of the StateService.\n   */\n  toggleMenu(): void {\n    this.menuState = this.menuState === 'in' ? 'out' : 'in';\n    this.menuOpened = this.menuState === 'in';\n    this.stateService.setMenuState(this.menuState);\n  }\n\n\n  /**\n   * Checks if the current URL corresponds to a legal page.\n   * A legal page is identified if the URL contains 'legalnotice' or 'imprint'.\n   * Sets the `legalPage` property to `true` if it is a legal page, otherwise sets it to `false`.\n   * Logs the result to the console.\n   */\n  isLegalPage(): void {\n    if (\n      this.currentUrl.includes('legalnotice') ||\n      this.currentUrl.includes('imprint')\n    ) {\n      this.legalPage = true;\n      \n    } else {\n      this.legalPage = false;\n    }\n  }\n}\n\n    \n\n    \n        \n  @if (mobile && !legalPage) {\n    \n      \n      \n    \n  } @else {\n    \n  }\n  @if(currentUrl != \"/legalnotice\" && currentUrl != \"/imprint\") {\n    @if (!mobile) {\n      \n    }\n  \n  }\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  @if (mobile && !legalPage) {                      } @else {      }  @if(currentUrl != \"/legalnotice\" && currentUrl != \"/imprint\") {    @if (!mobile) {          }    }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ImprintComponent.html":{"url":"components/ImprintComponent.html","title":"component - ImprintComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ImprintComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/imprint/imprint.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-imprint\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                HeaderComponent\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./imprint.component.html\n            \n\n\n\n            \n                styleUrl\n                ./imprint.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { HeaderComponent } from '../shared/header/header.component';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-imprint',\n  standalone: true,\n  imports: [HeaderComponent, RouterModule ],\n  templateUrl: './imprint.component.html',\n  styleUrl: './imprint.component.scss'\n})\nexport class ImprintComponent {}\n\n    \n\n    \n        \n  \n  \n    \n        \n          \n        \n        \n          \n        \n      \n    \n    Impressum\n    \n      Angaben gemäß § 5 TMG\n      \n        Alexander Luft\n        \n        Arnold-Schönbergstr.14\n        \n        66955 Pirmasens\n        \n      \n      Kontakt\n      \n        E-Mail:\n        info&#64;luft-alexander.de\n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                          Impressum          Angaben gemäß § 5 TMG              Alexander Luft                Arnold-Schönbergstr.14                66955 Pirmasens                    Kontakt              E-Mail:        info@luft-alexander.de            '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ImprintComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LegalnoticeComponent.html":{"url":"components/LegalnoticeComponent.html","title":"component - LegalnoticeComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LegalnoticeComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/legalnotice/legalnotice.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-legalnotice\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                HeaderComponent\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./legalnotice.component.html\n            \n\n\n\n            \n                styleUrl\n                ./legalnotice.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { HeaderComponent } from '../shared/header/header.component';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-legalnotice',\n  standalone: true,\n  imports: [HeaderComponent, RouterModule],\n  templateUrl: './legalnotice.component.html',\n  styleUrl: './legalnotice.component.scss'\n})\nexport class LegalnoticeComponent {}\n\n    \n\n    \n        \n  \n  \n    \n        \n          \n        \n        \n          \n        \n      \n    \n    Datenschutz&shy;erkl&auml;rung\n    \n      1. Datenschutz auf einen Blick\n      Allgemeine Hinweise\n      \n        Die folgenden Hinweise geben einen einfachen &Uuml;berblick\n        dar&uuml;ber, was mit Ihren personenbezogenen Daten passiert, wenn Sie\n        diese Website besuchen. Personenbezogene Daten sind alle Daten, mit\n        denen Sie pers&ouml;nlich identifiziert werden k&ouml;nnen.\n        Ausf&uuml;hrliche Informationen zum Thema Datenschutz entnehmen Sie\n        unserer unter diesem Text aufgef&uuml;hrten Datenschutzerkl&auml;rung.\n      \n      Datenerfassung auf dieser Website\n      \n        Wer ist verantwortlich f&uuml;r die Datenerfassung auf dieser Website?\n      \n      \n        Die Datenverarbeitung auf dieser Website erfolgt durch den\n        Websitebetreiber. Dessen Kontaktdaten k&ouml;nnen Sie dem Abschnitt\n        &bdquo;Hinweis zur Verantwortlichen Stelle&ldquo; in dieser\n        Datenschutzerkl&auml;rung entnehmen.\n      \n      Wie erfassen wir Ihre Daten?\n      \n        Ihre Daten werden zum einen dadurch erhoben, dass Sie uns diese\n        mitteilen. Hierbei kann es sich z.&nbsp;B. um Daten handeln, die Sie in\n        ein Kontaktformular eingeben.\n      \n      \n        Andere Daten werden automatisch oder nach Ihrer Einwilligung beim Besuch\n        der Website durch unsere IT-Systeme erfasst. Das sind vor allem\n        technische Daten (z.&nbsp;B. Internetbrowser, Betriebssystem oder\n        Uhrzeit des Seitenaufrufs). Die Erfassung dieser Daten erfolgt\n        automatisch, sobald Sie diese Website betreten.\n      \n      Wof&uuml;r nutzen wir Ihre Daten?\n      \n        Ein Teil der Daten wird erhoben, um eine fehlerfreie Bereitstellung der\n        Website zu gew&auml;hrleisten. Andere Daten k&ouml;nnen zur Analyse\n        Ihres Nutzerverhaltens verwendet werden. Sofern &uuml;ber die Website\n        Vertr&auml;ge geschlossen oder angebahnt werden k&ouml;nnen, werden die\n        &uuml;bermittelten Daten auch f&uuml;r Vertragsangebote, Bestellungen\n        oder sonstige Auftragsanfragen verarbeitet.\n      \n      Welche Rechte haben Sie bez&uuml;glich Ihrer Daten?\n      \n        Sie haben jederzeit das Recht, unentgeltlich Auskunft &uuml;ber\n        Herkunft, Empf&auml;nger und Zweck Ihrer gespeicherten personenbezogenen\n        Daten zu erhalten. Sie haben au&szlig;erdem ein Recht, die Berichtigung\n        oder L&ouml;schung dieser Daten zu verlangen. Wenn Sie eine Einwilligung\n        zur Datenverarbeitung erteilt haben, k&ouml;nnen Sie diese Einwilligung\n        jederzeit f&uuml;r die Zukunft widerrufen. Au&szlig;erdem haben Sie das\n        Recht, unter bestimmten Umst&auml;nden die Einschr&auml;nkung der\n        Verarbeitung Ihrer personenbezogenen Daten zu verlangen. Des Weiteren\n        steht Ihnen ein Beschwerderecht bei der zust&auml;ndigen\n        Aufsichtsbeh&ouml;rde zu.\n      \n      \n        Hierzu sowie zu weiteren Fragen zum Thema Datenschutz k&ouml;nnen Sie\n        sich jederzeit an uns wenden.\n      \n      Analyse-Tools und Tools von Dritt&shy;anbietern\n      \n        Beim Besuch dieser Website kann Ihr Surf-Verhalten statistisch\n        ausgewertet werden. Das geschieht vor allem mit sogenannten\n        Analyseprogrammen.\n      \n      \n        Detaillierte Informationen zu diesen Analyseprogrammen finden Sie in der\n        folgenden Datenschutzerkl&auml;rung.\n      \n      2. Hosting\n      Wir hosten die Inhalte unserer Website bei folgendem Anbieter:\n      Externes Hosting\n      \n        Diese Website wird extern gehostet. Die personenbezogenen Daten, die auf\n        dieser Website erfasst werden, werden auf den Servern des Hosters / der\n        Hoster gespeichert. Hierbei kann es sich v.&nbsp;a. um IP-Adressen,\n        Kontaktanfragen, Meta- und Kommunikationsdaten, Vertragsdaten,\n        Kontaktdaten, Namen, Websitezugriffe und sonstige Daten, die &uuml;ber\n        eine Website generiert werden, handeln.\n      \n      \n        Das externe Hosting erfolgt zum Zwecke der Vertragserf&uuml;llung\n        gegen&uuml;ber unseren potenziellen und bestehenden Kunden (Art. 6 Abs.\n        1 lit. b DSGVO) und im Interesse einer sicheren, schnellen und\n        effizienten Bereitstellung unseres Online-Angebots durch einen\n        professionellen Anbieter (Art. 6 Abs. 1 lit. f DSGVO). Sofern eine\n        entsprechende Einwilligung abgefragt wurde, erfolgt die Verarbeitung\n        ausschlie&szlig;lich auf Grundlage von Art. 6 Abs. 1 lit. a DSGVO und\n        &sect; 25 Abs. 1 TDDDG, soweit die Einwilligung die Speicherung von\n        Cookies oder den Zugriff auf Informationen im Endger&auml;t des Nutzers\n        (z.&nbsp;B. Device-Fingerprinting) im Sinne des TDDDG umfasst. Die\n        Einwilligung ist jederzeit widerrufbar.\n      \n      \n        Unser(e) Hoster wird bzw. werden Ihre Daten nur insoweit verarbeiten,\n        wie dies zur Erf&uuml;llung seiner Leistungspflichten erforderlich ist\n        und unsere Weisungen in Bezug auf diese Daten befolgen.\n      \n      Wir setzen folgende(n) Hoster ein:\n      \n        dataforest GmbH\n        Taunusstra&szlig;e 52\n        65580 Kriftel\n        E-Mail: hi&#64;dataforest.net\n        Support: support&#64;avoro.eu\n      \n      3. Allgemeine Hinweise und Pflicht&shy;informationen\n      Datenschutz\n      \n        Die Betreiber dieser Seiten nehmen den Schutz Ihrer pers&ouml;nlichen\n        Daten sehr ernst. Wir behandeln Ihre personenbezogenen Daten vertraulich\n        und entsprechend den gesetzlichen Datenschutzvorschriften sowie dieser\n        Datenschutzerkl&auml;rung.\n      \n      \n        Wenn Sie diese Website benutzen, werden verschiedene personenbezogene\n        Daten erhoben. Personenbezogene Daten sind Daten, mit denen Sie\n        pers&ouml;nlich identifiziert werden k&ouml;nnen. Die vorliegende\n        Datenschutzerkl&auml;rung erl&auml;utert, welche Daten wir erheben und\n        wof&uuml;r wir sie nutzen. Sie erl&auml;utert auch, wie und zu welchem\n        Zweck das geschieht.\n      \n      \n        Wir weisen darauf hin, dass die Daten&uuml;bertragung im Internet\n        (z.&nbsp;B. bei der Kommunikation per E-Mail) Sicherheitsl&uuml;cken\n        aufweisen kann. Ein l&uuml;ckenloser Schutz der Daten vor dem Zugriff\n        durch Dritte ist nicht m&ouml;glich.\n      \n      Hinweis zur verantwortlichen Stelle\n      \n        Die verantwortliche Stelle f&uuml;r die Datenverarbeitung auf dieser\n        Website ist:\n      \n      \n        dataforest GmbH\n        Taunusstra&szlig;e 52\n        65580 Kriftel\n      \n\n      \n        Telefon: +49 (0) 6192 93922 33\n        E-Mail: hi&#64;dataforest.net Support: support&#64;avoro.euelfirma.de\n      \n      \n        Verantwortliche Stelle ist die nat&uuml;rliche oder juristische Person,\n        die allein oder gemeinsam mit anderen &uuml;ber die Zwecke und Mittel\n        der Verarbeitung von personenbezogenen Daten (z.&nbsp;B. Namen,\n        E-Mail-Adressen o. &Auml;.) entscheidet.\n      \n\n      Speicherdauer\n      \n        Soweit innerhalb dieser Datenschutzerkl&auml;rung keine speziellere\n        Speicherdauer genannt wurde, verbleiben Ihre personenbezogenen Daten bei\n        uns, bis der Zweck f&uuml;r die Datenverarbeitung entf&auml;llt. Wenn\n        Sie ein berechtigtes L&ouml;schersuchen geltend machen oder eine\n        Einwilligung zur Datenverarbeitung widerrufen, werden Ihre Daten\n        gel&ouml;scht, sofern wir keine anderen rechtlich zul&auml;ssigen\n        Gr&uuml;nde f&uuml;r die Speicherung Ihrer personenbezogenen Daten haben\n        (z.&nbsp;B. steuer- oder handelsrechtliche Aufbewahrungsfristen); im\n        letztgenannten Fall erfolgt die L&ouml;schung nach Fortfall dieser\n        Gr&uuml;nde.\n      \n      \n        Allgemeine Hinweise zu den Rechtsgrundlagen der Datenverarbeitung auf\n        dieser Website\n      \n      \n        Sofern Sie in die Datenverarbeitung eingewilligt haben, verarbeiten wir\n        Ihre personenbezogenen Daten auf Grundlage von Art. 6 Abs. 1 lit. a\n        DSGVO bzw. Art. 9 Abs. 2 lit. a DSGVO, sofern besondere Datenkategorien\n        nach Art. 9 Abs. 1 DSGVO verarbeitet werden. Im Falle einer\n        ausdr&uuml;cklichen Einwilligung in die &Uuml;bertragung\n        personenbezogener Daten in Drittstaaten erfolgt die Datenverarbeitung\n        au&szlig;erdem auf Grundlage von Art. 49 Abs. 1 lit. a DSGVO. Sofern Sie\n        in die Speicherung von Cookies oder in den Zugriff auf Informationen in\n        Ihr Endger&auml;t (z.&nbsp;B. via Device-Fingerprinting) eingewilligt\n        haben, erfolgt die Datenverarbeitung zus&auml;tzlich auf Grundlage von\n        &sect; 25 Abs. 1 TDDDG. Die Einwilligung ist jederzeit widerrufbar. Sind\n        Ihre Daten zur Vertragserf&uuml;llung oder zur Durchf&uuml;hrung\n        vorvertraglicher Ma&szlig;nahmen erforderlich, verarbeiten wir Ihre\n        Daten auf Grundlage des Art. 6 Abs. 1 lit. b DSGVO. Des Weiteren\n        verarbeiten wir Ihre Daten, sofern diese zur Erf&uuml;llung einer\n        rechtlichen Verpflichtung erforderlich sind auf Grundlage von Art. 6\n        Abs. 1 lit. c DSGVO. Die Datenverarbeitung kann ferner auf Grundlage\n        unseres berechtigten Interesses nach Art. 6 Abs. 1 lit. f DSGVO\n        erfolgen. &Uuml;ber die jeweils im Einzelfall einschl&auml;gigen\n        Rechtsgrundlagen wird in den folgenden Abs&auml;tzen dieser\n        Datenschutzerkl&auml;rung informiert.\n      \n      Empfänger von personenbezogenen Daten\n      \n        Im Rahmen unserer Gesch&auml;ftst&auml;tigkeit arbeiten wir mit\n        verschiedenen externen Stellen zusammen. Dabei ist teilweise auch eine\n        &Uuml;bermittlung von personenbezogenen Daten an diese externen Stellen\n        erforderlich. Wir geben personenbezogene Daten nur dann an externe\n        Stellen weiter, wenn dies im Rahmen einer Vertragserf&uuml;llung\n        erforderlich ist, wenn wir gesetzlich hierzu verpflichtet sind\n        (z.&nbsp;B. Weitergabe von Daten an Steuerbeh&ouml;rden), wenn wir ein\n        berechtigtes Interesse nach Art. 6 Abs. 1 lit. f DSGVO an der Weitergabe\n        haben oder wenn eine sonstige Rechtsgrundlage die Datenweitergabe\n        erlaubt. Beim Einsatz von Auftragsverarbeitern geben wir\n        personenbezogene Daten unserer Kunden nur auf Grundlage eines\n        g&uuml;ltigen Vertrags &uuml;ber Auftragsverarbeitung weiter. Im Falle\n        einer gemeinsamen Verarbeitung wird ein Vertrag &uuml;ber gemeinsame\n        Verarbeitung geschlossen.\n      \n      Widerruf Ihrer Einwilligung zur Datenverarbeitung\n      \n        Viele Datenverarbeitungsvorg&auml;nge sind nur mit Ihrer\n        ausdr&uuml;cklichen Einwilligung m&ouml;glich. Sie k&ouml;nnen eine\n        bereits erteilte Einwilligung jederzeit widerrufen. Die\n        Rechtm&auml;&szlig;igkeit der bis zum Widerruf erfolgten\n        Datenverarbeitung bleibt vom Widerruf unber&uuml;hrt.\n      \n      \n        Widerspruchsrecht gegen die Datenerhebung in besonderen F&auml;llen\n        sowie gegen Direktwerbung (Art. 21 DSGVO)\n      \n      \n        WENN DIE DATENVERARBEITUNG AUF GRUNDLAGE VON ART. 6 ABS. 1 LIT. E ODER F\n        DSGVO ERFOLGT, HABEN SIE JEDERZEIT DAS RECHT, AUS GR&Uuml;NDEN, DIE SICH\n        AUS IHRER BESONDEREN SITUATION ERGEBEN, GEGEN DIE VERARBEITUNG IHRER\n        PERSONENBEZOGENEN DATEN WIDERSPRUCH EINZULEGEN; DIES GILT AUCH F&Uuml;R\n        EIN AUF DIESE BESTIMMUNGEN GEST&Uuml;TZTES PROFILING. DIE JEWEILIGE\n        RECHTSGRUNDLAGE, AUF DENEN EINE VERARBEITUNG BERUHT, ENTNEHMEN SIE\n        DIESER DATENSCHUTZERKL&Auml;RUNG. WENN SIE WIDERSPRUCH EINLEGEN, WERDEN\n        WIR IHRE BETROFFENEN PERSONENBEZOGENEN DATEN NICHT MEHR VERARBEITEN, ES\n        SEI DENN, WIR K&Ouml;NNEN ZWINGENDE SCHUTZW&Uuml;RDIGE GR&Uuml;NDE\n        F&Uuml;R DIE VERARBEITUNG NACHWEISEN, DIE IHRE INTERESSEN, RECHTE UND\n        FREIHEITEN &Uuml;BERWIEGEN ODER DIE VERARBEITUNG DIENT DER\n        GELTENDMACHUNG, AUS&Uuml;BUNG ODER VERTEIDIGUNG VON\n        RECHTSANSPR&Uuml;CHEN (WIDERSPRUCH NACH ART. 21 ABS. 1 DSGVO).\n      \n      \n        WERDEN IHRE PERSONENBEZOGENEN DATEN VERARBEITET, UM DIREKTWERBUNG ZU\n        BETREIBEN, SO HABEN SIE DAS RECHT, JEDERZEIT WIDERSPRUCH GEGEN DIE\n        VERARBEITUNG SIE BETREFFENDER PERSONENBEZOGENER DATEN ZUM ZWECKE\n        DERARTIGER WERBUNG EINZULEGEN; DIES GILT AUCH F&Uuml;R DAS PROFILING,\n        SOWEIT ES MIT SOLCHER DIREKTWERBUNG IN VERBINDUNG STEHT. WENN SIE\n        WIDERSPRECHEN, WERDEN IHRE PERSONENBEZOGENEN DATEN ANSCHLIESSEND NICHT\n        MEHR ZUM ZWECKE DER DIREKTWERBUNG VERWENDET (WIDERSPRUCH NACH ART. 21\n        ABS. 2 DSGVO).\n      \n      \n        Beschwerde&shy;recht bei der zust&auml;ndigen Aufsichts&shy;beh&ouml;rde\n      \n      \n        Im Falle von Verst&ouml;&szlig;en gegen die DSGVO steht den Betroffenen\n        ein Beschwerderecht bei einer Aufsichtsbeh&ouml;rde, insbesondere in dem\n        Mitgliedstaat ihres gew&ouml;hnlichen Aufenthalts, ihres Arbeitsplatzes\n        oder des Orts des mutma&szlig;lichen Versto&szlig;es zu. Das\n        Beschwerderecht besteht unbeschadet anderweitiger verwaltungsrechtlicher\n        oder gerichtlicher Rechtsbehelfe.\n      \n      Recht auf Daten&shy;&uuml;bertrag&shy;barkeit\n      \n        Sie haben das Recht, Daten, die wir auf Grundlage Ihrer Einwilligung\n        oder in Erf&uuml;llung eines Vertrags automatisiert verarbeiten, an sich\n        oder an einen Dritten in einem g&auml;ngigen, maschinenlesbaren Format\n        aush&auml;ndigen zu lassen. Sofern Sie die direkte &Uuml;bertragung der\n        Daten an einen anderen Verantwortlichen verlangen, erfolgt dies nur,\n        soweit es technisch machbar ist.\n      \n      Auskunft, Berichtigung und L&ouml;schung\n      \n        Sie haben im Rahmen der geltenden gesetzlichen Bestimmungen jederzeit\n        das Recht auf unentgeltliche Auskunft &uuml;ber Ihre gespeicherten\n        personenbezogenen Daten, deren Herkunft und Empf&auml;nger und den Zweck\n        der Datenverarbeitung und ggf. ein Recht auf Berichtigung oder\n        L&ouml;schung dieser Daten. Hierzu sowie zu weiteren Fragen zum Thema\n        personenbezogene Daten k&ouml;nnen Sie sich jederzeit an uns wenden.\n      \n      Recht auf Einschr&auml;nkung der Verarbeitung\n      \n        Sie haben das Recht, die Einschr&auml;nkung der Verarbeitung Ihrer\n        personenbezogenen Daten zu verlangen. Hierzu k&ouml;nnen Sie sich\n        jederzeit an uns wenden. Das Recht auf Einschr&auml;nkung der\n        Verarbeitung besteht in folgenden F&auml;llen:\n      \n      \n        \n          Wenn Sie die Richtigkeit Ihrer bei uns gespeicherten personenbezogenen\n          Daten bestreiten, ben&ouml;tigen wir in der Regel Zeit, um dies zu\n          &uuml;berpr&uuml;fen. F&uuml;r die Dauer der Pr&uuml;fung haben Sie\n          das Recht, die Einschr&auml;nkung der Verarbeitung Ihrer\n          personenbezogenen Daten zu verlangen.\n        \n        \n          Wenn die Verarbeitung Ihrer personenbezogenen Daten\n          unrechtm&auml;&szlig;ig geschah/geschieht, k&ouml;nnen Sie statt der\n          L&ouml;schung die Einschr&auml;nkung der Datenverarbeitung verlangen.\n        \n        \n          Wenn wir Ihre personenbezogenen Daten nicht mehr ben&ouml;tigen, Sie\n          sie jedoch zur Aus&uuml;bung, Verteidigung oder Geltendmachung von\n          Rechtsanspr&uuml;chen ben&ouml;tigen, haben Sie das Recht, statt der\n          L&ouml;schung die Einschr&auml;nkung der Verarbeitung Ihrer\n          personenbezogenen Daten zu verlangen.\n        \n        \n          Wenn Sie einen Widerspruch nach Art. 21 Abs. 1 DSGVO eingelegt haben,\n          muss eine Abw&auml;gung zwischen Ihren und unseren Interessen\n          vorgenommen werden. Solange noch nicht feststeht, wessen Interessen\n          &uuml;berwiegen, haben Sie das Recht, die Einschr&auml;nkung der\n          Verarbeitung Ihrer personenbezogenen Daten zu verlangen.\n        \n      \n      \n        Wenn Sie die Verarbeitung Ihrer personenbezogenen Daten\n        eingeschr&auml;nkt haben, d&uuml;rfen diese Daten &ndash; von ihrer\n        Speicherung abgesehen &ndash; nur mit Ihrer Einwilligung oder zur\n        Geltendmachung, Aus&uuml;bung oder Verteidigung von\n        Rechtsanspr&uuml;chen oder zum Schutz der Rechte einer anderen\n        nat&uuml;rlichen oder juristischen Person oder aus Gr&uuml;nden eines\n        wichtigen &ouml;ffentlichen Interesses der Europ&auml;ischen Union oder\n        eines Mitgliedstaats verarbeitet werden.\n      \n      SSL- bzw. TLS-Verschl&uuml;sselung\n      \n        Diese Seite nutzt aus Sicherheitsgr&uuml;nden und zum Schutz der\n        &Uuml;bertragung vertraulicher Inhalte, wie zum Beispiel Bestellungen\n        oder Anfragen, die Sie an uns als Seitenbetreiber senden, eine SSL- bzw.\n        TLS-Verschl&uuml;sselung. Eine verschl&uuml;sselte Verbindung erkennen\n        Sie daran, dass die Adresszeile des Browsers von &bdquo;http://&ldquo;\n        auf &bdquo;https://&ldquo; wechselt und an dem Schloss-Symbol in Ihrer\n        Browserzeile.\n      \n      \n        Wenn die SSL- bzw. TLS-Verschl&uuml;sselung aktiviert ist, k&ouml;nnen\n        die Daten, die Sie an uns &uuml;bermitteln, nicht von Dritten mitgelesen\n        werden.\n      \n      4. Datenerfassung auf dieser Website\n      Server-Log-Dateien\n      \n        Der Provider der Seiten erhebt und speichert automatisch Informationen\n        in so genannten Server-Log-Dateien, die Ihr Browser automatisch an uns\n        &uuml;bermittelt. Dies sind:\n      \n      \n        Browsertyp und Browserversion\n        verwendetes Betriebssystem\n        Referrer URL\n        Hostname des zugreifenden Rechners\n        Uhrzeit der Serveranfrage\n        IP-Adresse\n      \n      \n        Eine Zusammenf&uuml;hrung dieser Daten mit anderen Datenquellen wird\n        nicht vorgenommen.\n      \n      \n        Die Erfassung dieser Daten erfolgt auf Grundlage von Art. 6 Abs. 1 lit.\n        f DSGVO. Der Websitebetreiber hat ein berechtigtes Interesse an der\n        technisch fehlerfreien Darstellung und der Optimierung seiner Website\n        &ndash; hierzu m&uuml;ssen die Server-Log-Files erfasst werden.\n      \n      Anfrage per E-Mail, Telefon oder Telefax\n      \n        Wenn Sie uns per E-Mail, Telefon oder Telefax kontaktieren, wird Ihre\n        Anfrage inklusive aller daraus hervorgehenden personenbezogenen Daten\n        (Name, Anfrage) zum Zwecke der Bearbeitung Ihres Anliegens bei uns\n        gespeichert und verarbeitet. Diese Daten geben wir nicht ohne Ihre\n        Einwilligung weiter.\n      \n      \n        Die Verarbeitung dieser Daten erfolgt auf Grundlage von Art. 6 Abs. 1\n        lit. b DSGVO, sofern Ihre Anfrage mit der Erf&uuml;llung eines Vertrags\n        zusammenh&auml;ngt oder zur Durchf&uuml;hrung vorvertraglicher\n        Ma&szlig;nahmen erforderlich ist. In allen &uuml;brigen F&auml;llen\n        beruht die Verarbeitung auf unserem berechtigten Interesse an der\n        effektiven Bearbeitung der an uns gerichteten Anfragen (Art. 6 Abs. 1\n        lit. f DSGVO) oder auf Ihrer Einwilligung (Art. 6 Abs. 1 lit. a DSGVO)\n        sofern diese abgefragt wurde; die Einwilligung ist jederzeit\n        widerrufbar.\n      \n      \n        Die von Ihnen an uns per Kontaktanfragen &uuml;bersandten Daten\n        verbleiben bei uns, bis Sie uns zur L&ouml;schung auffordern, Ihre\n        Einwilligung zur Speicherung widerrufen oder der Zweck f&uuml;r die\n        Datenspeicherung entf&auml;llt (z.&nbsp;B. nach abgeschlossener\n        Bearbeitung Ihres Anliegens). Zwingende gesetzliche Bestimmungen &ndash;\n        insbesondere gesetzliche Aufbewahrungsfristen &ndash; bleiben\n        unber&uuml;hrt.\n      \n      Kommentar&shy;funktion auf dieser Website\n      \n        F&uuml;r die Kommentarfunktion auf dieser Seite werden neben Ihrem\n        Kommentar auch Angaben zum Zeitpunkt der Erstellung des Kommentars und,\n        wenn Sie nicht anonym posten, der von Ihnen gew&auml;hlte Nutzername\n        gespeichert.\n      \n      Speicherdauer der Kommentare\n      \n        Die Kommentare und die damit verbundenen Daten werden gespeichert und\n        verbleiben auf dieser Website, bis der kommentierte Inhalt\n        vollst&auml;ndig gel&ouml;scht wurde oder die Kommentare aus rechtlichen\n        Gr&uuml;nden gel&ouml;scht werden m&uuml;ssen (z.&nbsp;B. beleidigende\n        Kommentare).\n      \n      Rechtsgrundlage\n      \n        Die Speicherung der Kommentare erfolgt auf Grundlage Ihrer Einwilligung\n        (Art. 6 Abs. 1 lit. a DSGVO). Sie k&ouml;nnen eine von Ihnen erteilte\n        Einwilligung jederzeit widerrufen. Dazu reicht eine formlose Mitteilung\n        per E-Mail an uns. Die Rechtm&auml;&szlig;igkeit der bereits erfolgten\n        Datenverarbeitungsvorg&auml;nge bleibt vom Widerruf unber&uuml;hrt.\n      \n      \n        Quelle: https://www.e-recht24.de\n      \n    \n  \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                          Datenschutz­erklärung          1. Datenschutz auf einen Blick      Allgemeine Hinweise              Die folgenden Hinweise geben einen einfachen Überblick        darüber, was mit Ihren personenbezogenen Daten passiert, wenn Sie        diese Website besuchen. Personenbezogene Daten sind alle Daten, mit        denen Sie persönlich identifiziert werden können.        Ausführliche Informationen zum Thema Datenschutz entnehmen Sie        unserer unter diesem Text aufgeführten Datenschutzerklärung.            Datenerfassung auf dieser Website              Wer ist verantwortlich für die Datenerfassung auf dieser Website?                    Die Datenverarbeitung auf dieser Website erfolgt durch den        Websitebetreiber. Dessen Kontaktdaten können Sie dem Abschnitt        „Hinweis zur Verantwortlichen Stelle“ in dieser        Datenschutzerklärung entnehmen.            Wie erfassen wir Ihre Daten?              Ihre Daten werden zum einen dadurch erhoben, dass Sie uns diese        mitteilen. Hierbei kann es sich z. B. um Daten handeln, die Sie in        ein Kontaktformular eingeben.                    Andere Daten werden automatisch oder nach Ihrer Einwilligung beim Besuch        der Website durch unsere IT-Systeme erfasst. Das sind vor allem        technische Daten (z. B. Internetbrowser, Betriebssystem oder        Uhrzeit des Seitenaufrufs). Die Erfassung dieser Daten erfolgt        automatisch, sobald Sie diese Website betreten.            Wofür nutzen wir Ihre Daten?              Ein Teil der Daten wird erhoben, um eine fehlerfreie Bereitstellung der        Website zu gewährleisten. Andere Daten können zur Analyse        Ihres Nutzerverhaltens verwendet werden. Sofern über die Website        Verträge geschlossen oder angebahnt werden können, werden die        übermittelten Daten auch für Vertragsangebote, Bestellungen        oder sonstige Auftragsanfragen verarbeitet.            Welche Rechte haben Sie bezüglich Ihrer Daten?              Sie haben jederzeit das Recht, unentgeltlich Auskunft über        Herkunft, Empfänger und Zweck Ihrer gespeicherten personenbezogenen        Daten zu erhalten. Sie haben außerdem ein Recht, die Berichtigung        oder Löschung dieser Daten zu verlangen. Wenn Sie eine Einwilligung        zur Datenverarbeitung erteilt haben, können Sie diese Einwilligung        jederzeit für die Zukunft widerrufen. Außerdem haben Sie das        Recht, unter bestimmten Umständen die Einschränkung der        Verarbeitung Ihrer personenbezogenen Daten zu verlangen. Des Weiteren        steht Ihnen ein Beschwerderecht bei der zuständigen        Aufsichtsbehörde zu.                    Hierzu sowie zu weiteren Fragen zum Thema Datenschutz können Sie        sich jederzeit an uns wenden.            Analyse-Tools und Tools von Dritt­anbietern              Beim Besuch dieser Website kann Ihr Surf-Verhalten statistisch        ausgewertet werden. Das geschieht vor allem mit sogenannten        Analyseprogrammen.                    Detaillierte Informationen zu diesen Analyseprogrammen finden Sie in der        folgenden Datenschutzerklärung.            2. Hosting      Wir hosten die Inhalte unserer Website bei folgendem Anbieter:      Externes Hosting              Diese Website wird extern gehostet. Die personenbezogenen Daten, die auf        dieser Website erfasst werden, werden auf den Servern des Hosters / der        Hoster gespeichert. Hierbei kann es sich v. a. um IP-Adressen,        Kontaktanfragen, Meta- und Kommunikationsdaten, Vertragsdaten,        Kontaktdaten, Namen, Websitezugriffe und sonstige Daten, die über        eine Website generiert werden, handeln.                    Das externe Hosting erfolgt zum Zwecke der Vertragserfüllung        gegenüber unseren potenziellen und bestehenden Kunden (Art. 6 Abs.        1 lit. b DSGVO) und im Interesse einer sicheren, schnellen und        effizienten Bereitstellung unseres Online-Angebots durch einen        professionellen Anbieter (Art. 6 Abs. 1 lit. f DSGVO). Sofern eine        entsprechende Einwilligung abgefragt wurde, erfolgt die Verarbeitung        ausschließlich auf Grundlage von Art. 6 Abs. 1 lit. a DSGVO und        § 25 Abs. 1 TDDDG, soweit die Einwilligung die Speicherung von        Cookies oder den Zugriff auf Informationen im Endgerät des Nutzers        (z. B. Device-Fingerprinting) im Sinne des TDDDG umfasst. Die        Einwilligung ist jederzeit widerrufbar.                    Unser(e) Hoster wird bzw. werden Ihre Daten nur insoweit verarbeiten,        wie dies zur Erfüllung seiner Leistungspflichten erforderlich ist        und unsere Weisungen in Bezug auf diese Daten befolgen.            Wir setzen folgende(n) Hoster ein:              dataforest GmbH        Taunusstraße 52        65580 Kriftel        E-Mail: hi@dataforest.net        Support: support@avoro.eu            3. Allgemeine Hinweise und Pflicht­informationen      Datenschutz              Die Betreiber dieser Seiten nehmen den Schutz Ihrer persönlichen        Daten sehr ernst. Wir behandeln Ihre personenbezogenen Daten vertraulich        und entsprechend den gesetzlichen Datenschutzvorschriften sowie dieser        Datenschutzerklärung.                    Wenn Sie diese Website benutzen, werden verschiedene personenbezogene        Daten erhoben. Personenbezogene Daten sind Daten, mit denen Sie        persönlich identifiziert werden können. Die vorliegende        Datenschutzerklärung erläutert, welche Daten wir erheben und        wofür wir sie nutzen. Sie erläutert auch, wie und zu welchem        Zweck das geschieht.                    Wir weisen darauf hin, dass die Datenübertragung im Internet        (z. B. bei der Kommunikation per E-Mail) Sicherheitslücken        aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff        durch Dritte ist nicht möglich.            Hinweis zur verantwortlichen Stelle              Die verantwortliche Stelle für die Datenverarbeitung auf dieser        Website ist:                    dataforest GmbH        Taunusstraße 52        65580 Kriftel                    Telefon: +49 (0) 6192 93922 33        E-Mail: hi@dataforest.net Support: support@avoro.euelfirma.de                    Verantwortliche Stelle ist die natürliche oder juristische Person,        die allein oder gemeinsam mit anderen über die Zwecke und Mittel        der Verarbeitung von personenbezogenen Daten (z. B. Namen,        E-Mail-Adressen o. Ä.) entscheidet.            Speicherdauer              Soweit innerhalb dieser Datenschutzerklärung keine speziellere        Speicherdauer genannt wurde, verbleiben Ihre personenbezogenen Daten bei        uns, bis der Zweck für die Datenverarbeitung entfällt. Wenn        Sie ein berechtigtes Löschersuchen geltend machen oder eine        Einwilligung zur Datenverarbeitung widerrufen, werden Ihre Daten        gelöscht, sofern wir keine anderen rechtlich zulässigen        Gründe für die Speicherung Ihrer personenbezogenen Daten haben        (z. B. steuer- oder handelsrechtliche Aufbewahrungsfristen); im        letztgenannten Fall erfolgt die Löschung nach Fortfall dieser        Gründe.                    Allgemeine Hinweise zu den Rechtsgrundlagen der Datenverarbeitung auf        dieser Website                    Sofern Sie in die Datenverarbeitung eingewilligt haben, verarbeiten wir        Ihre personenbezogenen Daten auf Grundlage von Art. 6 Abs. 1 lit. a        DSGVO bzw. Art. 9 Abs. 2 lit. a DSGVO, sofern besondere Datenkategorien        nach Art. 9 Abs. 1 DSGVO verarbeitet werden. Im Falle einer        ausdrücklichen Einwilligung in die Übertragung        personenbezogener Daten in Drittstaaten erfolgt die Datenverarbeitung        außerdem auf Grundlage von Art. 49 Abs. 1 lit. a DSGVO. Sofern Sie        in die Speicherung von Cookies oder in den Zugriff auf Informationen in        Ihr Endgerät (z. B. via Device-Fingerprinting) eingewilligt        haben, erfolgt die Datenverarbeitung zusätzlich auf Grundlage von        § 25 Abs. 1 TDDDG. Die Einwilligung ist jederzeit widerrufbar. Sind        Ihre Daten zur Vertragserfüllung oder zur Durchführung        vorvertraglicher Maßnahmen erforderlich, verarbeiten wir Ihre        Daten auf Grundlage des Art. 6 Abs. 1 lit. b DSGVO. Des Weiteren        verarbeiten wir Ihre Daten, sofern diese zur Erfüllung einer        rechtlichen Verpflichtung erforderlich sind auf Grundlage von Art. 6        Abs. 1 lit. c DSGVO. Die Datenverarbeitung kann ferner auf Grundlage        unseres berechtigten Interesses nach Art. 6 Abs. 1 lit. f DSGVO        erfolgen. Über die jeweils im Einzelfall einschlägigen        Rechtsgrundlagen wird in den folgenden Absätzen dieser        Datenschutzerklärung informiert.            Empfänger von personenbezogenen Daten              Im Rahmen unserer Geschäftstätigkeit arbeiten wir mit        verschiedenen externen Stellen zusammen. Dabei ist teilweise auch eine        Übermittlung von personenbezogenen Daten an diese externen Stellen        erforderlich. Wir geben personenbezogene Daten nur dann an externe        Stellen weiter, wenn dies im Rahmen einer Vertragserfüllung        erforderlich ist, wenn wir gesetzlich hierzu verpflichtet sind        (z. B. Weitergabe von Daten an Steuerbehörden), wenn wir ein        berechtigtes Interesse nach Art. 6 Abs. 1 lit. f DSGVO an der Weitergabe        haben oder wenn eine sonstige Rechtsgrundlage die Datenweitergabe        erlaubt. Beim Einsatz von Auftragsverarbeitern geben wir        personenbezogene Daten unserer Kunden nur auf Grundlage eines        gültigen Vertrags über Auftragsverarbeitung weiter. Im Falle        einer gemeinsamen Verarbeitung wird ein Vertrag über gemeinsame        Verarbeitung geschlossen.            Widerruf Ihrer Einwilligung zur Datenverarbeitung              Viele Datenverarbeitungsvorgänge sind nur mit Ihrer        ausdrücklichen Einwilligung möglich. Sie können eine        bereits erteilte Einwilligung jederzeit widerrufen. Die        Rechtmäßigkeit der bis zum Widerruf erfolgten        Datenverarbeitung bleibt vom Widerruf unberührt.                    Widerspruchsrecht gegen die Datenerhebung in besonderen Fällen        sowie gegen Direktwerbung (Art. 21 DSGVO)                    WENN DIE DATENVERARBEITUNG AUF GRUNDLAGE VON ART. 6 ABS. 1 LIT. E ODER F        DSGVO ERFOLGT, HABEN SIE JEDERZEIT DAS RECHT, AUS GRÜNDEN, DIE SICH        AUS IHRER BESONDEREN SITUATION ERGEBEN, GEGEN DIE VERARBEITUNG IHRER        PERSONENBEZOGENEN DATEN WIDERSPRUCH EINZULEGEN; DIES GILT AUCH FÜR        EIN AUF DIESE BESTIMMUNGEN GESTÜTZTES PROFILING. DIE JEWEILIGE        RECHTSGRUNDLAGE, AUF DENEN EINE VERARBEITUNG BERUHT, ENTNEHMEN SIE        DIESER DATENSCHUTZERKLÄRUNG. WENN SIE WIDERSPRUCH EINLEGEN, WERDEN        WIR IHRE BETROFFENEN PERSONENBEZOGENEN DATEN NICHT MEHR VERARBEITEN, ES        SEI DENN, WIR KÖNNEN ZWINGENDE SCHUTZWÜRDIGE GRÜNDE        FÜR DIE VERARBEITUNG NACHWEISEN, DIE IHRE INTERESSEN, RECHTE UND        FREIHEITEN ÜBERWIEGEN ODER DIE VERARBEITUNG DIENT DER        GELTENDMACHUNG, AUSÜBUNG ODER VERTEIDIGUNG VON        RECHTSANSPRÜCHEN (WIDERSPRUCH NACH ART. 21 ABS. 1 DSGVO).                    WERDEN IHRE PERSONENBEZOGENEN DATEN VERARBEITET, UM DIREKTWERBUNG ZU        BETREIBEN, SO HABEN SIE DAS RECHT, JEDERZEIT WIDERSPRUCH GEGEN DIE        VERARBEITUNG SIE BETREFFENDER PERSONENBEZOGENER DATEN ZUM ZWECKE        DERARTIGER WERBUNG EINZULEGEN; DIES GILT AUCH FÜR DAS PROFILING,        SOWEIT ES MIT SOLCHER DIREKTWERBUNG IN VERBINDUNG STEHT. WENN SIE        WIDERSPRECHEN, WERDEN IHRE PERSONENBEZOGENEN DATEN ANSCHLIESSEND NICHT        MEHR ZUM ZWECKE DER DIREKTWERBUNG VERWENDET (WIDERSPRUCH NACH ART. 21        ABS. 2 DSGVO).                    Beschwerde­recht bei der zuständigen Aufsichts­behörde                    Im Falle von Verstößen gegen die DSGVO steht den Betroffenen        ein Beschwerderecht bei einer Aufsichtsbehörde, insbesondere in dem        Mitgliedstaat ihres gewöhnlichen Aufenthalts, ihres Arbeitsplatzes        oder des Orts des mutmaßlichen Verstoßes zu. Das        Beschwerderecht besteht unbeschadet anderweitiger verwaltungsrechtlicher        oder gerichtlicher Rechtsbehelfe.            Recht auf Daten­übertrag­barkeit              Sie haben das Recht, Daten, die wir auf Grundlage Ihrer Einwilligung        oder in Erfüllung eines Vertrags automatisiert verarbeiten, an sich        oder an einen Dritten in einem gängigen, maschinenlesbaren Format        aushändigen zu lassen. Sofern Sie die direkte Übertragung der        Daten an einen anderen Verantwortlichen verlangen, erfolgt dies nur,        soweit es technisch machbar ist.            Auskunft, Berichtigung und Löschung              Sie haben im Rahmen der geltenden gesetzlichen Bestimmungen jederzeit        das Recht auf unentgeltliche Auskunft über Ihre gespeicherten        personenbezogenen Daten, deren Herkunft und Empfänger und den Zweck        der Datenverarbeitung und ggf. ein Recht auf Berichtigung oder        Löschung dieser Daten. Hierzu sowie zu weiteren Fragen zum Thema        personenbezogene Daten können Sie sich jederzeit an uns wenden.            Recht auf Einschränkung der Verarbeitung              Sie haben das Recht, die Einschränkung der Verarbeitung Ihrer        personenbezogenen Daten zu verlangen. Hierzu können Sie sich        jederzeit an uns wenden. Das Recht auf Einschränkung der        Verarbeitung besteht in folgenden Fällen:                              Wenn Sie die Richtigkeit Ihrer bei uns gespeicherten personenbezogenen          Daten bestreiten, benötigen wir in der Regel Zeit, um dies zu          überprüfen. Für die Dauer der Prüfung haben Sie          das Recht, die Einschränkung der Verarbeitung Ihrer          personenbezogenen Daten zu verlangen.                          Wenn die Verarbeitung Ihrer personenbezogenen Daten          unrechtmäßig geschah/geschieht, können Sie statt der          Löschung die Einschränkung der Datenverarbeitung verlangen.                          Wenn wir Ihre personenbezogenen Daten nicht mehr benötigen, Sie          sie jedoch zur Ausübung, Verteidigung oder Geltendmachung von          Rechtsansprüchen benötigen, haben Sie das Recht, statt der          Löschung die Einschränkung der Verarbeitung Ihrer          personenbezogenen Daten zu verlangen.                          Wenn Sie einen Widerspruch nach Art. 21 Abs. 1 DSGVO eingelegt haben,          muss eine Abwägung zwischen Ihren und unseren Interessen          vorgenommen werden. Solange noch nicht feststeht, wessen Interessen          überwiegen, haben Sie das Recht, die Einschränkung der          Verarbeitung Ihrer personenbezogenen Daten zu verlangen.                            Wenn Sie die Verarbeitung Ihrer personenbezogenen Daten        eingeschränkt haben, dürfen diese Daten – von ihrer        Speicherung abgesehen – nur mit Ihrer Einwilligung oder zur        Geltendmachung, Ausübung oder Verteidigung von        Rechtsansprüchen oder zum Schutz der Rechte einer anderen        natürlichen oder juristischen Person oder aus Gründen eines        wichtigen öffentlichen Interesses der Europäischen Union oder        eines Mitgliedstaats verarbeitet werden.            SSL- bzw. TLS-Verschlüsselung              Diese Seite nutzt aus Sicherheitsgründen und zum Schutz der        Übertragung vertraulicher Inhalte, wie zum Beispiel Bestellungen        oder Anfragen, die Sie an uns als Seitenbetreiber senden, eine SSL- bzw.        TLS-Verschlüsselung. Eine verschlüsselte Verbindung erkennen        Sie daran, dass die Adresszeile des Browsers von „http://“        auf „https://“ wechselt und an dem Schloss-Symbol in Ihrer        Browserzeile.                    Wenn die SSL- bzw. TLS-Verschlüsselung aktiviert ist, können        die Daten, die Sie an uns übermitteln, nicht von Dritten mitgelesen        werden.            4. Datenerfassung auf dieser Website      Server-Log-Dateien              Der Provider der Seiten erhebt und speichert automatisch Informationen        in so genannten Server-Log-Dateien, die Ihr Browser automatisch an uns        übermittelt. Dies sind:                    Browsertyp und Browserversion        verwendetes Betriebssystem        Referrer URL        Hostname des zugreifenden Rechners        Uhrzeit der Serveranfrage        IP-Adresse                    Eine Zusammenführung dieser Daten mit anderen Datenquellen wird        nicht vorgenommen.                    Die Erfassung dieser Daten erfolgt auf Grundlage von Art. 6 Abs. 1 lit.        f DSGVO. Der Websitebetreiber hat ein berechtigtes Interesse an der        technisch fehlerfreien Darstellung und der Optimierung seiner Website        – hierzu müssen die Server-Log-Files erfasst werden.            Anfrage per E-Mail, Telefon oder Telefax              Wenn Sie uns per E-Mail, Telefon oder Telefax kontaktieren, wird Ihre        Anfrage inklusive aller daraus hervorgehenden personenbezogenen Daten        (Name, Anfrage) zum Zwecke der Bearbeitung Ihres Anliegens bei uns        gespeichert und verarbeitet. Diese Daten geben wir nicht ohne Ihre        Einwilligung weiter.                    Die Verarbeitung dieser Daten erfolgt auf Grundlage von Art. 6 Abs. 1        lit. b DSGVO, sofern Ihre Anfrage mit der Erfüllung eines Vertrags        zusammenhängt oder zur Durchführung vorvertraglicher        Maßnahmen erforderlich ist. In allen übrigen Fällen        beruht die Verarbeitung auf unserem berechtigten Interesse an der        effektiven Bearbeitung der an uns gerichteten Anfragen (Art. 6 Abs. 1        lit. f DSGVO) oder auf Ihrer Einwilligung (Art. 6 Abs. 1 lit. a DSGVO)        sofern diese abgefragt wurde; die Einwilligung ist jederzeit        widerrufbar.                    Die von Ihnen an uns per Kontaktanfragen übersandten Daten        verbleiben bei uns, bis Sie uns zur Löschung auffordern, Ihre        Einwilligung zur Speicherung widerrufen oder der Zweck für die        Datenspeicherung entfällt (z. B. nach abgeschlossener        Bearbeitung Ihres Anliegens). Zwingende gesetzliche Bestimmungen –        insbesondere gesetzliche Aufbewahrungsfristen – bleiben        unberührt.            Kommentar­funktion auf dieser Website              Für die Kommentarfunktion auf dieser Seite werden neben Ihrem        Kommentar auch Angaben zum Zeitpunkt der Erstellung des Kommentars und,        wenn Sie nicht anonym posten, der von Ihnen gewählte Nutzername        gespeichert.            Speicherdauer der Kommentare              Die Kommentare und die damit verbundenen Daten werden gespeichert und        verbleiben auf dieser Website, bis der kommentierte Inhalt        vollständig gelöscht wurde oder die Kommentare aus rechtlichen        Gründen gelöscht werden müssen (z. B. beleidigende        Kommentare).            Rechtsgrundlage              Die Speicherung der Kommentare erfolgt auf Grundlage Ihrer Einwilligung        (Art. 6 Abs. 1 lit. a DSGVO). Sie können eine von Ihnen erteilte        Einwilligung jederzeit widerrufen. Dazu reicht eine formlose Mitteilung        per E-Mail an uns. Die Rechtmäßigkeit der bereits erfolgten        Datenverarbeitungsvorgänge bleibt vom Widerruf unberührt.                    Quelle: https://www.e-recht24.de            '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LegalnoticeComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            RouterOutlet\n                            RouterModule\n                            NgClass\n                                ToastMessageComponent\n                \n            \n\n            \n                styleUrls\n                ./login.component.scss,./landscape.scss\n            \n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                forgetPassword\n                            \n                            \n                                introPlayed\n                            \n                            \n                                loginPage\n                            \n                            \n                                    Public\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkside\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    toastMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, toastMessageService: ToastMessageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/login.component.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for LoginComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular Router service.\n\n\n                                                        \n                                                \n                                                \n                                                        toastMessageService\n                                                  \n                                                        \n                                                                        ToastMessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe toast message service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkside\n                        \n                    \n                \n            \n            \n                \ncheckside()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/login.component.ts:40\n                        \n                    \n\n\n            \n                \n                        Checks the current route and updates the page flags accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        forgetPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/login.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        introPlayed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/login.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/login/login.component.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Router\n\n                    \n                \n                    \n                        \n                                Defined in src/app/login/login.component.ts:24\n                        \n                    \n\n            \n                \n                    - The Angular Router service.\n                \n            \n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        toastMessage\n                    \n                \n\n                \n                    \n                        gettoastMessage()\n                    \n                \n                            \n                                \n                                    Defined in src/app/login/login.component.ts:60\n                                \n                            \n                    \n                        \n                                Gets the current toast message.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { NgClass } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { Router, RouterOutlet, RouterModule } from '@angular/router';\nimport { ToastMessageService } from '../shared/services/toastmessage.service';\nimport { ToastMessageComponent } from '../shared/toastmessage/toastmessage.component';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [RouterOutlet, RouterModule, NgClass, ToastMessageComponent],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss', './landscape.scss'],\n})\nexport class LoginComponent {\n  loginPage: boolean = true;\n  forgetPassword:boolean = false;\n  introPlayed: boolean = false;\n\n  /**\n   * Constructor for LoginComponent.\n   * @param {Router} router - The Angular Router service.\n   * @param {ToastMessageService} toastMessageService - The toast message service.\n   */\n  constructor(public router: Router, private toastMessageService: ToastMessageService) {\n    this.checkside();\n    let introPlayedVar = sessionStorage.getItem('introPlayed');\n    if (introPlayedVar !== null) {\n      this.introPlayed = JSON.parse(introPlayedVar);\n    }\n    setTimeout(() => {\n      this.introPlayed = true;\n      sessionStorage.setItem('introPlayed', JSON.stringify(this.introPlayed));\n    }, 6000);\n  }\n\n\n  /**\n   * Checks the current route and updates the page flags accordingly.\n   */\n  checkside() {\n    setInterval(() => {\n      if (this.router.routerState.snapshot.url == '/') {\n        this.loginPage = true;\n      } else {\n        if (this.router.routerState.snapshot.url == '/forget') {\n          this.forgetPassword = true;\n        } else {\n          this.forgetPassword = false;\n        }\n        this.loginPage = false;\n      }\n    },100)\n  }\n\n\n  /**\n   * Gets the current toast message.\n   * @returns {string} - The current toast message.\n   */\n  get toastMessage() {\n    return this.toastMessageService.toastSignal();\n  }\n}\n\n    \n\n    \n        @if (!introPlayed) {}\n\n    \n        \n        \n            DABubble\n        \n    \n    \n        \n            Neu bei DABubble?\n            Konto erstellen\n        \n    \n    \n        \n    \n    \n        Impressum\n        Datenschutz\n    \n\n@if (toastMessage != '') {}\n    \n\n    \n                \n                    ./login.component.scss\n                \n                @use \"./../../mixins.scss\" as mixins;\n@use \"./../../colors.scss\" as colors;\n\n.animationBackground {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  left: 0;\n  top: 0;\n  background: colors.$bg-intro;\n  animation: hide 1s 5s forwards;\n}\n\n.afterIntro {\n  opacity: 0;\n  animation: reveal 1s 5s forwards;\n}\n\n.d-none {\n  display: none !important;\n}\n\n.flex {\n  display: flex !important;\n}\n\n.container {\n  position: absolute;\n  width: 300px;\n  display: flex;\n  align-items: center;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  gap: 16px;\n  z-index: 100;\n  animation: moveToTopLeft 1s 5s forwards;\n  img {\n    width: auto;\n    position: absolute;\n    left: 0px;\n    height: 184px;\n    animation: moveLeft 0.5s 1s forwards,\n      makeStatic 1s 5s forwards,\n      shrinkImage 1s 5s forwards,\n      moveBack 1s 5s forwards;\n    z-index: 2;\n  }\n\n  .textcontainer {\n    position: relative;\n    display: flex;\n    align-items: center;\n    transform: translateX(35%);\n    width: 300px;\n    height: 70px;\n    overflow: hidden;\n    animation: moveLittleLeft 1s 5s forwards;\n\n    h1 {\n      position: absolute;\n      transform: translateX(-100%);\n      font-size: 60px;\n      font-weight: 700;\n      animation: moveRight 0.5s 2s ease-in-out forwards,\n        changeHeadline 1s 5s forwards;\n      color: white;\n    }\n  }\n}\n\n.containerNoAnimation {\n  position: absolute;\n  display: flex;\n  align-items: center;\n  top: 75px;\n  left: 75px;\n  gap: 16px;\n  max-width: 1920px;\n\n  img {\n    width: auto;\n    height: 75px;\n    z-index: 2;\n  }\n\n  h1 {\n    color: black;\n    font-size: 32px;\n    font-weight: 700;\n  }\n}\n\nheader {\n  position: absolute;\n  top: 90px;\n  right: 75px;\n  @include mixins.flexbox($justify: space-between);\n\n  >div {\n    @include mixins.flexbox($direction: column, $justify: start);\n    gap: 5px;\n  }\n\n  .logo {\n    @include mixins.flexbox();\n    gap: 10px;\n\n    >span {\n      font-size: 30px;\n      font-weight: 700;\n    }\n  }\n}\n\na {\n  &:hover {\n    font-weight: 500;\n  }\n}\n\nheader,\nfooter {\n  a {\n    padding: 10px;\n    border-radius: 100px;\n    @include mixins.border-marker($color: colors.$bg-color);\n\n    &:hover {\n      border-color: colors.$light-purple;\n    }\n  }\n}\n\nsection {\n  @include mixins.flexbox($direction: column);\n  height: 100vh;\n  width: 100vw;\n  max-width: 1980px;\n  text-align: center;\n  position: relative;\n\n  &:hover {\n    cursor: default;\n  }\n}\n\ninput {\n  background-color: colors.$bg-color;\n  border: none;\n  flex: 1;\n  font-size: 18px;\n\n  &:focus-visible {\n    outline: unset;\n  }\n\n  &:-webkit-autofill {\n    transition: background-color 5000s ease-in-out 0s;\n  }\n}\n\n.inputCont {\n  @include mixins.flexbox($direction: column);\n  gap: 10px;\n  width: 100%;\n}\n\n.input {\n  @include mixins.flexbox($justify: start);\n  @include mixins.border-marker($color: colors.$white);\n  width: 100%;\n  border-radius: 100px;\n  position: relative;\n\n  &:hover,\n  input {\n    cursor: pointer;\n    border-color: colors.$purple2;\n  }\n\n  &:focus-within,\n  input {\n    border-color: colors.$purple2;\n\n    &::placeholder {\n      display: none;\n    }\n  }\n\n  input {\n    @include mixins.border-marker($color: colors.$white);\n    border-radius: 100px;\n    padding: 10px;\n    padding-left: 50px;\n  }\n\n  svg {\n    position: absolute;\n    left: 20px;\n  }\n}\n\n.mainCont {\n  @include mixins.flexbox($direction: column, $justify: space-around);\n  border-radius: 30px;\n  background-color: colors.$white;\n  padding: 50px;\n  gap: 40px;\n  position: relative;\n  max-width: 606px;\n\n  a {\n    padding: 5px 10px;\n    border-radius: 100px;\n\n    &:hover {\n      background-color: colors.$bg-color;\n      color: colors.$purple3;\n    }\n  }\n\n  span {\n    font-size: 20px;\n    line-height: 24px;\n  }\n\n  .headline {\n    @include mixins.flexbox();\n  }\n}\n\nh1 {\n  color: colors.$purple;\n  font-size: 46px;\n  font-weight: 700;\n}\n\n.line {\n  @include mixins.border-marker($color: colors.$light-purple);\n}\n\na {\n  color: colors.$purple2;\n  text-decoration: none;\n}\n\n.buttons {\n  @include mixins.flexbox();\n  gap: 25px;\n}\n\nbutton {\n  background-color: unset;\n  border-radius: 25px;\n  padding: 12px 25px;\n  font-size: 18px;\n  font-weight: 400;\n  line-height: 24.55px;\n  border-style: solid;\n\n  &:hover {\n    cursor: pointer;\n\n    &:disabled {\n      cursor: not-allowed;\n    }\n  }\n}\n\nbutton:disabled {\n  background-color: colors.$grey;\n  border-color: colors.$white;\n}\n\n.button_blue {\n  background-color: colors.$purple;\n  color: colors.$white;\n  border-color: colors.$purple;\n  font-weight: 700;\n\n  &:hover {\n    opacity: 0.8;\n  }\n}\n\n.button_white {\n  @include mixins.border-marker(colors.$light-purple);\n  color: colors.$purple;\n\n  &:hover {\n    border-color: colors.$light-purple;\n    background-color: colors.$purple;\n    color: colors.$white;\n  }\n}\n\n.arrowBack {\n  position: absolute;\n  left: 15px;\n  padding: 8px;\n  border-radius: 50px;\n  cursor: pointer;\n\n  svg {\n    display: block;\n    margin: auto;\n  }\n\n  &:hover {\n    background-color: colors.$bg-color;\n  }\n\n  &:hover path {\n    fill: colors.$purple;\n  }\n}\n\nfooter {\n  position: absolute;\n  width: 100%;\n  bottom: 30px;\n  @include mixins.flexbox();\n  gap: 40px;\n}\n\n.warning {\n  @include mixins.flexbox($justify: start);\n  width: 100%;\n  color: colors.$error;\n  font-size: 14px !important;\n  line-height: 19.1px !important;\n}\n\n.input-warning {\n  width: 100%;\n  @include mixins.flexbox();\n  gap: 5px;\n}\n\nform {\n  @include mixins.flexbox($direction: column, $align: start);\n  gap: 12px;\n  width: 100%;\n\n  .link {\n    width: 100%;\n  }\n}\n\n.sectionDisplayHeight {\n  height: 100vh;\n}\n\n@media (max-width: 1275px) {\n  header {\n    top: 60px;\n  }\n\n  .containerNoAnimation {\n    top: 40px;\n    left: 40px;\n  }\n\n  .container {\n    animation: moveToTopLeft40px 1s 5s forwards;\n    width: 300px;\n  }\n\n}\n\n@media (max-width: 600px) {\n\n  .container {\n    animation: moveToTop 1s 5s forwards;\n    gap: 1px !important;\n    width: 240px;\n\n    h1 {\n      font-size: 30px !important;\n    }\n\n    img {\n      height: 75px;\n      animation: moveLeft 0.5s 1s forwards,\n        makeStatic 1s 5s forwards,\n        shrinkImageMobile 1s 5s forwards;\n    }\n  }\n\n  section {\n    width: 100% !important;\n    padding: 0px 20px 0px 20px;\n    gap: 20px;\n    min-height: 100vh !important;\n    justify-content: unset;\n  }\n\n  form {\n    gap: 20px;\n  }\n\n  .mainCont {\n    padding: 25px;\n\n    h1 {\n      font-size: 32px;\n    }\n  }\n\n  .containerNoAnimation {\n    top: 30px;\n    left: unset;\n    display: flex;\n    justify-content: center;\n\n    img {\n      height: 56px;\n      width: 56px;\n    }\n\n    h1 {\n      font-size: 30px;\n    }\n\n  }\n\n  header {\n    top: unset;\n    right: unset;\n    bottom: -20px;\n    padding-bottom: 20px;\n\n    div {\n      gap: 15px;\n    }\n\n    a {\n      font-weight: 700;\n      border-color: colors.$light-purple;\n    }\n  }\n\n  button {\n    font-weight: 700 !important;\n  }\n\n  footer {\n    display: none;\n  }\n\n  .paddingBottom {\n    height: unset;\n  }\n}\n\n@media (max-width: 500px) {\n  section {\n    justify-content: center;\n  }\n\n  button {\n    padding: 12px 20px;\n  }\n\n  .arrowBack {\n    padding: 0px;\n    left: 5px;\n  }\n}\n\n@media (max-width: 380px) {\n  .arrowBack {\n    padding: 0px;\n  }\n\n  .mainCont {\n    padding: 5px;\n\n    h1 {\n      font-size: 20px;\n    }\n\n    span {\n      font-size: 14px;\n    }\n  }\n\n  section {\n    padding-left: 5px !important;\n    padding-right: 5px !important;\n  }\n\n  button {\n    padding: 8px 10px;\n  }\n}\n\n@media (max-height: 900px) {\n  .mainCont {\n    gap: 10px !important;\n  }\n\n  form {\n    gap: 15px !important;\n  }\n\n  section {\n    padding: 120px 20px 20px 20px;\n    gap: 20px;\n    justify-content: unset;\n  }\n}\n\n@media (max-height: 800px) {\n  .mainCont {\n    padding-top: 30px;\n    padding-bottom: 30px;\n  }\n}\n\n@media (max-height: 600px) {\n  section {\n    padding-bottom: 100px;\n    height: fit-content;\n  }\n}\n                \n                    ./landscape.scss\n                \n                @media (orientation: landscape) and (max-width: 800px) {\n    .reset {\n        .containerNoAnimation {\n            left: 0px;\n            justify-content: center;\n            width: 100%;\n        }\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (!introPlayed) {}                                DABubble                                    Neu bei DABubble?            Konto erstellen                                        Impressum        Datenschutz    @if (toastMessage != \\'\\') {}'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LogoComponent.html":{"url":"components/LogoComponent.html","title":"component - LogoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LogoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/logo/logo.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-logo\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./logo.component.html\n            \n\n\n\n            \n                styleUrl\n                ./logo.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-logo',\n  standalone: true,\n  imports: [],\n  templateUrl: './logo.component.html',\n  styleUrl: './logo.component.scss'\n})\n\nexport class LogoComponent {}\n\n    \n\n    \n        \n    \n    DABubble\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        DABubble'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LogoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MainComponent.html":{"url":"components/MainComponent.html","title":"component - MainComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MainComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/main.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-main\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                HeaderComponent\n                                BuilderComponent\n                                ToastMessageComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./main.component.html\n            \n\n\n\n            \n                styleUrl\n                ./main.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                loadingStatus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearLoadingSpinner\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    toastMessage\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(toastMessageService: ToastMessageService, auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/main.component.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        toastMessageService\n                                                  \n                                                        \n                                                                        ToastMessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearLoadingSpinner\n                        \n                    \n                \n            \n            \n                \nclearLoadingSpinner()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/main.component.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/main.component.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/main/main.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadingStatus\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.authService.loadingSpinnerBoard\n                    \n                \n                    \n                        \n                                Defined in src/app/main/main.component.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        toastMessage\n                    \n                \n\n                \n                    \n                        gettoastMessage()\n                    \n                \n                            \n                                \n                                    Defined in src/app/main/main.component.ts:29\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, inject, OnInit } from '@angular/core';\nimport { HeaderComponent } from '../shared/header/header.component';\nimport { BuilderComponent } from '../shared/builder/builder.component';\nimport { ToastMessageService } from '../shared/services/toastmessage.service';\nimport { ToastMessageComponent } from '../shared/toastmessage/toastmessage.component';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../shared/services/auth.service';\n\n@Component({\n  selector: 'app-main',\n  standalone: true,\n  imports: [\n    HeaderComponent,\n    BuilderComponent,\n    ToastMessageComponent,\n    CommonModule,\n  ],\n  templateUrl: './main.component.html',\n  styleUrl: './main.component.scss',\n})\nexport class MainComponent implements OnInit {\n  constructor(\n    private toastMessageService: ToastMessageService,\n    private auth: AuthService\n  ) {}\n  authService = inject(AuthService);\n  loadingStatus = this.authService.loadingSpinnerBoard;\n\n  get toastMessage() {\n    return this.toastMessageService.toastSignal();\n  }\n\n  ngOnInit(): void {\n    this.clearLoadingSpinner();\n  }\n\n  clearLoadingSpinner() {\n    setTimeout(() => {\n      this.loadingStatus = false;\n    }, 1500);\n  }\n}\n\n    \n\n    \n        \n    \n\n\n\n\n    \n    \n\n\n\n@if (toastMessage != '') {\n    \n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            @if (toastMessage != \\'\\') {    }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MainComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MentionComponent.html":{"url":"components/MentionComponent.html","title":"component - MentionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MentionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/shared/mention/mention.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-mention\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./mention.component.html\n            \n\n\n\n            \n                styleUrl\n                ./mention.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                acitveUserID\n                            \n                            \n                                activeChannel$\n                            \n                            \n                                members\n                            \n                            \n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkMention\n                            \n                            \n                                checkMentions\n                            \n                            \n                                getMembers\n                            \n                            \n                                selectMember\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                builder\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, channelService: ChannelsService, userService: UserService, mentionService: MentionService)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/shared/mention/mention.component.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for the MentionComponent.\nSubscribes to the currently active channel and loads the members of this channel.\nAlso sets the active user ID.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The AuthService to get the active user ID.\n\n                                                        \n                                                \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The ChannelService to subscribe to the active channel.\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The UserService to load the members of the channel.\n\n                                                        \n                                                \n                                                \n                                                        mentionService\n                                                  \n                                                        \n                                                                        MentionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The MentionService to handle the mention logic.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        builder\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/shared/mention/mention.component.ts:18\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkMention\n                        \n                    \n                \n            \n            \n                \ncheckMention(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/mention/mention.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Checks if the member with the given id is already mentioned.\nLoops through the mentionsUser array of the MentionService and checks if the id of the member matches the id of a user in the array.\nIf it does, it sets the state property to true, else it sets it to false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the member to be checked.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkMentions\n                        \n                    \n                \n            \n            \n                \ncheckMentions(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/mention/mention.component.ts:76\n                        \n                    \n\n\n            \n                \n                        Checks if the member is already mentioned and adds the member to the members array.\nIf the member is not mentioned, it adds the member to the members array.\nIf the member is already mentioned, it sets the mention property of the member to true.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The member to be checked with the properties name, photoUrl, id, status, and mention.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMembers\n                        \n                    \n                \n            \n            \n                \ngetMembers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/mention/mention.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Subscribes to the currently active channel and loads the members of this channel.\nFor each member, it calls the checkMentions method to check if the member is already mentioned.\nIf the member is not mentioned, it adds the member to the members array.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectMember\n                        \n                    \n                \n            \n            \n                \nselectMember(member: any, builder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/mention/mention.component.ts:97\n                        \n                    \n\n\n            \n                \n                        Selects a member and updates the mention property of the member.\nIf the member is not mentioned, it sets the mention property to true and calls the mentionSomeone method of the MentionService.\nIf the member is already mentioned, it sets the mention property to false and calls the disselect method of the MentionService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The member object containing the user data to be selected.\n\n                                            \n                                        \n                                        \n                                                builder\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.builder\n                                            \n\n                                            \n                                                    The builder string indicating the component to be used for the mention. Default is the builder string of the component.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        acitveUserID\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/mention/mention.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        activeChannel$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/mention/mention.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/mention/mention.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/mention/mention.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../../shared/services/auth.service';\nimport { ChannelsService } from '../../../shared/services/channels.service';\nimport { Channel } from '../../../models/channel';\nimport { UserService } from '../../../shared/services/user.service';\nimport { CommonModule } from '@angular/common';\nimport { MentionService } from '../../../shared/services/mention.service';\n\n@Component({\n  selector: 'app-mention',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './mention.component.html',\n  styleUrl: './mention.component.scss'\n})\nexport class MentionComponent {\n  @Input() builder:string = '';\n  acitveUserID: string | null;\n  activeChannel$: Observable;\n  members: any = [];\n  state:boolean = false;\n\n  /**\n   * Constructor for the MentionComponent.\n   * Subscribes to the currently active channel and loads the members of this channel.\n   * Also sets the active user ID.\n   * @param auth The AuthService to get the active user ID.\n   * @param channelService The ChannelService to subscribe to the active channel.\n   * @param userService The UserService to load the members of the channel.\n   * @param mentionService The MentionService to handle the mention logic.\n   */\n  constructor(\n    private auth: AuthService,\n    private channelService: ChannelsService,\n    private userService: UserService,\n    private mentionService: MentionService,\n  ) {\n    this.acitveUserID = this.auth.userId();\n    this.activeChannel$ = this.channelService.currentChannel$;\n    this.getMembers();\n  }\n\n\n  /**\n   * Subscribes to the currently active channel and loads the members of this channel.\n   *\n   * For each member, it calls the checkMentions method to check if the member is already mentioned.\n   * If the member is not mentioned, it adds the member to the members array.\n   */\n  getMembers() {\n    this.activeChannel$.subscribe(channel => {\n      channel?.members.forEach(member => {\n        this.userService.getUserById(member).subscribe(user => {\n          const data = {\n            name: user.name ? user.name : '',\n            photoUrl: user.photoURL ? user.photoURL : '',\n            id: user.userId ? user.userId : '',\n            status: user.status ? user.status : false,\n            mention: false,\n          }\n          this.checkMentions(data);\n        })\n      })\n    })\n  }\n\n\n  /**\n   * Checks if the member is already mentioned and adds the member to the members array.\n   *\n   * If the member is not mentioned, it adds the member to the members array.\n   * If the member is already mentioned, it sets the mention property of the member to true.\n   * @param data The member to be checked with the properties name, photoUrl, id, status, and mention.\n   */\n  checkMentions(data: {name: string; photoUrl: string; id: string; status: boolean; mention: boolean;}) {\n    if(data.name !== \"Unbekannt\" && data.id !== this.acitveUserID) {\n      this.checkMention(data.id)\n      if (!this.state) {\n        this.members.push(data)\n      } else {\n        data.mention = true;\n        this.members.push(data)\n      }\n    }\n  }\n\n\n  /**\n   * Selects a member and updates the mention property of the member.\n   *\n   * If the member is not mentioned, it sets the mention property to true and calls the mentionSomeone method of the MentionService.\n   * If the member is already mentioned, it sets the mention property to false and calls the disselect method of the MentionService.\n   * @param member The member object containing the user data to be selected.\n   * @param builder The builder string indicating the component to be used for the mention. Default is the builder string of the component.\n   */\n  selectMember(member:any, builder = this.builder) {\n    if (!member.mention) {\n      member.mention = true;\n      this.mentionService.mentionSomeone(member, builder);\n    } else {\n      member.mention = false;\n      this.mentionService.disselect(member.id);\n    }\n  }\n\n\n  /**\n   * Checks if the member with the given id is already mentioned.\n   *\n   * Loops through the mentionsUser array of the MentionService and checks if the id of the member matches the id of a user in the array.\n   * If it does, it sets the state property to true, else it sets it to false.\n   * @param id The id of the member to be checked.\n   */\n  checkMention(id:string) {\n    this.mentionService.mentionsUser.forEach((user:any) => {\n      if (id === user.id) {\n        this.state = true;\n      } else {\n        this.state = false;\n      }\n    })\n  }\n}\n    \n\n    \n        \n    @if (members.length == 0) {\n        Sie sind das einzige Mitglied\n    }\n    @for (member of members; track member) {\n        \n            \n                \n                \n                \n            \n            {{ member.name }}\n        \n    }\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    @if (members.length == 0) {        Sie sind das einzige Mitglied    }    @for (member of members; track member) {                                                                                            {{ member.name }}            }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MentionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MentionService.html":{"url":"injectables/MentionService.html","title":"injectable - MentionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MentionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/mention.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                builder\n                            \n                            \n                                mentionsUser\n                            \n                            \n                                    Private\n                                renderer\n                            \n                            \n                                status\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearInput\n                            \n                            \n                                disselect\n                            \n                            \n                                insertTextAndFocus\n                            \n                            \n                                    Private\n                                isClickInsideMentionPicker\n                            \n                            \n                                    Private\n                                isClickOnToggleButton\n                            \n                            \n                                    Private\n                                listenForOutsideClicks\n                            \n                            \n                                mentionSomeone\n                            \n                            \n                                mentionUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(document: Document, rendererFactory: RendererFactory2)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/mention.service.ts:12\n                            \n                        \n\n                \n                    \n                            Initializes the MentionService by setting up the renderer and listening for outside clicks on the document.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        document\n                                                  \n                                                        \n                                                                    Document\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The document object to listen for clicks on.\n\n                                                        \n                                                \n                                                \n                                                        rendererFactory\n                                                  \n                                                        \n                                                                    RendererFactory2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The factory to create a renderer with.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearInput\n                        \n                    \n                \n            \n            \n                \nclearInput(inputId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mention.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Clears the input field of the given component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                inputId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the input field in the given component.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disselect\n                        \n                    \n                \n            \n            \n                \ndisselect(member: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mention.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Disselects a user from the mentionsUser array by removing them from the array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                member\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the user to be disselected.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insertTextAndFocus\n                        \n                    \n                \n            \n            \n                \ninsertTextAndFocus(text: string, inputId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mention.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Inserts the given text into the input field of the given component and focuses the input field.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The text to be inserted.\n\n                                            \n                                        \n                                        \n                                                inputId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the input field in the given component.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isClickInsideMentionPicker\n                        \n                    \n                \n            \n            \n                \n                        \n                    isClickInsideMentionPicker(target: HTMLElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mention.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Checks if the given target element is inside a mention picker.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to check.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the element is inside a mention picker, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isClickOnToggleButton\n                        \n                    \n                \n            \n            \n                \n                        \n                    isClickOnToggleButton(target: HTMLElement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mention.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Checks if the given target element is a toggle button for a mention picker.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The element to check.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the element is a toggle button for a mention picker, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        listenForOutsideClicks\n                        \n                    \n                \n            \n            \n                \n                        \n                    listenForOutsideClicks()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mention.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Listens for clicks outside of all mention pickers and closes all pickers\nif a click is detected outside of an mention picker and not on a toggle button.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mentionSomeone\n                        \n                    \n                \n            \n            \n                \nmentionSomeone(user: any, bulider: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mention.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Mentions the given user in the given builder component (e.g. mainchat, threadchat).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user to mention.\n\n                                            \n                                        \n                                        \n                                                bulider\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The component to mention the user in.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mentionUser\n                        \n                    \n                \n            \n            \n                \nmentionUser(bulider: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/mention.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Mentions the user in the given builder component by inserting the users name preceded by an @ symbol into the input field of the builder component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                bulider\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The component to mention the user in.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        builder\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mention.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mentionsUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mention.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mention.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mention.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/mention.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable, Renderer2, RendererFactory2 } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MentionService {\n  mentionsUser: any = [];\n  private renderer: Renderer2;\n  status:boolean = false;\n  user:string = '';\n  builder:string = '';\n\n  /**\n   * Initializes the MentionService by setting up the renderer and listening for outside clicks on the document.\n   * @param document The document object to listen for clicks on.\n   * @param rendererFactory The factory to create a renderer with.\n   */\n  constructor(@Inject(DOCUMENT) private document: Document, rendererFactory: RendererFactory2) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n    this.listenForOutsideClicks();\n  }\n  \n\n  /**\n   * Listens for clicks outside of all mention pickers and closes all pickers\n   * if a click is detected outside of an mention picker and not on a toggle button.\n   */\n  private listenForOutsideClicks(): void {\n    this.renderer.listen(this.document, 'click', (event: Event) => {\n      if (!this.isClickInsideMentionPicker(event.target as HTMLElement) && !this.isClickOnToggleButton(event.target as HTMLElement)) {\n        this.status = false;\n      }\n    });\n  }\n\n\n  /**\n   * Checks if the given target element is inside a mention picker.\n   * @param target The element to check.\n   * @returns True if the element is inside a mention picker, false otherwise.\n   */\n  private isClickInsideMentionPicker(target: HTMLElement): boolean {\n    return !!target.closest('.mention-picker__wrapper');\n  }\n\n\n  /**\n   * Checks if the given target element is a toggle button for a mention picker.\n   * @param target The element to check.\n   * @returns True if the element is a toggle button for a mention picker, false otherwise.\n   */\n  private isClickOnToggleButton(target: HTMLElement): boolean {\n    return !!target.closest('.cont');\n  }\n\n\n  /**\n   * Mentions the given user in the given builder component (e.g. mainchat, threadchat).\n   * @param user The user to mention.\n   * @param bulider The component to mention the user in.\n   */\n  mentionSomeone(user:any, bulider:string) {\n    this.status = false;\n    this.user = user.name\n    this.mentionUser(bulider)\n  }\n\n\n  /**\n   * Disselects a user from the mentionsUser array by removing them from the array.\n   * @param member The id of the user to be disselected.\n   */\n  disselect(member:string) {\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MenuChannelsComponent.html":{"url":"components/MenuChannelsComponent.html","title":"component - MenuChannelsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MenuChannelsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/menu/menu-channels/menu-channels.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-menu-channels\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./menu-channels.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./menu-channels.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelActive\n                            \n                            \n                                channelForm\n                            \n                            \n                                channels\n                            \n                            \n                                    Public\n                                channelsService\n                            \n                            \n                                currentChannelId\n                            \n                            \n                                loading\n                            \n                            \n                                    Private\n                                unsubscribeFn\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadChannelsRealtime\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openDialog\n                            \n                            \n                                selectChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, dialog: MatDialog, channelsService: ChannelsService, sharedService: SharedService)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the MenuChannelsComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The FormBuilder for creating the channelForm.\n\n                                                        \n                                                \n                                                \n                                                        dialog\n                                                  \n                                                        \n                                                                    MatDialog\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The MatDialog for opening the AddchatComponent.\n\n                                                        \n                                                \n                                                \n                                                        channelsService\n                                                  \n                                                        \n                                                                        ChannelsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The ChannelsService for interacting with the channels collection in Firestore.\n\n                                                        \n                                                \n                                                \n                                                        sharedService\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The SharedService for emitting events to the outside.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadChannelsRealtime\n                        \n                    \n                \n            \n            \n                \nloadChannelsRealtime()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Loads the channels in real-time from Firestore. This method is called in ngOnInit()\nand unsubscribes in ngOnDestroy() to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Cleans up the component by unsubscribing from the Firestore channel list\nlistener. This is necessary to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:49\n                        \n                    \n\n\n            \n                \n                        Initializes the component by loading the channels in real-time.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:80\n                        \n                    \n\n\n            \n                \n                        Opens the AddchatComponent dialog with specified dimensions and styling.\nThis dialog allows the user to add a new chat channel.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectChannel\n                        \n                    \n                \n            \n            \n                \nselectChannel(channelId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:96\n                        \n                    \n\n\n            \n                \n                        Selects a channel based on the provided channel ID.\nUpdates a shared service variable and calls the channel service to select the channel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the channel to select.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Channel[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        channelsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:36\n                        \n                    \n\n            \n                \n                    The ChannelsService for interacting with the channels collection in Firestore.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentChannelId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        unsubscribeFn\n                        \n                    \n                \n            \n                \n                    \n                        Type :      | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-channels/menu-channels.component.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CommonModule } from '@angular/common';\nimport { Channel } from '../../../models/channel';\nimport { ChannelsService } from '../../../shared/services/channels.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AddchatComponent } from '../../addchat/addchat.component';\nimport { SharedService } from '../../../shared/services/newmessage.service';\n\n@Component({\n  selector: 'app-menu-channels',\n  imports: [CommonModule],\n  standalone: true,\n  templateUrl: './menu-channels.component.html',\n  styleUrls: ['./menu-channels.component.scss'],\n})\nexport class MenuChannelsComponent implements OnInit, OnDestroy {\n  private unsubscribeFn: (() => void) | null = null;\n  channelActive: boolean = false;\n  channels: Channel[] = [];\n  loading: boolean = true;\n  channelForm: FormGroup;\n  currentChannelId: string | null = null;\n\n  /**\n   * Constructor for the MenuChannelsComponent.\n   *\n   * @param fb The FormBuilder for creating the channelForm.\n   * @param dialog The MatDialog for opening the AddchatComponent.\n   * @param channelsService The ChannelsService for interacting with the channels collection in Firestore.\n   * @param sharedService The SharedService for emitting events to the outside.\n   */\n  constructor(\n    private fb: FormBuilder,\n    private dialog: MatDialog,\n    public channelsService: ChannelsService,\n    private sharedService: SharedService,\n  ) {\n    this.channelForm = this.fb.group({\n      name: ['', Validators.required],\n      description: [''],\n      isPrivate: [false],\n    });\n  }\n\n  /**\n   * Initializes the component by loading the channels in real-time.\n   */\n  ngOnInit(): void {\n    this.loadChannelsRealtime();\n  }\n\n  /**\n   * Cleans up the component by unsubscribing from the Firestore channel list\n   * listener. This is necessary to prevent memory leaks.\n   */\n  ngOnDestroy(): void {\n    if (this.unsubscribeFn) {\n      this.unsubscribeFn();\n    }\n  }\n\n  /**\n   * Loads the channels in real-time from Firestore. This method is called in ngOnInit()\n   * and unsubscribes in ngOnDestroy() to prevent memory leaks.\n   */\n  loadChannelsRealtime(): void {\n    this.loading = true;\n    this.unsubscribeFn = this.channelsService.loadChannelsRealtime((channels) => {\n      this.channels = channels;\n      this.loading = false;\n    });\n  }\n\n\n  /**\n   * Opens the AddchatComponent dialog with specified dimensions and styling.\n   * This dialog allows the user to add a new chat channel.\n   */\n  openDialog(): void {\n    this.dialog.open(AddchatComponent, {\n      width: '600px',\n      maxWidth: '90vw',\n      height: 'fit-content',\n      panelClass: 'custom-dialog-container'\n    });\n  }\n\n\n  /**\n   * Selects a channel based on the provided channel ID.\n   * Updates a shared service variable and calls the channel service to select the channel.\n   *\n   * @param {string} channelId - The ID of the channel to select.\n   */\n  selectChannel(channelId: string): void {\n    this.sharedService.updateVariable('false');\n    this.channelsService.selectChannel(channelId)\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                    \n                \n            \n            \n                \n                    \n                        \n                    \n                    \n                        \n                    \n                \n                Channels\n            \n        \n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n            \n                \n                    \n                \n            \n        \n    \n    @if (channelsService.channelsOpen) {\n\n    @for (channel of this.channels; track channel; let index=$index){\n    @if (!channel.isPrivate) {\n    \n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n            {{channel.name}}\n        \n    \n    }\n    }\n    }\n    \n        \n            \n                \n            \n            \n                \n            \n        \n        Channel hinzufügen\n    \n\n    \n\n    \n                \n                    ./menu-channels.component.scss\n                \n                @use \"../../../../mixins.scss\" as mixins;\n@use \"../../../../colors.scss\" as colors;\n\ndialog {\n    background-color: rgba(32, 82, 221, 0.5);\n    color: white;\n    border-color: transparent;\n    overflow: hidden;\n    border-radius: 5px;\n    cursor: pointer;\n    box-shadow: 0 0 20px 8px #d0d0d0;\n    height: 100px;\n    width: 200px;\n}\n\n\n.channels {\n    width: 100%;\n    @include mixins.flexbox(row, flex-start, center);\n    gap: 15px;\n\n    .channel {\n        width: 100%;\n        @include mixins.flexbox(row, flex-start, center, nowrap);\n        margin: 0px 0px 0px 25px;\n\n        .channel-box {\n            @include mixins.flexbox(row, flex-start, center, nowrap);\n            gap: 15px;\n            cursor: pointer;\n            font-size: 18px;\n            line-height: 24.55px;\n            border-radius: 12px;\n            padding: 0 30px 0 20px;\n\n            p {\n                text-wrap: nowrap;\n            }\n        }\n\n        .channel-box:hover {\n            background-color: colors.$bg-color;\n\n            svg {\n                path {\n                    fill: colors.$purple3;\n                }\n            }\n        }\n\n        .channel-box:active {\n            color: colors.$purple3;\n            font-weight: 700;\n\n            svg {\n                path {\n                    fill: colors.$purple3;\n                }\n            }\n        }\n    }\n\n    .menu-titel-box {\n        @include mixins.flexbox(row, space-between, center);\n        width: 100%;\n\n        .titel-box {\n            @include mixins.flexbox(row, flex-start, center);\n            cursor: pointer;\n            gap: 15px;\n            font-weight: 700;\n            font-size: 20px;\n            line-height: 27.28px;\n\n            div {\n                @include mixins.flexbox(row, flex-start, center);\n                gap: 10px;\n            }\n\n            .arrow-box {\n                @include mixins.flexbox(row, center, center);\n                width: 30px;\n                height: 30px;\n                cursor: pointer;\n\n                svg {\n                    transform: rotate(270deg);\n                    width: 9px;\n                }\n            }\n\n            .active {\n                svg {\n                    transform: rotate(0deg);\n                }\n            }\n        }\n\n        .titel-box:hover {\n            color: colors.$purple3;\n\n            svg {\n                path {\n                    fill: colors.$purple3;\n                }\n            }\n        }\n    }\n\n    .add-button {\n        cursor: pointer;\n        width: 24px;\n        height: 24px;\n    }\n\n    .add-button:hover {\n        background-color: colors.$bg-color;\n        border-radius: 12px;\n\n        path {\n            fill: colors.$purple3;\n        }\n    }\n}\n\n.channels-closed {\n    svg {\n        transform: rotate(0deg);\n    }\n}\n\n.add-channel-box {\n    @include mixins.flexbox(row, flex-start, center, nowrap);\n    gap: 10px;\n    padding: 0 0 0 10px;\n}\n\n.add-channel-box:hover {\n    color: colors.$purple3;\n    cursor: pointer;\n\n    path {\n        fill: colors.$purple3;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                                                                                                                                    Channels                                                                                                                                                                                                                                                        @if (channelsService.channelsOpen) {    @for (channel of this.channels; track channel; let index=$index){    @if (!channel.isPrivate) {                                                                                                                                                        {{channel.name}}                }    }    }                                                                                                            Channel hinzufügen    '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MenuChannelsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MenuComponent.html":{"url":"components/MenuComponent.html","title":"component - MenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/menu/menu.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-menu\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                MenuHeaderComponent\n                                MenuChannelsComponent\n                                MenuPrivateMessagesComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./menu.component.html\n            \n\n\n\n            \n                styleUrl\n                ./menu.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(sharedService: SharedService, stateService: StateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/menu/menu.component.ts:16\n                            \n                        \n\n                \n                    \n                            The constructor for the MenuComponent class.\nIt injects the SharedService and StateService services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sharedService\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected SharedService service.\n\n                                                        \n                                                \n                                                \n                                                        stateService\n                                                  \n                                                        \n                                                                        StateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected StateService service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createNewMessage\n                        \n                    \n                \n            \n            \n                \ncreateNewMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/menu/menu.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new message.\nSets the state of the menu to 'out' and notifies the shared service\nthat the create message button was pressed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener } from '@angular/core';\nimport { MenuHeaderComponent } from './menu-header/menu-header.component';\nimport { MenuChannelsComponent } from './menu-channels/menu-channels.component';\nimport { MenuPrivateMessagesComponent } from './menu-private-messages/menu-private-messages.component';\nimport { SearchbarComponent } from \"../../shared/header/searchbar/searchbar.component\";\nimport { SharedService } from '../../shared/services/newmessage.service';\nimport { StateService } from '../../shared/services/state.service';\n\n@Component({\n  selector: 'app-menu',\n  standalone: true,\n  imports: [MenuHeaderComponent, MenuChannelsComponent, MenuPrivateMessagesComponent],\n  templateUrl: './menu.component.html',\n  styleUrl: './menu.component.scss'\n})\nexport class MenuComponent {\n\n  /**\n   * The constructor for the MenuComponent class.\n   * It injects the SharedService and StateService services.\n   * @param sharedService The injected SharedService service.\n   * @param stateService The injected StateService service.\n   */\n  constructor(private sharedService: SharedService, private stateService: StateService) {}\n\n  /**\n   * Creates a new message.\n   * Sets the state of the menu to 'out' and notifies the shared service\n   * that the create message button was pressed.\n   */\n  createNewMessage() {\n    this.sharedService.updateVariable('createMessagePressed');\n    this.stateService.setMenuState(\"out\");\n  }\n}\n\n    \n\n    \n        \n\n    \n    \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MenuHeaderComponent.html":{"url":"components/MenuHeaderComponent.html","title":"component - MenuHeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MenuHeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/menu/menu-header/menu-header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-menu-header\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                SearchbarComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./menu-header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./menu-header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                mobile\n                            \n                            \n                                smallWindow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createNewMessage\n                            \n                            \n                                    \n                                onResize\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(sharedService: SharedService, stateService: StateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/menu/menu-header/menu-header.component.ts:16\n                            \n                        \n\n                \n                    \n                            The constructor for the MenuHeaderComponent class.\nIt sets the currentUrl property to the current route, and calls the onResize method.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sharedService\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected SharedService service.\n\n                                                        \n                                                \n                                                \n                                                        stateService\n                                                  \n                                                        \n                                                                        StateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected StateService service.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/menu/menu-header/menu-header.component.ts:35\n                        \n                    \n\n\n            \n                \n                        Handles window resize events.\nWhen the window width is less than 1400px, the chat and menu are stacked vertically.\nWhen the window width is less than 900px, the menu is closed and the chat is full width.\nThe boolean properties smallWindow and mobile are updated accordingly.\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createNewMessage\n                        \n                    \n                \n            \n            \n                \ncreateNewMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/menu/menu-header/menu-header.component.ts:45\n                        \n                    \n\n\n            \n                \n                        Toggles the menu state between 'in' and 'out'.\nIf the screen is narrow (mobile) and the menu is opened, the thread chat is closed.\nIf the screen is narrow (mobile) and the menu is closed, the thread chat is opened if it was open before.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/app/main/menu/menu-header/menu-header.component.ts:35\n                        \n                    \n\n\n            \n                \n                        Handles window resize events.\nWhen the window width is less than 1400px, the chat and menu are stacked vertically.\nWhen the window width is less than 900px, the menu is closed and the chat is full width.\nThe boolean properties smallWindow and mobile are updated accordingly.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-header/menu-header.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        smallWindow\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/main/menu/menu-header/menu-header.component.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, HostListener } from '@angular/core';\nimport { SharedService } from '../../../shared/services/newmessage.service';\nimport { SearchbarComponent } from '../../../shared/header/searchbar/searchbar.component';\nimport { StateService } from '../../../shared/services/state.service';\n\n\n@Component({\n  selector: 'app-menu-header',\n  imports: [SearchbarComponent],\n  standalone: true, \n  templateUrl: './menu-header.component.html',\n  styleUrl: './menu-header.component.scss'\n})\nexport class MenuHeaderComponent {\n  smallWindow = false;\n  mobile = false;\n\n  /**\n   * The constructor for the MenuHeaderComponent class.\n   * It sets the currentUrl property to the current route, and calls the onResize method.\n   * @param sharedService The injected SharedService service.\n   * @param stateService The injected StateService service.\n   */\n  constructor(private sharedService: SharedService, private stateService: StateService) {\n    this.onResize();\n  }\n\n  /**\n   * Handles window resize events.\n   * When the window width is less than 1400px, the chat and menu are stacked vertically.\n   * When the window width is less than 900px, the menu is closed and the chat is full width.\n   * The boolean properties `smallWindow` and `mobile` are updated accordingly.\n  */\n  @HostListener('window:resize', [])\n  onResize(): void {\n    this.smallWindow = window.innerWidth \n    \n\n    \n        @if (mobile) {\n    \n}  \n@else {    \n\n    \n    \n        DevSpace\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (mobile) {    }  @else {                    DevSpace                                                                                                                                                    }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MenuHeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MenutogglerComponent.html":{"url":"components/MenutogglerComponent.html","title":"component - MenutogglerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MenutogglerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/shared/menutoggler/menutoggler.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-menutoggler\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgClass\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./menutoggler.component.html\n            \n\n\n\n            \n                styleUrl\n                ./menutoggler.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                menuOpen\n                            \n                            \n                                mobile\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onResize\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                menuState\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:resize\n                            \n                        \n                    \n                \n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/main/shared/menutoggler/menutoggler.component.ts:14\n                            \n                        \n\n                \n                    \n                            Initializes the MenutogglerComponent and calls the onResize method\nto set the initial state for the mobile view based on the window size.\n\n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        menuState\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/main/shared/menutoggler/menutoggler.component.ts:12\n                            \n                        \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:resize\n                        \n                    \n                \n            \n            \n                \nwindow:resize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/shared/menutoggler/menutoggler.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Checks if the window width is below 900px and sets the mobile variable accordingly.\nThis is used to determine whether the menu should be displayed as a slide-in menu\nor as a dropdown menu.\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onResize\n                        \n                    \n                \n            \n            \n                \n                        \n                    onResize()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:resize', undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/app/main/shared/menutoggler/menutoggler.component.ts:31\n                        \n                    \n\n\n            \n                \n                        Checks if the window width is below 900px and sets the mobile variable accordingly.\nThis is used to determine whether the menu should be displayed as a slide-in menu\nor as a dropdown menu.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        menuOpen\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/menutoggler/menutoggler.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/main/shared/menutoggler/menutoggler.component.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { NgClass } from '@angular/common';\nimport { Component, HostListener, Input  } from '@angular/core';\n\n@Component({\n  selector: 'app-menutoggler',\n  standalone: true,\n  imports: [NgClass],\n  templateUrl: './menutoggler.component.html',\n  styleUrl: './menutoggler.component.scss'\n})\nexport class MenutogglerComponent {\n  @Input() menuState!: string;\n  mobile = false;\n  menuOpen = false\n\n  /**\n   * Initializes the MenutogglerComponent and calls the onResize method\n   * to set the initial state for the mobile view based on the window size.\n   */\n  constructor (){\n    this.onResize();\n  }\n\n\n  /**\n   * Checks if the window width is below 900px and sets the mobile variable accordingly.\n   * This is used to determine whether the menu should be displayed as a slide-in menu\n   * or as a dropdown menu.\n  */\n  @HostListener('window:resize', [])\n  onResize(): void {\n    this.mobile = window.innerWidth \n    \n\n    \n        @if (!mobile){\n\n    \n        \n            \n            \n            \n        \n        \n            Workspace-Menü {{this.menuState }}\n        \n    \n\n} @else {\n\n    \n        \n    \n    \n        \n    \n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if (!mobile){                                                                            Workspace-Menü {{this.menuState }}            } @else {                                }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MenutogglerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Message.html":{"url":"interfaces/Message.html","title":"interface - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/message.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            channelId\n                                        \n                                \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            creatorName\n                                        \n                                \n                                \n                                        \n                                            creatorPhotoURL\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            docId\n                                        \n                                \n                                \n                                        \n                                            members\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            reactions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            recipientId\n                                        \n                                \n                                \n                                        \n                                            sameDay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            threadMessages$\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channelId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creatorName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creatorName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creatorPhotoURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creatorPhotoURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        docId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        members\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        members:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reactions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reactions:         Reaction[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Reaction[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recipientId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recipientId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sameDay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sameDay:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threadMessages$\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threadMessages$:     BehaviorSubject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BehaviorSubject\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:     string | Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject } from \"rxjs\";\n\nexport interface Message {\n  docId?: string;\n  channelId?: string;\n  createdBy: string;\n  creatorName: string;\n  creatorPhotoURL: string;\n  recipientId?: string;\n  description?: string;\n  members: string[];\n  timestamp: string | Date;\n  reactions: Reaction[];\n  message: string;\n  sameDay: boolean;\n  threadMessages$?: BehaviorSubject;\n}\n\n\nexport interface ThreadMessage {\n  channelId?: string;\n  messageId?: string;\n  docId?: string;\n  createdBy: string;\n  creatorName: string; \n  creatorPhotoURL: string;\n  timestamp: string | Date;\n  reactions: Reaction[];\n  message: string;\n  isThreadMessage: boolean;\n  sameDay: boolean;\n}\n\n\nexport interface Reaction {\n  emoji: string;\n  userIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ProfileviewComponent.html":{"url":"components/ProfileviewComponent.html","title":"component - ProfileviewComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ProfileviewComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/profileview/profileview.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-profileview\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./profileview.component.html\n            \n\n\n\n            \n                styleUrl\n                ./profileview.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authService\n                            \n                            \n                                    Public\n                                channelService\n                            \n                            \n                                    \n                                    Public\n                                data\n                            \n                            \n                                    Public\n                                dialogRef\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeProfile\n                            \n                            \n                                    Async\n                                createPrivateChannel\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                            \n                                    Async\n                                switchToExistingChannel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ID\n                            \n                            \n                                member\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(data: any, dialogRef: MatDialogRef, authService: AuthService, channelService: ChannelsService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/profileview/profileview.component.ts:31\n                            \n                        \n\n                \n                    \n                            The constructor for the ProfileViewComponent.\nExample :        to the component. This object should contain either the\n        member to be displayed or a list of IDs.\n                  a channel.\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An object from the MatDialog with the data to be passed\nto the component. This object should contain either the\nmember to be displayed or a list of IDs.\n\n                                                        \n                                                \n                                                \n                                                        dialogRef\n                                                  \n                                                        \n                                                                        MatDialogRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The MatDialogRef object of the component.\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The AuthService used to get the active user.\n\n                                                        \n                                                \n                                                \n                                                        channelService\n                                                  \n                                                        \n                                                                        ChannelsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The ChannelsService used to get the members of\na channel.\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The UserService used to get user data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        ID\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/profileview/profileview.component.ts:18\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        member\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/profileview/profileview.component.ts:17\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeProfile\n                        \n                    \n                \n            \n            \n                \ncloseProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/profileview/profileview.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Closes the profile dialog.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPrivateChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPrivateChannel(currentUserId: string, otherUserId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/profileview/profileview.component.ts:134\n                        \n                    \n\n\n            \n                \n                        Creates a private channel with the given other user ID and sends a message\nto switch to this channel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                currentUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the currently logged-in user.\n\n                                            \n                                        \n                                        \n                                                otherUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/profileview/profileview.component.ts:66\n                        \n                    \n\n\n            \n                \n                        Holt den Benutzer, der in this.ID gespeichert ist.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/profileview/profileview.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Sends a message to the user in the profile and switches to the private channel.\nIf the channel doesn't exist, it will be created.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        switchToExistingChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    switchToExistingChannel(existingChannels: Channel[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/profileview/profileview.component.ts:118\n                        \n                    \n\n\n            \n                \n                        Switches to an existing private channel with the given members.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                existingChannels\n                                            \n                                                            Channel[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    An array of existing channels. The first element is used.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the channel is selected.\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/profileview/profileview.component.ts:49\n                        \n                    \n\n            \n                \n                    The AuthService used to get the active user.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChannelsService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/profileview/profileview.component.ts:50\n                        \n                    \n\n            \n                \n                    The ChannelsService used to get the members of\na channel.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MAT_DIALOG_DATA)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/profileview/profileview.component.ts:47\n                        \n                    \n\n            \n                \n                    An object from the MatDialog with the data to be passed\nto the component. This object should contain either the\nmember to be displayed or a list of IDs.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dialogRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MatDialogRef\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/profileview/profileview.component.ts:48\n                        \n                    \n\n            \n                \n                    The MatDialogRef object of the component.\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: '',\n    userId: '',\n    photoURL: '',\n    email: '',\n    status: false,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/profileview/profileview.component.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, Inject, Input } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { AuthService } from '../services/auth.service';\nimport { ChannelsService } from '../services/channels.service';\nimport { Channel } from '../../models/channel';\nimport { UserService } from '../services/user.service';\n\n@Component({\n  selector: 'app-profileview',\n  standalone: true,\n  imports: [ CommonModule ],\n  templateUrl: './profileview.component.html',\n  styleUrl: './profileview.component.scss'\n})\nexport class ProfileviewComponent {\n  @Input() member?:any;\n  @Input() ID?:any = [];\n  users: {\n    name: string;\n    userId: string;\n    photoURL: string;\n    email: string;\n    status: boolean;\n  } = {\n    name: '',\n    userId: '',\n    photoURL: '',\n    email: '',\n    status: false,\n  };\n\n\n  /**\n   * The constructor for the ProfileViewComponent.\n   *\n   * @param data An object from the MatDialog with the data to be passed\n   *             to the component. This object should contain either the\n   *             member to be displayed or a list of IDs.\n   * @param dialogRef The MatDialogRef object of the component.\n   * @param authService The AuthService used to get the active user.\n   * @param channelService The ChannelsService used to get the members of\n   *                       a channel.\n   * @param userService The UserService used to get user data.\n   */\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    public dialogRef: MatDialogRef,\n    public authService: AuthService,\n    public channelService: ChannelsService,\n    private userService: UserService\n  ) {\n    if (data.member == null || '') {\n      this.ID.push(data.ID)\n      this.getUser();\n    } else {\n      this.member = data.member\n    }\n  }\n\n\n  /**\n   * Holt den Benutzer, der in `this.ID` gespeichert ist.\n   * @returns {Promise}\n   */\n  async getUser() {\n    const user = await this.userService.getUsernamesByIds(this.ID);\n    this.users = {\n      name: user[0].name ? user[0].name : \"\",\n      userId: user[0].userId,\n      photoURL: user[0].photoURL ? user[0].photoURL : \"\",\n      email: user[0].email ? user[0].email : \"\",\n      status: user[0].status ? user[0].status : false,\n    }\n    this.member = this.users;\n  }\n\n\n  /**\n   * Closes the profile dialog.\n   */\n  closeProfile() {\n    this.dialogRef.close(); \n  }\n\n\n  /**\n   * Sends a message to the user in the profile and switches to the private channel.\n   * If the channel doesn't exist, it will be created.\n   * @returns {Promise}\n   */\n  async sendMessage() {\n    const currentUserId = this.authService.userId();\n    const otherUserId = this.member?.userId;\n    if (!currentUserId || !otherUserId) {\n      console.error('Benutzer-IDs fehlen. Kanal kann nicht erstellt werden.');\n      return;\n    }\n    try {\n      const existingChannels = await this.channelService.getPrivateChannelByMembers([currentUserId, otherUserId]);\n      if (existingChannels.length > 0)\n        this.switchToExistingChannel(existingChannels);\n      else {\n        await this.createPrivateChannel(currentUserId, otherUserId);\n      }\n    } catch (error) {\n      console.error('Fehler beim Überprüfen oder Erstellen des Channels:', error);\n    }\n  }\n\n\n  /**\n   * Switches to an existing private channel with the given members.\n   *\n   * @param existingChannels An array of existing channels. The first element is used.\n   * @returns A promise that resolves when the channel is selected.\n   */\n  async switchToExistingChannel(existingChannels: Channel[]) {\n    const existingChannel = existingChannels[0];\n    if (existingChannel.id) {\n      await this.channelService.selectChannel(existingChannel.id);\n      this.closeProfile();\n    }\n    return;\n  }\n\n\n  /**\n   * Creates a private channel with the given other user ID and sends a message\n   * to switch to this channel.\n   *\n   * @param currentUserId The ID of the currently logged-in user.\n   */\n  async createPrivateChannel(currentUserId: string, otherUserId: string) {\n    const newChannel: Channel = {\n      name: 'Privater Channel',\n      description: '',\n      isPrivate: true,\n      createdBy: currentUserId,\n      members: [currentUserId, otherUserId],\n    };\n    await this.channelService.createChannel(newChannel);\n    this.sendMessage();\n    this.closeProfile();\n  }\n}\n    \n\n    \n        \n    \n        Profil\n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n    \n    \n        \n    \n    \n        {{ member?.name }}\n    \n    \n        \n        @if (member?.status) {\n        Aktiv\n        } @else {\n        Offline\n        }\n    \n    \n        \n            \n            E-Mail-Adresse\n        \n        {{ member?.email }}\n    \n    \n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n            Nachricht\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Profil                                                                                                                                                                                {{ member?.name }}                        @if (member?.status) {        Aktiv        } @else {        Offline        }                                        E-Mail-Adresse                {{ member?.email }}                                                                                                                                                            Nachricht            '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ProfileviewComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Reaction.html":{"url":"interfaces/Reaction.html","title":"interface - Reaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Reaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/message.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            emoji\n                                        \n                                \n                                \n                                        \n                                            userIds\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emoji\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emoji:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userIds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userIds:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject } from \"rxjs\";\n\nexport interface Message {\n  docId?: string;\n  channelId?: string;\n  createdBy: string;\n  creatorName: string;\n  creatorPhotoURL: string;\n  recipientId?: string;\n  description?: string;\n  members: string[];\n  timestamp: string | Date;\n  reactions: Reaction[];\n  message: string;\n  sameDay: boolean;\n  threadMessages$?: BehaviorSubject;\n}\n\n\nexport interface ThreadMessage {\n  channelId?: string;\n  messageId?: string;\n  docId?: string;\n  createdBy: string;\n  creatorName: string; \n  creatorPhotoURL: string;\n  timestamp: string | Date;\n  reactions: Reaction[];\n  message: string;\n  isThreadMessage: boolean;\n  sameDay: boolean;\n}\n\n\nexport interface Reaction {\n  emoji: string;\n  userIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ReactionsComponent.html":{"url":"components/ReactionsComponent.html","title":"component - ReactionsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ReactionsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/reactions/reactions.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-reactions\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./reactions.component.html\n            \n\n\n\n            \n                styleUrl\n                ./reactions.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addReaction\n                            \n                            \n                                getReactionUsers\n                            \n                            \n                                getUserName\n                            \n                            \n                                isReacted\n                            \n                            \n                                trackByReaction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                activeUserId\n                            \n                            \n                                isThreadMessage\n                            \n                            \n                                messageId\n                            \n                            \n                                reactions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                reactionAdded\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/reactions/reactions.component.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        activeUserId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/reactions/reactions.component.ts:15\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        isThreadMessage\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/reactions/reactions.component.ts:17\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        messageId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/reactions/reactions.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        reactions\n                    \n                \n                \n                    \n                        Type :         Reaction[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/reactions/reactions.component.ts:14\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        reactionAdded\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/reactions/reactions.component.ts:18\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addReaction\n                        \n                    \n                \n            \n            \n                \naddReaction(emoji: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/reactions/reactions.component.ts:26\n                        \n                    \n\n\n            \n                \n                        Emits a reactionAdded event with the given emoji, messageId, and isThreadMessage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                emoji\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The emoji to add as a reaction.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReactionUsers\n                        \n                    \n                \n            \n            \n                \ngetReactionUsers(reaction: Reaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/reactions/reactions.component.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves and formats the names of users who reacted with a specific emoji.\nThis method returns an observable that emits a string describing who\nreacted to a message with the provided reaction. If the active user\nis among the users who reacted, it includes a personalized message.\nExample :     of user names who reacted.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                            Reaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The reaction object containing the emoji and user IDs.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits a string with the formatted list\nof user names who reacted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserName\n                        \n                    \n                \n            \n            \n                \ngetUserName(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/reactions/reactions.component.ts:75\n                        \n                    \n\n\n            \n                \n                        Returns an observable that emits the name of the user with the given user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID to retrieve the name for.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the user name.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isReacted\n                        \n                    \n                \n            \n            \n                \nisReacted(reaction: Reaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/reactions/reactions.component.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns true if the given reaction was added by the active user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                reaction\n                                            \n                                                            Reaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The reaction to check.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackByReaction\n                        \n                    \n                \n            \n            \n                \ntrackByReaction(index: number, reaction: Reaction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/reactions/reactions.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Provides a unique identifier for a reaction based on its emoji and user IDs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The index of the reaction in the list of reactions.\n\n                                            \n                                        \n                                        \n                                                reaction\n                                            \n                                                            Reaction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The reaction object to generate a unique identifier for.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A unique string identifying the reaction.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Reaction } from '../../models/message';\nimport { UserService } from '../services/user.service';\nimport { combineLatest, map, Observable } from 'rxjs';\n@Component({\n  selector: 'app-reactions',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './reactions.component.html',\n  styleUrl: './reactions.component.scss'\n})\nexport class ReactionsComponent {\n  @Input() reactions: Reaction[] = [];\n  @Input() activeUserId: string = '';\n  @Input() messageId: string = '';\n  @Input() isThreadMessage: boolean = false;\n  @Output() reactionAdded = new EventEmitter();\n\n  constructor(private userService: UserService) {}\n\n  /**\n   * Emits a reactionAdded event with the given emoji, messageId, and isThreadMessage.\n   * @param emoji The emoji to add as a reaction.\n   */\n  addReaction(emoji: string) {\n    this.reactionAdded.emit({ messageId: this.messageId, emoji, isThreadMessage: this.isThreadMessage });\n  }\n\n\n  /**\n   * Returns true if the given reaction was added by the active user.\n   * @param reaction The reaction to check.\n   */\n  isReacted(reaction: Reaction): boolean {\n    return reaction.userIds.includes(this.activeUserId);\n  }\n\n\n/**\n * Retrieves and formats the names of users who reacted with a specific emoji.\n * \n * This method returns an observable that emits a string describing who\n * reacted to a message with the provided reaction. If the active user\n * is among the users who reacted, it includes a personalized message.\n * \n * @param reaction The reaction object containing the emoji and user IDs.\n * @returns An observable that emits a string with the formatted list\n *          of user names who reacted.\n */\n  getReactionUsers(reaction: Reaction): Observable {\n    const userObservables = reaction.userIds.map(id => this.userService.getUserById(id).pipe(map(user => user.name)));\n    return combineLatest(userObservables).pipe(\n      map(userNames => {\n        if (reaction.userIds.includes(this.activeUserId)) {\n          const otherUsers = userNames.filter((_, index) => reaction.userIds[index] !== this.activeUserId);\n          if (otherUsers.length === 0) return 'Du hast reagiert';\n          if (otherUsers.length === 1) return `Du und ${otherUsers[0]} haben reagiert`;\n          return `Du, ${otherUsers[0]} und ${otherUsers.length - 1} weitere Person(en) haben reagiert`;\n        } else {\n          if (userNames.length === 1) return `${userNames[0]} hat reagiert`;\n          if (userNames.length === 2) return `${userNames[0]} und ${userNames[1]} haben reagiert`;\n          return `${userNames[0]}, ${userNames[1]} und ${userNames.length - 2} weitere haben reagiert`;\n        }\n      })\n    );\n  }\n\n\n  /**\n   * Returns an observable that emits the name of the user with the given user ID.\n   * @param userId The user ID to retrieve the name for.\n   * @returns An observable that emits the user name.\n   */\n  getUserName(userId: string): Observable {\n    return this.userService.getuserName(userId);\n  }\n\n\n  /**\n   * Provides a unique identifier for a reaction based on its emoji and user IDs.\n   * @param index The index of the reaction in the list of reactions.\n   * @param reaction The reaction object to generate a unique identifier for.\n   * @returns A unique string identifying the reaction.\n   */\n  trackByReaction(index: number, reaction: Reaction): string {\n    return reaction.emoji + reaction.userIds.join('-');\n  }\n}\n\n    \n\n    \n        \n    \n        {{ reaction.emoji }}\n            \n                {{ reaction.emoji }}\n                \n                    {{ getReactionUsers(reaction) | async }}\n                \n            \n        \n        {{ reaction.userIds.length }}\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ reaction.emoji }}                            {{ reaction.emoji }}                                    {{ getReactionUsers(reaction) | async }}                                            {{ reaction.userIds.length }}    '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ReactionsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/RelativeDatePipe.html":{"url":"pipes/RelativeDatePipe.html","title":"pipe - RelativeDatePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  RelativeDatePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pipes/timestamp-to-date.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        relativeDate\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pipes/timestamp-to-date.pipe.ts:46\n                        \n                    \n\n\n            \n                \n                        Converts a Timestamp, Date, number or string to a relative date string in german language.\n             If it is a number, it is interpreted as a Unix timestamp in seconds.\n             If it is a string, it is interpreted as a date string.\n         If the date is today, 'Heute' is returned.\n         Otherwise, the weekday, day, month and year of the date are returned in german language.\n         If the input is invalid, 'Ungültiges Datum' is returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The value to be converted. If it is a Timestamp, it is converted to a Date.\nIf it is a number, it is interpreted as a Unix timestamp in seconds.\nIf it is a string, it is interpreted as a date string.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string describing the date relative to the current date.\nIf the date is today, 'Heute' is returned.\nOtherwise, the weekday, day, month and year of the date are returned in german language.\nIf the input is invalid, 'Ungültiges Datum' is returned.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { Timestamp } from '@angular/fire/firestore'\n\n@Pipe({\n  name: 'timestampToDate',\n  standalone: true,\n})\nexport class TimestampToDatePipe implements PipeTransform {\n  /**\n   * Converts a Timestamp, Date, number or string to a date string in german language.\n   * @param value The value to be converted. If it is a Timestamp, it is converted to a Date.\n   *              If it is a number, it is interpreted as a Unix timestamp in milliseconds.\n   *              If it is a string, it is interpreted as a date string.\n   * @returns A string describing the date in the format 'DD. MMMM YYYY'.\n   *          If the input is invalid, 'Ungültiges Datum' is returned.\n   */\n  transform(value: number | Date | Timestamp | undefined): string {\n    if (!value) return 'Ungültiges Datum';\n    let date: Date;\n    if (value instanceof Timestamp) \n      date = value.toDate();\n    else if (typeof value === 'number') \n      date = new Date(value * 1000);\n    else \n      date = new Date(value);\n    return date.toLocaleDateString('de-DE', {day: '2-digit',month: 'long',year: 'numeric',});\n  }\n}\n\n\n@Pipe({\n  name: 'relativeDate',\n  standalone: true,\n})\nexport class RelativeDatePipe implements PipeTransform {\n  /**\n   * Converts a Timestamp, Date, number or string to a relative date string in german language.\n   * @param value The value to be converted. If it is a Timestamp, it is converted to a Date.\n   *              If it is a number, it is interpreted as a Unix timestamp in seconds.\n   *              If it is a string, it is interpreted as a date string.\n   * @returns A string describing the date relative to the current date.\n   *          If the date is today, 'Heute' is returned.\n   *          Otherwise, the weekday, day, month and year of the date are returned in german language.\n   *          If the input is invalid, 'Ungültiges Datum' is returned.\n   */\n  transform(value: any): string {\n    if (!value) return 'Ungültiges Datum';\n    let date: Date;\n    if (value instanceof Timestamp)\n      date = value.toDate();\n    else if (value.seconds)\n      date = new Date(value.seconds * 1000);\n    else if (value instanceof Date)\n      date = value;\n    else if (typeof value === 'string' || typeof value === 'number') \n      date = new Date(value);\n    else\n      return 'Ungültiges Datum';\n    const today = new Date();\n    if (date.getDate() === today.getDate() &&date.getMonth() === today.getMonth() &&date.getFullYear() === today.getFullYear()) \n      return `Heute`;\n    return date.toLocaleDateString('de-DE', {weekday: 'long',day: 'numeric',month: 'long',});\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResetPasswordComponent.html":{"url":"components/ResetPasswordComponent.html","title":"component - ResetPasswordComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ResetPasswordComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/reset-password/reset-password.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-reset-password\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./reset-password.component.html\n            \n\n\n\n            \n                styleUrl\n                ./reset-password.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                            \n                                oobCode\n                            \n                            \n                                passwordmatch\n                            \n                            \n                                passwords\n                            \n                            \n                                successMessage\n                            \n                            \n                                warnText\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                back\n                            \n                            \n                                changePassword\n                            \n                            \n                                checkPasswordsMatch\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, auth: AuthService, route: ActivatedRoute, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/reset-password/reset-password.component.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor for ResetPasswordComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular Router service.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authentication service.\n\n\n                                                        \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe activated route to extract query parameters.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        back\n                        \n                    \n                \n            \n            \n                \nback()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/reset-password/reset-password.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Navigates back to the home page.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changePassword\n                        \n                    \n                \n            \n            \n                \nchangePassword(ngform: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/reset-password/reset-password.component.ts:54\n                        \n                    \n\n\n            \n                \n                        Changes the user's password.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ngform\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form containing the new passwords.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkPasswordsMatch\n                        \n                    \n                \n            \n            \n                \ncheckPasswordsMatch()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/reset-password/reset-password.component.ts:68\n                        \n                    \n\n\n            \n                \n                        Checks if the passwords match.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \nTrue if the passwords match, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/reset-password/reset-password.component.ts:34\n                        \n                    \n\n\n            \n                \n                        ngOnInit - Lifecycle hook that is called after data-bound properties are initialized.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login/reset-password/reset-password.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oobCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login/reset-password/reset-password.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordmatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/reset-password/reset-password.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwords\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {password: \"\", password2: \"\",}\n                    \n                \n                    \n                        \n                                Defined in src/app/login/reset-password/reset-password.component.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        successMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login/reset-password/reset-password.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warnText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Ihre Kennwörter stimmen nicht überein\"\n                    \n                \n                    \n                        \n                                Defined in src/app/login/reset-password/reset-password.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../shared/services/auth.service';\nimport { UserService } from '../../shared/services/user.service';\n\n@Component({\n  selector: 'app-reset-password',\n  imports: [CommonModule, FormsModule],\n  standalone: true,\n  templateUrl: './reset-password.component.html',\n  styleUrl: './reset-password.component.scss'\n})\nexport class ResetPasswordComponent implements OnInit {\n  warnText: string = \"Ihre Kennwörter stimmen nicht überein\";\n  passwordmatch: boolean = false;\n  passwords = {password: \"\", password2: \"\",};\n  successMessage: string = '';\n  errorMessage: string = '';\n  oobCode: string = '';\n\n  /**\n   * Constructor for ResetPasswordComponent.\n   * @param {Router} router - The Angular Router service.\n   * @param {AuthService} auth - The authentication service.\n   * @param {ActivatedRoute} route - The activated route to extract query parameters.\n   */\n  constructor(private router: Router, private auth: AuthService, private route: ActivatedRoute, private userService: UserService) { }\n\n  /**\n   * ngOnInit - Lifecycle hook that is called after data-bound properties are initialized.\n   */\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((params) => {\n      this.oobCode = params['oobCode'] || '';\n      if (!this.oobCode) {\n        this.errorMessage = 'Ungültiger oder fehlender Link.';\n      }\n    });\n  }\n\n  /**\n   * Navigates back to the home page.\n   */\n  back() {\n    this.router.navigateByUrl('');\n  }\n\n  /**\n   * Changes the user's password.\n   * @param {NgForm} ngform - The form containing the new passwords.\n   */\n  changePassword(ngform: NgForm) {\n    if (ngform.valid && ngform.submitted && this.checkPasswordsMatch()) {\n      this.userService.confirmPasswordReset(this.oobCode, this.passwords.password)\n        .then(() => {\n          this.successMessage = 'Das Passwort wurde erfolgreich zurückgesetzt.';\n          this.errorMessage = '';\n        })\n    }\n  }\n\n  /**\n   * Checks if the passwords match.\n   * @returns {boolean} - True if the passwords match, false otherwise.\n   */\n  checkPasswordsMatch() {\n    let a = this.passwords;\n    if (a.password === a.password2) {\n      this.passwordmatch = true;\n      return true;\n    } else {\n      this.passwordmatch = false;\n      return false;\n    }\n  }\n}\n\n    \n\n    \n        \n    \n        \n            \n                \n                    \n                \n                \n                    \n                \n            \n        \n        Passwort zurücksetzen\n    \n    \n        \n            \n        \n        \n            \n                \n            \n            {{ warnText }}\n        \n        \n            Passwort ändern\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                            Passwort zurücksetzen                                                                                                {{ warnText }}                            Passwort ändern            '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ResetPasswordComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SaveEditMessageService.html":{"url":"injectables/SaveEditMessageService.html","title":"injectable - SaveEditMessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SaveEditMessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/save-edit-message.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                messageForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkCreatorWithActiveUser\n                            \n                            \n                                checkUpdateData\n                            \n                            \n                                save\n                            \n                            \n                                showToastMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fb: FormBuilder, messagesService: MessagesService, auth: AuthService, toastMessageService: ToastMessageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/save-edit-message.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor for the SaveEditMessageService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A FormBuilder instance, used to create the messageForm.\n\n                                                        \n                                                \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A MessagesService instance, used to save the message.\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                An AuthService instance, used to get the current user.\n\n                                                        \n                                                \n                                                \n                                                        toastMessageService\n                                                  \n                                                        \n                                                                        ToastMessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                A ToastMessageService instance, used to show toast messages.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkCreatorWithActiveUser\n                        \n                    \n                \n            \n            \n                \ncheckCreatorWithActiveUser(creater: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/save-edit-message.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Checks if the user stored in the message data equals the active user ID.\nThis is used to check if the user is allowed to edit or delete the message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                creater\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID from the message data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \ntrue if the user equals the active user, false otherwise.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkUpdateData\n                        \n                    \n                \n            \n            \n                \ncheckUpdateData(message: any, thread: boolean, parentMessageId?: string, docId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/save-edit-message.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Updates the message data in Firestore based on the provided parameters.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The original message data to be updated.\n\n                                            \n                                        \n                                        \n                                                thread\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A boolean indicating if the message is a thread.\n\n                                            \n                                        \n                                        \n                                                parentMessageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The ID of the parent message if the message is a thread.\n\n                                            \n                                        \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The document ID of the message in Firestore.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        save\n                        \n                    \n                \n            \n            \n                \nsave(message: any, thread: boolean, parentMessageId?: string, docId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/save-edit-message.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Checks if the current user is the creator of the given message and then calls checkUpdateData to update the message.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The message to be updated.\n\n                                            \n                                        \n                                        \n                                                thread\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    If true, the message is a thread.\n\n                                            \n                                        \n                                        \n                                                parentMessageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The ID of the parent message if the message is a thread.\n\n                                            \n                                        \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The ID of the message document.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showToastMessage\n                        \n                    \n                \n            \n            \n                \nshowToastMessage(text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/save-edit-message.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Shows a toast message with the given text after a short delay.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe text to be displayed in the toast message.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        messageForm\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/save-edit-message.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { MessagesService } from './messages.service';\nimport { AuthService } from './auth.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToastMessageService } from './toastmessage.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SaveEditMessageService {\n  messageForm: FormGroup;\n\n  /**\n   * Constructor for the SaveEditMessageService.\n   * @param fb A FormBuilder instance, used to create the messageForm.\n   * @param messagesService A MessagesService instance, used to save the message.\n   * @param auth An AuthService instance, used to get the current user.\n   * @param toastMessageService A ToastMessageService instance, used to show toast messages.\n   */\n  constructor(\n    private fb: FormBuilder,\n    private messagesService: MessagesService,\n    private auth: AuthService,\n    private toastMessageService: ToastMessageService,\n  ) {\n    this.messageForm = this.fb.group({\n      message: ['', Validators.required],\n      reactions: [''],\n    });\n  }\n\n  /**\n   * Checks if the current user is the creator of the given message and then calls `checkUpdateData` to update the message.\n   * @param message The message to be updated.\n   * @param thread If true, the message is a thread.\n   * @param parentMessageId The ID of the parent message if the message is a thread.\n   * @param docId The ID of the message document.\n   */\n  save(message: any, thread: boolean, parentMessageId?: string, docId?: string) {\n    this.messageForm.setValue({\n      message: message.message || '',\n      reactions: message.reactions || [],\n    });\n    if (this.checkCreatorWithActiveUser(message.createdBy)) {\n      this.checkUpdateData(message, thread, parentMessageId, docId);\n    } else if (!this.checkCreatorWithActiveUser(message.createdBy)) {\n      console.error('Nur der Ersteller kann die Nachricht bearbeiten.');\n    }\n  }\n\n\n  /**\n   * Updates the message data in Firestore based on the provided parameters.\n   * @param message The original message data to be updated.\n   * @param thread A boolean indicating if the message is a thread.\n   * @param parentMessageId The ID of the parent message if the message is a thread.\n   * @param docId The document ID of the message in Firestore.\n   */\n  checkUpdateData(message: any, thread: boolean, parentMessageId?: string, docId?: string) {\n    const updatedData = {...message,...this.messageForm.value,};\n    if (thread) {\n      if (!parentMessageId) \n        return console.error('Fehlende parentMessageId für Thread-Nachricht');\n      this.messagesService.updateThreadMessage(\n        parentMessageId,docId!,this.auth.userId()!,updatedData)\n        .then(() => {this.showToastMessage('Nachricht aktualisiert');})\n        .catch((error) => {console.error('Fehler beim Aktualisieren der Thread-Nachricht:', error);});\n    } else {\n      this.messagesService.updateMessage(updatedData.docId, updatedData.createdBy, updatedData)\n        .then(() => {this.showToastMessage('Nachricht aktualisiert');})\n        .catch((error) => {console.error('Fehler beim Aktualisieren der Nachricht:', error);});\n    }\n  }\n\n  /**\n   * Checks if the user stored in the message data equals the active user ID.\n   * This is used to check if the user is allowed to edit or delete the message.\n   * @param creater The user ID from the message data.\n   * @returns {boolean} - `true` if the user equals the active user, `false` otherwise.\n   */\n  checkCreatorWithActiveUser(creater: string): boolean {\n    const dataUser = creater;\n    const activeUser = this.auth.userId();\n    console.log('data user', dataUser);\n    console.log('active user', activeUser);\n  return dataUser === activeUser;\n  }\n\n  /**\n   * Shows a toast message with the given text after a short delay.\n   * @param {string} text - The text to be displayed in the toast message.\n   * @returns {void}\n   */\n  showToastMessage(text:string) {\n    setTimeout(() => {\n      this.toastMessageService.showToastSignal(text);\n    }, 500);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SearchService.html":{"url":"injectables/SearchService.html","title":"injectable - SearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                allChannels\n                            \n                            \n                                    Private\n                                allMessages\n                            \n                            \n                                    Private\n                                allThreadMessages\n                            \n                            \n                                    Private\n                                allUsers\n                            \n                            \n                                authService\n                            \n                            \n                                channelResults$\n                            \n                            \n                                    Private\n                                channelResultsSubject\n                            \n                            \n                                channelService\n                            \n                            \n                                    Private\n                                messageResults\n                            \n                            \n                                messageResults$\n                            \n                            \n                                    Private\n                                messageResultsSubject\n                            \n                            \n                                messageService\n                            \n                            \n                                privateChannelResults$\n                            \n                            \n                                    Private\n                                privateChannelResultsSubject\n                            \n                            \n                                    Public\n                                searchChannelsMessages\n                            \n                            \n                                threadMessageResults$\n                            \n                            \n                                    Private\n                                threadMessageResultsSubject\n                            \n                            \n                                userResults$\n                            \n                            \n                                    Private\n                                userResultsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getChannelName\n                            \n                            \n                                    Public\n                                loadChannels\n                            \n                            \n                                    Public\n                                loadMessages\n                            \n                            \n                                    Public\n                                loadThreadMessages\n                            \n                            \n                                    Public\n                                loadUsers\n                            \n                            \n                                searchChannels\n                            \n                            \n                                searchMessages\n                            \n                            \n                                searchSpecificChannels\n                            \n                            \n                                searchThreadMessages\n                            \n                            \n                                searchUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getChannelName\n                        \n                    \n                \n            \n            \n                \ngetChannelName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Retrieves and updates the channel names for the current message results.\nThis method subscribes to the messageResults$ observable and processes the results\nto fetch channel names based on the channelId of each message. It uses the ChannelsService\nto retrieve the channel details and maps the channel names. The channel names are then\nstored in the searchChannelsMessages array. If no messages are found, it clears the\nsearchChannelsMessages array.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadChannels\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadChannels()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Loads all channels from the Firestore database.\nWhen the channels are loaded, it stores them in the allChannels array.\nIf the channels are loaded successfully, it logs a success message to the console.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadMessages(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Loads all messages from the Firestore database for a given user.\nWhen the messages are loaded, it stores them in the allMessages array.\nIt then calls the getChannelName() method to retrieve the channel names for the current message results.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to load messages for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadThreadMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadThreadMessages(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:81\n                        \n                    \n\n\n            \n                \n                        Loads all thread messages for a given user from the Firestore database.\nWhen the thread messages are loaded, it stores them in the allThreadMessages array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to load thread messages for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadUsers(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Loads all users from the Firestore database, excluding anonymous users and the current user.\nWhen the users are loaded, it stores them in the allUsers array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the current user to exclude from the results.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchChannels\n                        \n                    \n                \n            \n            \n                \nsearchChannels(searchText: string, userId: string, type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Filters and updates the channel or private channel results based on the search text and user membership.\nIf the search text is empty, it will return all channels the user is a member of.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe text to search for within channel names.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user, used to filter channels the user is a member of.\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of channels to search for; either 'channel' for public channels or 'private' for private channels.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchMessages\n                        \n                    \n                \n            \n            \n                \nsearchMessages(searchText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:119\n                        \n                    \n\n\n            \n                \n                        Searches for messages based on the search text.\nIf the search text is empty, it will return an empty array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe text to search for within messages.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchSpecificChannels\n                        \n                    \n                \n            \n            \n                \nsearchSpecificChannels(searchText: string, userId: string, type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Filters and updates the channel or private channel results based on the search text and user membership.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe text to search for within channel names.\n\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user, used to filter channels the user is a member of.\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of channels to search for; either 'channel' for public channels or 'private' for private channels.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchThreadMessages\n                        \n                    \n                \n            \n            \n                \nsearchThreadMessages(searchText: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Searches for thread messages based on the search text.\nIf the search text is empty, it will return an empty array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe text to search for within thread messages.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchUsers\n                        \n                    \n                \n            \n            \n                \nsearchUsers(searchText: string, type: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/search.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Searches for users based on the search text and type of search.\nIf the search text is empty, it will return all users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                searchText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe text to search for within user names or emails.\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of search to perform; either 'name' to search user names or 'email' to search user emails.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allChannels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Channel[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allThreadMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ThreadMessage[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        allUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserModel[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelResults$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.channelResultsSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channelResultsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        channelService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChannelsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        messageResults\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageResults$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.messageResultsSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        messageResultsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        messageService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(MessagesService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        privateChannelResults$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.privateChannelResultsSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        privateChannelResultsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        searchChannelsMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadMessageResults$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.threadMessageResultsSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        threadMessageResultsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userResults$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.userResultsSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userResultsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/search.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { MessagesService } from './messages.service';\nimport { BehaviorSubject, forkJoin, from, map } from 'rxjs';\nimport { Message, ThreadMessage } from '../../models/message';\nimport { AuthService } from './auth.service';\nimport { UserModel } from '../../models/user';\nimport { ChannelsService } from './channels.service';\nimport { Channel } from '../../models/channel';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SearchService {\n  messageService = inject(MessagesService);\n  authService = inject(AuthService);\n  channelService = inject(ChannelsService);\n\n  private messageResultsSubject = new BehaviorSubject([]);\n  private threadMessageResultsSubject = new BehaviorSubject([]);\n  private userResultsSubject = new BehaviorSubject([]);\n  private channelResultsSubject = new BehaviorSubject([]);\n  private privateChannelResultsSubject = new BehaviorSubject([]);\n  messageResults$ = this.messageResultsSubject.asObservable();\n  threadMessageResults$ = this.threadMessageResultsSubject.asObservable();\n  userResults$ = this.userResultsSubject.asObservable();\n  channelResults$ = this.channelResultsSubject.asObservable();\n  privateChannelResults$ = this.privateChannelResultsSubject.asObservable();\n  private allMessages: Message[] = [];\n  private allThreadMessages: ThreadMessage[] = [];\n  private allUsers: UserModel[] = [];\n  private allChannels: Channel[] = [];\n  public searchChannelsMessages: any = [];\n  private messageResults: any[] = [];\n\n  /**\n   * Loads all messages from the Firestore database for a given user.\n   * When the messages are loaded, it stores them in the `allMessages` array.\n   * It then calls the `getChannelName()` method to retrieve the channel names for the current message results.\n   * @param userId - The ID of the user to load messages for.\n   */\n  public loadMessages(userId: string) {\n    from(this.messageService.getAllMessages(userId)).subscribe((messages) => {\n      this.allMessages = Array.isArray(messages) ? messages : [];\n      this.getChannelName();\n    });\n  }\n\n\n  /**\n   * Retrieves and updates the channel names for the current message results.\n   * \n   * This method subscribes to the `messageResults$` observable and processes the results \n   * to fetch channel names based on the `channelId` of each message. It uses the `ChannelsService`\n   * to retrieve the channel details and maps the channel names. The channel names are then \n   * stored in the `searchChannelsMessages` array. If no messages are found, it clears the \n   * `searchChannelsMessages` array.\n   */\n  getChannelName() {\n    this.searchChannelsMessages = [];\n    this.messageResults$.subscribe((results) => {\n      this.messageResults = results;\n      if (this.messageResults.length > 0) {\n        const channelNames$ = this.messageResults\n          .filter((element) => element.channelId).map((element) =>\n            from(this.channelService.getChannelById(element.channelId)).pipe(map((channel) => channel?.name || 'Unknown Channel')));\n        forkJoin(channelNames$).subscribe(\n          (channelNames) => {this.searchChannelsMessages = channelNames.filter((name) => !!name);},\n          (error) => {console.error('Error fetching channel names:', error);}\n        );\n      } else \n        this.searchChannelsMessages = [];\n    });\n  }\n\n\n  /**\n   * Loads all thread messages for a given user from the Firestore database.\n   * When the thread messages are loaded, it stores them in the `allThreadMessages` array.\n   * @param {string} userId - The ID of the user to load thread messages for.\n   */\n  public loadThreadMessages(userId: string): void {\n    from(this.messageService.getAllThreadMessages(userId)).subscribe((messages) => {\n      this.allThreadMessages = Array.isArray(messages) ? messages : [];\n    });\n  }\n\n\n  /**\n   * Loads all users from the Firestore database, excluding anonymous users and the current user.\n   * When the users are loaded, it stores them in the `allUsers` array.\n   * @param {string} userId - The ID of the current user to exclude from the results.\n   */\n  public loadUsers(userId: string): void {\n    this.authService.getUserList().subscribe((users) => {\n      this.allUsers = Array.isArray(users)? users.filter(\n        (user) => user.provider !== 'anonymous' && user.userId !== userId): [];\n    });\n  }\n\n\n  /**\n   * Loads all channels from the Firestore database.\n   * When the channels are loaded, it stores them in the `allChannels` array.\n   * If the channels are loaded successfully, it logs a success message to the console.\n   */\n  public loadChannels(): void {\n    from(this.channelService.getAllChannels()).subscribe((channels) => {\n      this.allChannels = Array.isArray(channels) ? channels : [];\n      console.log('Channels loaded:', this.allChannels);\n    });\n  }\n\n\n  /**\n   * Searches for messages based on the search text.\n   * If the search text is empty, it will return an empty array.\n   * @param {string} searchText - The text to search for within messages.\n   */\n  searchMessages(searchText: string): void {\n    if (!searchText) \n      this.messageResultsSubject.next([]);\n    const filteredMessages = this.allMessages.filter(\n      (message) =>message.message.toLowerCase().includes(searchText.toLowerCase())\n    );\n    this.messageResultsSubject.next(filteredMessages);\n  }\n\n\n  /**\n   * Searches for thread messages based on the search text.\n   * If the search text is empty, it will return an empty array.\n   * @param {string} searchText - The text to search for within thread messages.\n   */\n  searchThreadMessages(searchText: string): void {\n    if (!searchText) \n      this.threadMessageResultsSubject.next([]);\n    const filteredMessages = this.allThreadMessages.filter((message) =>\n      message.message.toLowerCase().includes(searchText.toLowerCase())\n    );\n    this.threadMessageResultsSubject.next(filteredMessages);\n  }\n\n\n  /**\n   * Searches for users based on the search text and type of search.\n   * If the search text is empty, it will return all users.\n   * @param {string} searchText - The text to search for within user names or emails.\n   * @param {string} type - The type of search to perform; either 'name' to search user names or 'email' to search user emails.\n   */\n  searchUsers(searchText: string, type: string): void {\n    if (!searchText.trim()) \n      this.userResultsSubject.next(this.allUsers);\n    const filteredUsers = this.allUsers.filter((user) => {\n      if (type === 'name') \n        return user.name.toLowerCase().includes(searchText.toLowerCase());\n      else if (type === 'email') \n        return user.email.toLowerCase().includes(searchText.toLowerCase());\n      return false;\n    });\n    this.userResultsSubject.next(filteredUsers);\n  }\n\n\n  /**\n   * Filters and updates the channel or private channel results based on the search text and user membership.\n   * If the search text is empty, it will return all channels the user is a member of.\n   * @param {string} searchText - The text to search for within channel names.\n   * @param {string} userId - The ID of the user, used to filter channels the user is a member of.\n   * @param {string} type - The type of channels to search for; either 'channel' for public channels or 'private' for private channels.\n   */\n  searchChannels(searchText: string, userId: string, type: string): void {\n    if (!searchText.trim()) {\n      const filteredChannels = this.allChannels.filter(\n        (channel) =>!channel.isPrivate &&channel.members.includes(userId));\n      this.channelResultsSubject.next(filteredChannels);\n      return;\n    }\n    this.searchSpecificChannels(searchText, userId, type);\n  }\n\n\n  /**\n   * Filters and updates the channel or private channel results based on the search text and user membership.\n   * @param {string} searchText - The text to search for within channel names.\n   * @param {string} userId - The ID of the user, used to filter channels the user is a member of.\n   * @param {string} type - The type of channels to search for; either 'channel' for public channels or 'private' for private channels.\n   */\n  searchSpecificChannels(searchText: string, userId: string, type: string): void {\n    if (type === 'channel') {\n      const filteredChannels = this.allChannels.filter(\n        (channel) =>!channel.isPrivate && channel.name.toLowerCase().includes(searchText.toLowerCase()) &&\n        channel.members.includes(userId));\n      this.channelResultsSubject.next(filteredChannels);\n    } else if (type === 'private') {\n      const filteredChannels = this.allChannels.filter(\n        (channel) =>channel.isPrivate &&channel.name.toLowerCase().includes(searchText.toLowerCase()) &&\n        channel.members.includes(userId));\n      this.privateChannelResultsSubject.next(filteredChannels);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SharedService.html":{"url":"injectables/SharedService.html","title":"injectable - SharedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SharedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/newmessage.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelId$\n                            \n                            \n                                    Private\n                                channelIdSubject\n                            \n                            \n                                searchString$\n                            \n                            \n                                    Private\n                                searchStringSubject\n                            \n                            \n                                    Private\n                                sharedVariable\n                            \n                            \n                                sharedVariable$\n                            \n                            \n                                targetString$\n                            \n                            \n                                    Private\n                                targetStringSubject\n                            \n                            \n                                userId$\n                            \n                            \n                                    Private\n                                userIdSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addThreadMessage\n                            \n                            \n                                convertTimestamp\n                            \n                            \n                                    Async\n                                deleteMessage\n                            \n                            \n                                    Async\n                                deleteThreadMessage\n                            \n                            \n                                getChannelIdString\n                            \n                            \n                                getSearchString\n                            \n                            \n                                getTargetString\n                            \n                            \n                                getUserIdString\n                            \n                            \n                                jumpToAtAbove\n                            \n                            \n                                setChannelIdString\n                            \n                            \n                                setSearchString\n                            \n                            \n                                setTargetString\n                            \n                            \n                                setUserIdString\n                            \n                            \n                                updateVariable\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firestore: Firestore)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/newmessage.service.ts:20\n                            \n                        \n\n                \n                    \n                            Initializes the SharedService with the Firestore service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        firestore\n                                                  \n                                                        \n                                                                    Firestore\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Firestore service for interacting with the Firestore database.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addThreadMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    addThreadMessage(messageId: string, threadMessage: ThreadMessage)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Adds a new thread message to the Firestore database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                messageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the parent message to add the thread message to.\n\n                                            \n                                        \n                                        \n                                                threadMessage\n                                            \n                                                            ThreadMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The thread message to add to the database.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the thread message has been successfully added to the database.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        convertTimestamp\n                        \n                    \n                \n            \n            \n                \nconvertTimestamp(timestamp: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Converts a given timestamp value to a Date object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                timestamp\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The value to convert to a Date object.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Date\n\n                        \n                            \n                                A Date object representing the given timestamp value.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMessage(docId: string, userId: string, isThread, parentMessageId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:164\n                        \n                    \n\n\n            \n                \n                        Deletes a message from the Firestore database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                docId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The document ID of the message to delete.\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The ID of the user performing the deletion.\n\n                                            \n                                        \n                                        \n                                                isThread\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    If true, the message is a thread message (default is false).\n\n                                            \n                                        \n                                        \n                                                parentMessageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The ID of the parent message if the message is a thread message.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the message has been successfully deleted from the database.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteThreadMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteThreadMessage(parentMessageId: string, threadDocId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Deletes a specified thread message from the Firestore database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                parentMessageId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the parent message containing the thread message.\n\n                                            \n                                        \n                                        \n                                                threadDocId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The document ID of the thread message to be deleted.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the thread message has been successfully deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getChannelIdString\n                        \n                    \n                \n            \n            \n                \ngetChannelIdString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Returns the currently set channel ID string.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The currently set channel ID string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSearchString\n                        \n                    \n                \n            \n            \n                \ngetSearchString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Returns the currently set search string.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The currently set search string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTargetString\n                        \n                    \n                \n            \n            \n                \ngetTargetString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Returns the currently set target string.\nThe target string is a string that indicates whether the user is targeting a user or a channel.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The currently set target string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserIdString\n                        \n                    \n                \n            \n            \n                \ngetUserIdString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Returns the currently set user ID string.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                The currently set user ID string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jumpToAtAbove\n                        \n                    \n                \n            \n            \n                \njumpToAtAbove()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Jumps to the '@' character in the message content.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setChannelIdString\n                        \n                    \n                \n            \n            \n                \nsetChannelIdString(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Updates the channel ID string with the provided value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new channel ID string to be set.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSearchString\n                        \n                    \n                \n            \n            \n                \nsetSearchString(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Updates the search string with the provided value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new search string to be set.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTargetString\n                        \n                    \n                \n            \n            \n                \nsetTargetString(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Updates the target string with the provided value.\nThe target string is a string that indicates whether the user is targeting a user or a channel.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new target string to be set.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUserIdString\n                        \n                    \n                \n            \n            \n                \nsetUserIdString(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Updates the user ID string with the provided value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new user ID string to be set.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateVariable\n                        \n                    \n                \n            \n            \n                \nupdateVariable(newValue: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/newmessage.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Updates the shared variable with the given new value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newValue\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new value to assign to the shared variable.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelId$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.channelIdSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channelIdSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchString$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.searchStringSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        searchStringSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sharedVariable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('Initial Value')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sharedVariable$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.sharedVariable.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        targetString$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.targetStringSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        targetStringSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.userIdSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userIdSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/newmessage.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { addDoc, collection, deleteDoc, doc } from 'firebase/firestore';\nimport { BehaviorSubject } from 'rxjs';\nimport { ThreadMessage } from '../../models/message';\nimport { Firestore } from '@angular/fire/firestore';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SharedService {\n  private sharedVariable = new BehaviorSubject('Initial Value');\n  private searchStringSubject = new BehaviorSubject('');\n  private targetStringSubject = new BehaviorSubject('');\n  private userIdSubject = new BehaviorSubject('');\n  private channelIdSubject = new BehaviorSubject('');\n  sharedVariable$ = this.sharedVariable.asObservable();\n  searchString$ = this.searchStringSubject.asObservable();\n  targetString$ = this.targetStringSubject.asObservable();\n  userId$ = this.userIdSubject.asObservable();\n  channelId$ = this.channelIdSubject.asObservable();\n\n  /**\n   * Initializes the SharedService with the Firestore service.\n   * @param firestore The Firestore service for interacting with the Firestore database.\n   */\n  constructor(private firestore: Firestore) {}\n\n  /**\n   * Updates the shared variable with the given new value.\n   * @param newValue The new value to assign to the shared variable.\n   */\n  updateVariable(newValue: string) {\n    this.sharedVariable.next(newValue);\n  }\n\n\n  /**\n   * Updates the search string with the provided value.\n   * \n   * @param value The new search string to be set.\n   */\n  setSearchString(value: string) {\n    this.searchStringSubject.next(value);\n  }\n\n\n  /**\n   * Updates the user ID string with the provided value.\n   * @param value The new user ID string to be set.\n   */\n  setUserIdString(value: string) {\n    this.userIdSubject.next(value);\n  }\n\n\n  /**\n   * Updates the channel ID string with the provided value.\n   * @param value The new channel ID string to be set.\n   */\n  setChannelIdString(value: string) {\n    this.channelIdSubject.next(value);\n  }\n\n\n  /**\n   * Updates the target string with the provided value.\n   * The target string is a string that indicates whether the user is targeting a user or a channel.\n   * @param value The new target string to be set.\n   */\n  setTargetString(value: string) {\n    this.targetStringSubject.next(value);\n  }\n\n\n  /**\n   * Returns the currently set user ID string.\n   * @returns The currently set user ID string.\n   */\n  getUserIdString() {\n    return this.userIdSubject.value;\n  }\n\n\n  /**\n   * Returns the currently set channel ID string.\n   * @returns The currently set channel ID string.\n   */\n  getChannelIdString() {\n    return this.channelIdSubject.value;\n  }\n\n\n  /**\n   * Returns the currently set target string.\n   * The target string is a string that indicates whether the user is targeting a user or a channel.\n   * @returns The currently set target string.\n   */\n  getTargetString() {\n    return this.targetStringSubject.value;\n  }\n\n  \n  /**\n   * Returns the currently set search string.\n   * @returns The currently set search string.\n   */\n  getSearchString() {\n    return this.searchStringSubject.value;\n  }\n\n\n  /**\n   * Jumps to the '@' character in the message content.\n   */\n    jumpToAtAbove() {\n      this.setSearchString('@');\n    }\n\n\n    /**\n   * Adds a new thread message to the Firestore database.\n   * @param messageId The ID of the parent message to add the thread message to.\n   * @param threadMessage The thread message to add to the database.\n   * @returns A promise that resolves when the thread message has been successfully added to the database.\n   */\n    async addThreadMessage(messageId: string, threadMessage: ThreadMessage): Promise {\n      const threadMessagesRef = collection(this.firestore, `messages/${messageId}/threadMessages`);\n      await addDoc(threadMessagesRef, threadMessage);\n    }\n\n\n  /**\n   * Deletes a specified thread message from the Firestore database.\n   * @param parentMessageId The ID of the parent message containing the thread message.\n   * @param threadDocId The document ID of the thread message to be deleted.\n   * @param userId The ID of the user requesting the deletion.\n   * @returns A promise that resolves when the thread message has been successfully deleted.\n   */\n  async deleteThreadMessage(parentMessageId: string, threadDocId: string): Promise {\n    const threadMessageRef = doc(this.firestore, `messages/${parentMessageId}/threadMessages`, threadDocId);\n    await deleteDoc(threadMessageRef);\n  }\n\n      /**\n   * Converts a given timestamp value to a Date object.\n   * @param timestamp The value to convert to a Date object.\n   * @returns A Date object representing the given timestamp value.\n   */\n  convertTimestamp(timestamp: any): Date {\n    if (!timestamp) return new Date();\n    if (timestamp instanceof Date) return timestamp;\n    if (timestamp.seconds) return new Date(timestamp.seconds * 1000);\n    return new Date(timestamp);\n  }\n\n  /**\n   * Deletes a message from the Firestore database.\n   * @param docId The document ID of the message to delete.\n   * @param userId The ID of the user performing the deletion.\n   * @param isThread If true, the message is a thread message (default is `false`).\n   * @param parentMessageId The ID of the parent message if the message is a thread message.\n   * @returns A promise that resolves when the message has been successfully deleted from the database.\n   */\n  async deleteMessage(docId: string, userId: string, isThread = false, parentMessageId?: string): Promise {\n    let messageRef;\n    if (isThread) {\n      if (!parentMessageId) throw new Error('ParentMessageId erforderlich für Thread-Nachrichtenlöschung.');\n      messageRef = doc(this.firestore, `messages/${parentMessageId}/threadMessages`, docId);\n    } else \n      messageRef = doc(this.firestore, 'messages', docId);\n    await deleteDoc(messageRef);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignInComponent.html":{"url":"components/SignInComponent.html","title":"component - SignInComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignInComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/sign-in/sign-in.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sign-in\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sign-in.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sign-in.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                loginData\n                            \n                            \n                                loginError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                loginAsGuest\n                            \n                            \n                                    Async\n                                loginWithGoogle\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Private\n                                redirectToBoard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, router: Router, userService: UserService, route: ActivatedRoute)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/sign-in/sign-in.component.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for SignInComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authentication service.\n\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular Router service.\n\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe activated route to extract query parameters.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(ngForm: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-in/sign-in.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Logs in the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ngForm\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form containing the user's login credentials.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loginAsGuest\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginAsGuest()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-in/sign-in.component.ts:60\n                        \n                    \n\n\n            \n                \n                        Logs in as a guest user.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        loginWithGoogle\n                        \n                    \n                \n            \n            \n                \n                        \n                    loginWithGoogle()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-in/sign-in.component.ts:73\n                        \n                    \n\n\n            \n                \n                        Logs in using Google authentication.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-in/sign-in.component.ts:35\n                        \n                    \n\n\n            \n                \n                        ngOnInit - Lifecycle hook that is called after data-bound properties are initialized.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        redirectToBoard\n                        \n                    \n                \n            \n            \n                \n                        \n                    redirectToBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-in/sign-in.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Redirects the user to the board page.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        loginData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {email: '', password: ''}\n                    \n                \n                    \n                        \n                                Defined in src/app/login/sign-in/sign-in.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loginError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/login/sign-in/sign-in.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../shared/services/auth.service';\nimport { UserService } from '../../shared/services/user.service';\n\n@Component({\n  selector: 'app-sign-in',\n  imports: [CommonModule, FormsModule, RouterModule],\n  standalone: true,\n  templateUrl: './sign-in.component.html',\n  styleUrl: './sign-in.component.scss'\n})\nexport class SignInComponent implements OnInit {\n  loginData = {email: '', password: ''};\n  loginError = '';\n\n  /**\n   * Constructor for SignInComponent.\n   * @param {AuthService} authService - The authentication service.\n   * @param {Router} router - The Angular Router service.\n   * @param {ActivatedRoute} route - The activated route to extract query parameters.\n   */\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private userService: UserService,\n    private route: ActivatedRoute\n  ) { }\n\n  /**\n   * ngOnInit - Lifecycle hook that is called after data-bound properties are initialized.\n   */\n  ngOnInit(): void {\n    if (this.authService.isAuthenticated()) {\n      this.router.navigateByUrl('/board');\n    }\n    this.loginError = this.userService.loginError();\n  }\n\n  /**\n   * Logs in the user.\n   * @param {NgForm} ngForm - The form containing the user's login credentials.\n   */\n  async login(ngForm: NgForm): Promise {\n    if (ngForm.valid && ngForm.submitted) {\n      try {\n        await this.authService.login(this.loginData.email, this.loginData.password);\n        this.redirectToBoard();\n      } catch (error) {\n        this.loginError = 'Falsches Passwort oder E-Mail.. Bitte noch einmal versuchen.';\n      }\n    }\n  }\n\n  /**\n   * Logs in as a guest user.\n   */\n  async loginAsGuest(): Promise {\n    try {\n      await this.authService.guestLogin();\n      this.redirectToBoard();\n    } catch (error) {\n      this.loginError = 'Guest login failed.';\n      console.error('Guest login error:', error);\n    }\n  }\n\n  /**\n   * Logs in using Google authentication.\n   */\n  async loginWithGoogle(): Promise {\n    try {\n      await this.authService.googleLogin();\n      this.redirectToBoard();\n    } catch (error) {\n      this.loginError = 'Google login failed.';\n      console.error('Google login error:', error);\n    }\n  }\n\n  /**\n   * Redirects the user to the board page.\n   */\n  private redirectToBoard(): void {\n    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/board';\n    this.router.navigateByUrl(returnUrl, { replaceUrl: true });\n  }\n}\n\n    \n\n    \n        \n    Anmeldung\n    Wir empfehlen dir, die E-Mail-Adresse zu nutzen, die du bei der Arbeit verwendest.\n    \n        \n            \n                \n                    \n                        \n                    \n                    \n                        \n                    \n                \n                \n            \n            *Diese\n                E-Mail-Adresse\n                ist leider ungültig.\n            \n                \n                    \n                        \n                    \n                    \n                        \n                    \n                \n                \n            \n            {{ loginError }}\n            \n                Passwort vergessen?\n            \n        \n        \n            \n            ODER\n            \n        \n        \n            \n                \n                    \n                    \n                    \n                    \n                \n                Anmelden mit Google\n            \n        \n        \n            Anmelden\n            Gäste-Login\n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    Anmeldung    Wir empfehlen dir, die E-Mail-Adresse zu nutzen, die du bei der Arbeit verwendest.                                                                                                                                                                                                                                *Diese                E-Mail-Adresse                ist leider ungültig.                                                                                                                                                                                                                    {{ loginError }}                            Passwort vergessen?                                                    ODER                                                                                                                                                                        Anmelden mit Google                                        Anmelden            Gäste-Login            '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignInComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SignUpComponent.html":{"url":"components/SignUpComponent.html","title":"component - SignUpComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SignUpComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/login/sign-up/sign-up.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-sign-up\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                                ChooseAvatarComponent\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./sign-up.component.html\n            \n\n\n\n            \n                styleUrl\n                ./sign-up.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                userData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                back\n                            \n                            \n                                close\n                            \n                            \n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, auth: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/app/login/sign-up/sign-up.component.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for SignUpComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe Angular Router service.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe authentication service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        back\n                        \n                    \n                \n            \n            \n                \nback()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-up/sign-up.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Navigates back to the home page.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        close\n                        \n                    \n                \n            \n            \n                \nclose()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-up/sign-up.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Closes the avatar selection.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signUp\n                        \n                    \n                \n            \n            \n                \nsignUp(form: NgForm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/login/sign-up/sign-up.component.ts:37\n                        \n                    \n\n\n            \n                \n                        Handles the sign-up process.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        NgForm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe form containing the user sign-up data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/login/sign-up/sign-up.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {name: \"\", email: \"\", password: \"\", privacy: false, photoURL: \"\"}\n                    \n                \n                    \n                        \n                                Defined in src/app/login/sign-up/sign-up.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { FormsModule, NgForm } from '@angular/forms';\nimport { Router, RouterModule } from '@angular/router';\nimport { ChooseAvatarComponent } from './choose-avatar/choose-avatar.component';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../shared/services/auth.service';\n\n@Component({\n  selector: 'app-sign-up',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ChooseAvatarComponent, RouterModule],\n  templateUrl: './sign-up.component.html',\n  styleUrl: './sign-up.component.scss'\n})\nexport class SignUpComponent {\n  avatar: boolean = false;\n  userData = {name: \"\", email: \"\", password: \"\", privacy: false, photoURL: \"\"}\n\n  /**\n   * Constructor for SignUpComponent.\n   * @param {Router} router - The Angular Router service.\n   * @param {AuthService} auth - The authentication service.\n   */\n  constructor(private router: Router, private auth: AuthService) { }\n\n  /**\n   * Navigates back to the home page.\n   */\n  back() {\n    this.router.navigateByUrl('');\n  }\n\n  /**\n   * Handles the sign-up process.\n   * @param {NgForm} form - The form containing the user sign-up data.\n   */\n  signUp(form: NgForm) {\n    if (form.valid && form.submitted) {\n      this.avatar = true;\n    }\n  }\n\n  /**\n   * Closes the avatar selection.\n   */\n  close() {\n    this.avatar = false;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      \n        \n          \n        \n        \n          \n        \n      \n    \n    Konto erstellen\n  \n  Mit deinem Namen und deiner E-Mail-Adresse hast du dein neues DABubble-Konto.\n  \n    \n      \n        \n          \n            \n          \n          \n            \n          \n        \n        \n      \n      Bitte geben Sie Vorname und\n        Name an (Doppelnamen erlaubt).\n      \n        \n          \n            \n          \n          \n            \n          \n        \n        \n      \n      *Diese E-Mail-Adresse ist\n        leider ungültig.\n      \n        \n          \n            \n          \n          \n            \n          \n        \n        \n      \n      Bitte geben Sie ein Passwort mit mindestens 6 Zeichen ein.\n    \n    \n      \n        \n        Ich stimme derDatenschutzerklärungzu.\n      \n      Datenschutzerklärung\n        akzeptieren\n    \n    \n      \n        Weiter\n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                              Konto erstellen    Mit deinem Namen und deiner E-Mail-Adresse hast du dein neues DABubble-Konto.                                                                                                                Bitte geben Sie Vorname und        Name an (Doppelnamen erlaubt).                                                                                                          *Diese E-Mail-Adresse ist        leider ungültig.                                                                                                          Bitte geben Sie ein Passwort mit mindestens 6 Zeichen ein.                              Ich stimme derDatenschutzerklärungzu.            Datenschutzerklärung        akzeptieren                      Weiter            '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SignUpComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateService.html":{"url":"injectables/StateService.html","title":"injectable - StateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/state.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                menuState$\n                            \n                            \n                                    Private\n                                menuStateSubject\n                            \n                            \n                                threadchatState$\n                            \n                            \n                                    Private\n                                threadchatStateSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeMenuAndThread\n                            \n                            \n                                setMenuState\n                            \n                            \n                                setThreadchatState\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeMenuAndThread\n                        \n                    \n                \n            \n            \n                \ncloseMenuAndThread()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Sets both the menu and thread chat state to 'out' and emits it to all subscribers of the menuState$ and threadchatState$ observables.\nThis is a convenience method to close both the menu and the thread chat in one method call.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMenuState\n                        \n                    \n                \n            \n            \n                \nsetMenuState(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state.service.ts:18\n                        \n                    \n\n\n            \n                \n                        Sets the menu state to the given value and emits it to all subscribers of the menuState$ observable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new menu state, either 'in' or 'out'.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setThreadchatState\n                        \n                    \n                \n            \n            \n                \nsetThreadchatState(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/state.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Sets the thread chat state to the given value and emits it to all subscribers of the threadchatState$ observable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new thread chat state, either 'in' or 'out'.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        menuState$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.menuStateSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        menuStateSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('in')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        threadchatState$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.threadchatStateSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        threadchatStateSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('out')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/state.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateService {\n  private menuStateSubject = new BehaviorSubject('in');\n  private threadchatStateSubject = new BehaviorSubject('out');\n  menuState$ = this.menuStateSubject.asObservable();\n  threadchatState$ = this.threadchatStateSubject.asObservable();\n\n\n  /**\n   * Sets the menu state to the given value and emits it to all subscribers of the menuState$ observable.\n   * @param state - The new menu state, either 'in' or 'out'.\n   */\n  setMenuState(state: string): void {\n    this.menuStateSubject.next(state);\n  }\n\n\n  /**\n   * Sets the thread chat state to the given value and emits it to all subscribers of the threadchatState$ observable.\n   * @param state - The new thread chat state, either 'in' or 'out'.\n   */\n  setThreadchatState(state: string): void {\n    this.threadchatStateSubject.next(state);\n  }\n\n\n  /**\n   * Sets both the menu and thread chat state to 'out' and emits it to all subscribers of the menuState$ and threadchatState$ observables.\n   * This is a convenience method to close both the menu and the thread chat in one method call.\n   */\n  closeMenuAndThread(): void {\n    this.menuStateSubject.next('out');\n    this.threadchatStateSubject.next('out');\n    console.log(\"ausgeführt\");\n    \n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ThreadMessage.html":{"url":"interfaces/ThreadMessage.html","title":"interface - ThreadMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ThreadMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/message.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            channelId\n                                        \n                                \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            creatorName\n                                        \n                                \n                                \n                                        \n                                            creatorPhotoURL\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            docId\n                                        \n                                \n                                \n                                        \n                                            isThreadMessage\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            messageId\n                                        \n                                \n                                \n                                        \n                                            reactions\n                                        \n                                \n                                \n                                        \n                                            sameDay\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channelId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channelId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creatorName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creatorName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creatorPhotoURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creatorPhotoURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        docId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isThreadMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isThreadMessage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        messageId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        messageId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reactions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reactions:         Reaction[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Reaction[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sameDay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sameDay:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:     string | Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject } from \"rxjs\";\n\nexport interface Message {\n  docId?: string;\n  channelId?: string;\n  createdBy: string;\n  creatorName: string;\n  creatorPhotoURL: string;\n  recipientId?: string;\n  description?: string;\n  members: string[];\n  timestamp: string | Date;\n  reactions: Reaction[];\n  message: string;\n  sameDay: boolean;\n  threadMessages$?: BehaviorSubject;\n}\n\n\nexport interface ThreadMessage {\n  channelId?: string;\n  messageId?: string;\n  docId?: string;\n  createdBy: string;\n  creatorName: string; \n  creatorPhotoURL: string;\n  timestamp: string | Date;\n  reactions: Reaction[];\n  message: string;\n  isThreadMessage: boolean;\n  sameDay: boolean;\n}\n\n\nexport interface Reaction {\n  emoji: string;\n  userIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ThreadchatHeaderComponent.html":{"url":"components/ThreadchatHeaderComponent.html","title":"component - ThreadchatHeaderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ThreadchatHeaderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/main/chat/threadchat-header/threadchat-header.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-threadchat-header\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./threadchat-header.component.html\n            \n\n\n\n            \n                styleUrl\n                ./threadchat-header.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channelName\n                            \n                            \n                                currentChannel$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeThreadChat\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(stateService: StateService, channelsService: ChannelsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/main/chat/threadchat-header/threadchat-header.component.ts:16\n                            \n                        \n\n                \n                    \n                            Constructs a new instance of the ThreadchatHeaderComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        stateService\n                                                  \n                                                        \n                                                                        StateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The service used to manage the state of the thread chat.\n\n                                                        \n                                                \n                                                \n                                                        channelsService\n                                                  \n                                                        \n                                                                        ChannelsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The service providing the current channel data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeThreadChat\n                        \n                    \n                \n            \n            \n                \ncloseThreadChat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/chat/threadchat-header/threadchat-header.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Closes the thread chat by setting the thread chat state to 'out'.\nThis causes the thread chat to be hidden and the main chat to be shown.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/main/chat/threadchat-header/threadchat-header.component.ts:33\n                        \n                    \n\n\n            \n                \n                        OnInit lifecycle hook. Subscribes to the current channel observable\nand updates the channel name on each emission.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channelName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/main/chat/threadchat-header/threadchat-header.component.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currentChannel$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/main/chat/threadchat-header/threadchat-header.component.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ChannelsService } from '../../../shared/services/channels.service';\nimport { Channel } from '../../../models/channel';\nimport { Observable } from 'rxjs';\nimport { StateService } from '../../../shared/services/state.service';\n\n@Component({\n  selector: 'app-threadchat-header',\n  standalone: true,\n  imports: [],\n  templateUrl: './threadchat-header.component.html',\n  styleUrl: './threadchat-header.component.scss'\n})\nexport class ThreadchatHeaderComponent {\n  currentChannel$: Observable;\n  channelName: string = '';\n\n/**\n * Constructs a new instance of the ThreadchatHeaderComponent.\n *\n * @param stateService The service used to manage the state of the thread chat.\n * @param channelsService The service providing the current channel data.\n */\n  constructor(private stateService: StateService, private channelsService: ChannelsService) {\n    this.currentChannel$ = this.channelsService.currentChannel$;\n  }\n\n\n/**\n * OnInit lifecycle hook. Subscribes to the current channel observable\n * and updates the channel name on each emission.\n */\n  ngOnInit(): void {\n    this.currentChannel$.subscribe((channel) => {\n      if (channel) {\n        this.channelName = channel.name;\n      }\n    });\n  }\n\n\n  /**\n   * Closes the thread chat by setting the thread chat state to 'out'.\n   * This causes the thread chat to be hidden and the main chat to be shown.\n   */\n  closeThreadChat(): void {\n    this.stateService.setThreadchatState('out');\n  }\n}\n\n    \n\n    \n        \n  \n    Thread\n    #\n    {{this.channelName}}\n  \n  \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Thread    #    {{this.channelName}}          '\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ThreadchatHeaderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/TimestampToDatePipe.html":{"url":"pipes/TimestampToDatePipe.html","title":"pipe - TimestampToDatePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  TimestampToDatePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pipes/timestamp-to-date.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        timestampToDate\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: number | Date | Timestamp | undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pipes/timestamp-to-date.pipe.ts:17\n                        \n                    \n\n\n            \n                \n                        Converts a Timestamp, Date, number or string to a date string in german language.\n             If it is a number, it is interpreted as a Unix timestamp in milliseconds.\n             If it is a string, it is interpreted as a date string.\n         If the input is invalid, 'Ungültiges Datum' is returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number | Date | Timestamp | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The value to be converted. If it is a Timestamp, it is converted to a Date.\nIf it is a number, it is interpreted as a Unix timestamp in milliseconds.\nIf it is a string, it is interpreted as a date string.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A string describing the date in the format 'DD. MMMM YYYY'.\nIf the input is invalid, 'Ungültiges Datum' is returned.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { Timestamp } from '@angular/fire/firestore'\n\n@Pipe({\n  name: 'timestampToDate',\n  standalone: true,\n})\nexport class TimestampToDatePipe implements PipeTransform {\n  /**\n   * Converts a Timestamp, Date, number or string to a date string in german language.\n   * @param value The value to be converted. If it is a Timestamp, it is converted to a Date.\n   *              If it is a number, it is interpreted as a Unix timestamp in milliseconds.\n   *              If it is a string, it is interpreted as a date string.\n   * @returns A string describing the date in the format 'DD. MMMM YYYY'.\n   *          If the input is invalid, 'Ungültiges Datum' is returned.\n   */\n  transform(value: number | Date | Timestamp | undefined): string {\n    if (!value) return 'Ungültiges Datum';\n    let date: Date;\n    if (value instanceof Timestamp) \n      date = value.toDate();\n    else if (typeof value === 'number') \n      date = new Date(value * 1000);\n    else \n      date = new Date(value);\n    return date.toLocaleDateString('de-DE', {day: '2-digit',month: 'long',year: 'numeric',});\n  }\n}\n\n\n@Pipe({\n  name: 'relativeDate',\n  standalone: true,\n})\nexport class RelativeDatePipe implements PipeTransform {\n  /**\n   * Converts a Timestamp, Date, number or string to a relative date string in german language.\n   * @param value The value to be converted. If it is a Timestamp, it is converted to a Date.\n   *              If it is a number, it is interpreted as a Unix timestamp in seconds.\n   *              If it is a string, it is interpreted as a date string.\n   * @returns A string describing the date relative to the current date.\n   *          If the date is today, 'Heute' is returned.\n   *          Otherwise, the weekday, day, month and year of the date are returned in german language.\n   *          If the input is invalid, 'Ungültiges Datum' is returned.\n   */\n  transform(value: any): string {\n    if (!value) return 'Ungültiges Datum';\n    let date: Date;\n    if (value instanceof Timestamp)\n      date = value.toDate();\n    else if (value.seconds)\n      date = new Date(value.seconds * 1000);\n    else if (value instanceof Date)\n      date = value;\n    else if (typeof value === 'string' || typeof value === 'number') \n      date = new Date(value);\n    else\n      return 'Ungültiges Datum';\n    const today = new Date();\n    if (date.getDate() === today.getDate() &&date.getMonth() === today.getMonth() &&date.getFullYear() === today.getFullYear()) \n      return `Heute`;\n    return date.toLocaleDateString('de-DE', {weekday: 'long',day: 'numeric',month: 'long',});\n  }\n} \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ToastMessage.html":{"url":"interfaces/ToastMessage.html","title":"interface - ToastMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ToastMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/toastmessage.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, signal } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport interface ToastMessage {\n  error: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastMessageService {\n  private toastSubject = new Subject();\n  toast$ = this.toastSubject.asObservable();\n  toastSignal = signal('');\n\n  /**\n   * Shows a toast message with the given text.\n   * @param error A boolean indicating if the toast message should be displayed as an error.\n   * @param message The text to be displayed in the toast message.\n   * @returns {void}\n   */\n  showToast(error: boolean, message: string) {\n    this.toastSubject.next({ error, message });\n  }\n\n  /**\n   * Shows a toast message with the given text for a short duration.\n   * @param message The text to be displayed in the toast message.\n   * @returns {void}\n   */\n  showToastSignal(message: string) {\n    this.toastSignal.set(message);\n    setTimeout(() => {\n      this.toastSignal.set('');\n    }, 2500);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ToastMessageComponent.html":{"url":"components/ToastMessageComponent.html","title":"component - ToastMessageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ToastMessageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/toastmessage/toastmessage.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-toastmessage\n            \n\n            \n                standalone\n                true\n            \n\n\n            \n                styleUrls\n                ./toastmessage.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./toastmessage.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                toastMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    toast\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(toastMessageService: ToastMessageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/toastmessage/toastmessage.component.ts:12\n                            \n                        \n\n                \n                    \n                            Creates an instance of ToastMessageComponent.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        toastMessageService\n                                                  \n                                                        \n                                                                        ToastMessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe toast message service.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        toastMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ToastMessage | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/toastmessage/toastmessage.component.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        toast\n                    \n                \n\n                \n                    \n                        gettoast()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/toastmessage/toastmessage.component.ts:25\n                                \n                            \n                    \n                        \n                                Gets the current toast message.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { ToastMessageService, ToastMessage } from '../services/toastmessage.service';\n\n@Component({\n  selector: 'app-toastmessage',\n  templateUrl: './toastmessage.component.html',\n  styleUrls: ['./toastmessage.component.scss'],\n  standalone: true,\n})\n\nexport class ToastMessageComponent {\n  toastMessage: ToastMessage | null = null;\n\n  /**\n   * Creates an instance of ToastMessageComponent.\n   * @param {ToastMessageService} toastMessageService - The toast message service.\n   */\n  constructor(private toastMessageService: ToastMessageService) {\n  }\n\n  /**\n   * Gets the current toast message.\n   * @returns {Observable} - The current toast message.\n   */\n  get toast(){\n    return this.toastMessageService.toastSignal();\n  }\n}\n\n    \n\n    \n        {{toast}}\n\n    \n\n    \n                \n                    ./toastmessage.component.scss\n                \n                @use \"../../../mixins.scss\" as mixins;\n@use \"../../../colors.scss\" as colors;\n\n.toast_msg {\n  position: fixed;\n  bottom: 24px;\n  right: 48px;\n  min-height: 80px;\n  box-shadow: 0px 0px 16px 0px #0000003d;\n  min-width: 300px;\n  border-top-left-radius: 30px;\n  border-bottom-left-radius: 30px;\n  border-top-right-radius: 30px;\n  transform: translateX(-100%);\n  animation: slideInFromRight 0.5s ease-out forwards, slideInFromRight 0.5s ease-out reverse 2s;\n  z-index: 999;\n  color: colors.$white;\n  background-color: colors.$purple;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 49.1px;\n  padding: 0 24px;\n}\n\n@keyframes slideInFromRight {\n  0% {\n    opacity: 0;\n    transform: translateX(100%);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '{{toast}}'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ToastMessageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ToastMessageService.html":{"url":"injectables/ToastMessageService.html","title":"injectable - ToastMessageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ToastMessageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/toastmessage.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                toast$\n                            \n                            \n                                toastSignal\n                            \n                            \n                                    Private\n                                toastSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                showToast\n                            \n                            \n                                showToastSignal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        showToast\n                        \n                    \n                \n            \n            \n                \nshowToast(error: boolean, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/toastmessage.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Shows a toast message with the given text.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A boolean indicating if the toast message should be displayed as an error.\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The text to be displayed in the toast message.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        showToastSignal\n                        \n                    \n                \n            \n            \n                \nshowToastSignal(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/toastmessage.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Shows a toast message with the given text for a short duration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The text to be displayed in the toast message.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        toast$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.toastSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/toastmessage.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toastSignal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/toastmessage.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toastSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/toastmessage.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, signal } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport interface ToastMessage {\n  error: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ToastMessageService {\n  private toastSubject = new Subject();\n  toast$ = this.toastSubject.asObservable();\n  toastSignal = signal('');\n\n  /**\n   * Shows a toast message with the given text.\n   * @param error A boolean indicating if the toast message should be displayed as an error.\n   * @param message The text to be displayed in the toast message.\n   * @returns {void}\n   */\n  showToast(error: boolean, message: string) {\n    this.toastSubject.next({ error, message });\n  }\n\n  /**\n   * Shows a toast message with the given text for a short duration.\n   * @param message The text to be displayed in the toast message.\n   * @returns {void}\n   */\n  showToastSignal(message: string) {\n    this.toastSignal.set(message);\n    setTimeout(() => {\n      this.toastSignal.set('');\n    }, 2500);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserDialogService.html":{"url":"injectables/UserDialogService.html","title":"injectable - UserDialogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserDialogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/services/user-dialog.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authService\n                            \n                            \n                                dialog\n                            \n                            \n                                exitActiv\n                            \n                            \n                                profileDataChanged\n                            \n                            \n                                profileDialog\n                            \n                            \n                                profileDialogEdit\n                            \n                            \n                                profileForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeDialog\n                            \n                            \n                                closeProfileDialogs\n                            \n                            \n                                closeProfileEdit\n                            \n                            \n                                dataChangeAllowedCheck\n                            \n                            \n                                dontCloseDialog\n                            \n                            \n                                logout\n                            \n                            \n                                onDialogChange\n                            \n                            \n                                openDialog\n                            \n                            \n                                openProfile\n                            \n                            \n                                openProfileEdit\n                            \n                            \n                                profileDataChange\n                            \n                            \n                                    Async\n                                saveProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    userData\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: AuthService, toastMessageService: ToastMessageService, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/services/user-dialog.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructs an instance of the UserDialogService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe AuthService for authentication operations.\n\n\n                                                        \n                                                \n                                                \n                                                        toastMessageService\n                                                  \n                                                        \n                                                                        ToastMessageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe ToastMessageService for showing toast messages.\n\n\n                                                        \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe FormBuilder for creating the profileForm.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeDialog\n                        \n                    \n                \n            \n            \n                \ncloseDialog(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Closes all dialogs by preventing the default event behavior and\nsetting their respective boolean flags to false. This includes the\ndialog, profileDialog, and profileDialogEdit.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event that triggered the dialog close action.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        closeProfileDialogs\n                        \n                    \n                \n            \n            \n                \ncloseProfileDialogs(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Closes the profile dialogs (profile and profile edit) and reopens the dialog.\nThis method sets profileDialog and profileDialogEdit to false,\neffectively closing the profile dialogs, and sets dialog to true,\nreopening the dialog.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event that triggered the dialog close action.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        closeProfileEdit\n                        \n                    \n                \n            \n            \n                \ncloseProfileEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Closes the profile dialog in edit mode and reopens the profile dialog.\nThis method sets profileDialog to true and profileDialogEdit to false,\neffectively transitioning the UI from edit mode back to the normal profile view.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataChangeAllowedCheck\n                        \n                    \n                \n            \n            \n                \ndataChangeAllowedCheck()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:231\n                        \n                    \n\n\n            \n                \n                        Checks if the user's data can be changed.\nIf the user's provider is not 'password', the profile form is disabled,\nmeaning the user cannot change their data. Otherwise, the form is enabled.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dontCloseDialog\n                        \n                    \n                \n            \n            \n                \ndontCloseDialog(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Prevents the default event behavior and stops the event propagation.\nThis method is used to prevent the dialog from closing when the user clicks\non an element that is not supposed to close the dialog, such as a button that\nopens a sub-menu.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event that triggered the action.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:217\n                        \n                    \n\n\n            \n                \n                        Logs the user out of the application, removes the token and introPlayed flag from\nsession storage, and navigates to the login page.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDialogChange\n                        \n                    \n                \n            \n            \n                \nonDialogChange(newValue: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Handles changes to the dialog open state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                newValue\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A boolean indicating whether the dialog should be open (true) or closed (false).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Opens the user dialog with the mobile layout.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event that triggered opening the dialog.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openProfile\n                        \n                    \n                \n            \n            \n                \nopenProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Opens the user profile dialog.\nSets profileDialog to true and dialog to false.\nThis method transitions the UI from a general dialog to a specific\nprofile dialog, allowing the user to view profile-related information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openProfileEdit\n                        \n                    \n                \n            \n            \n                \nopenProfileEdit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Opens the user profile dialog in edit mode.\nSets profileDialog to false and profileDialogEdit to true.\nResets the form to the current user data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileDataChange\n                        \n                    \n                \n            \n            \n                \nprofileDataChange()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Checks if the profile form data differs from the current user data.\nCompares the values in the profile form's input fields for name and email\nwith the current user data. If either value has changed, sets the\nprofileDataChanged flag to true. Otherwise, sets the flag to false.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveProfile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/services/user-dialog.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Saves the profile form data to the user's Firestore document.\nThis method checks if the profile form is valid and if the user data is available.\nIf both conditions are met, it uses the updateUserData method of the AuthService to\nupdate the user's Firestore document with the new data. If the update is successful, it\nsets the profileDialog and profileDialogEdit flags to false, emits the dialogChange\nevent, and displays a toast message indicating that the profile was successfully updated.\nIf the update fails, it logs an error message to the console.\n\n\n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves when the update operation is complete.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthService)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user-dialog.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dialog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user-dialog.service.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exitActiv\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user-dialog.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileDataChanged\n                        \n                    \n                \n            \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user-dialog.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileDialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user-dialog.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileDialogEdit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/services/user-dialog.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        profileForm\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/app/shared/services/user-dialog.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        userData\n                    \n                \n\n                \n                    \n                        getuserData()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/services/user-dialog.service.ts:176\n                                \n                            \n                    \n                        \n                                Retrieves the current user data from the AuthService.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { EventEmitter, inject, Injectable, Output, signal } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ToastMessageService } from './toastmessage.service';\nimport { UserModel } from '../../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDialogService {\n  profileDialog: boolean = false;\n  profileDialogEdit: boolean = false;\n  dialog = false;\n  authService = inject(AuthService);\n  profileDataChanged = signal(false);\n  @Output() dialogChange = new EventEmitter();\n  profileForm;\n  exitActiv = true;\n\n  /**\n   * Constructs an instance of the UserDialogService.\n   * @param auth - The AuthService for authentication operations.\n   * @param toastMessageService - The ToastMessageService for showing toast messages.\n   * @param fb - The FormBuilder for creating the profileForm.\n   */\n  constructor(private auth: AuthService, private toastMessageService: ToastMessageService, private fb: FormBuilder,) {\n    this.profileForm = this.fb.group({\n      userInputName: [\n        this.userData?.name,[\n          Validators.required,\n          Validators.pattern('^[a-zA-ZÀ-ÿ]+(?:-[a-zA-ZÀ-ÿ]+)?(?: [a-zA-ZÀ-ÿ]+(?:-[a-zA-ZÀ-ÿ]+)?)$'),\n          Validators.maxLength(25),\n        ],\n      ],\n      userInputEmail: [\n        this.userData?.email,[\n          Validators.required,\n          Validators.pattern('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$'),\n        ],\n      ],\n    });\n  }\n\n\n  /**\n   * Opens the user dialog with the mobile layout.\n   *\n   * @param event The event that triggered opening the dialog.\n   */\n  openDialog(event: Event) {\n    this.dialog = true;\n    this.exitActiv = true;\n  }\n\n\n  /**\n   * Opens the user profile dialog.\n   * Sets `profileDialog` to true and `dialog` to false. \n   * This method transitions the UI from a general dialog to a specific \n   * profile dialog, allowing the user to view profile-related information.\n   */\n  openProfile() {\n    this.profileDialog = true;\n    this.dialog = false;\n  }\n\n\n  /**\n   * Opens the user profile dialog in edit mode.\n   *\n   * @description\n   * Sets `profileDialog` to false and `profileDialogEdit` to true.\n   * Resets the form to the current user data.\n   */\n  openProfileEdit() {\n    this.profileDialog = false;\n    this.profileDialogEdit = true;\n    this.profileForm.reset({\n      userInputName: this.userData?.name,\n      userInputEmail: this.userData?.email,\n    });\n  }\n\n\n  /**\n   * Closes the profile dialog in edit mode and reopens the profile dialog.\n   *\n   * This method sets `profileDialog` to true and `profileDialogEdit` to false,\n   * effectively transitioning the UI from edit mode back to the normal profile view.\n   */\n  closeProfileEdit() {\n    this.profileDialog = true;\n    this.profileDialogEdit = false;\n  }\n\n\n  /**\n   * Closes the profile dialogs (profile and profile edit) and reopens the dialog.\n   *\n   * @description\n   * This method sets `profileDialog` and `profileDialogEdit` to false,\n   * effectively closing the profile dialogs, and sets `dialog` to true,\n   * reopening the dialog.\n   *\n   * @param event The event that triggered the dialog close action.\n   */\n  closeProfileDialogs(event: Event) {\n    event?.preventDefault();\n    this.profileDialog = false;\n    this.profileDialogEdit = false;\n    this.dialog = true;\n  }\n\n\n  /**\n   * Closes all dialogs by preventing the default event behavior and\n   * setting their respective boolean flags to false. This includes the\n   * dialog, profileDialog, and profileDialogEdit.\n   * @param event The event that triggered the dialog close action.\n   */\n  closeDialog(event: Event) {\n    event?.preventDefault();\n    event.stopPropagation();\n    this.profileDialog = false;\n    this.profileDialogEdit = false;\n    this.dialog = false;\n  }\n\n\n  /**\n   * Handles changes to the dialog open state.\n   * @param newValue A boolean indicating whether the dialog should be open (true) or closed (false).\n   */\n  onDialogChange(newValue: boolean) {\n    this.dialog = newValue;\n    console.log(newValue);\n  }\n\n\n  /**\n   * Saves the profile form data to the user's Firestore document.\n   *\n   * @description\n   * This method checks if the profile form is valid and if the user data is available.\n   * If both conditions are met, it uses the `updateUserData` method of the `AuthService` to\n   * update the user's Firestore document with the new data. If the update is successful, it\n   * sets the `profileDialog` and `profileDialogEdit` flags to false, emits the `dialogChange`\n   * event, and displays a toast message indicating that the profile was successfully updated.\n   * If the update fails, it logs an error message to the console.\n   * @returns A promise that resolves when the update operation is complete.\n   */\n  async saveProfile(): Promise {\n    if (this.profileForm.valid && this.userData) {\n      const updatedData: Partial = {\n        name: this.profileForm.value.userInputName ?? '',\n        email: this.profileForm.value.userInputEmail ?? undefined,\n      };\n      try {\n        await this.authService.updateUserData(this.userData.userId, updatedData);\n        this.profileDialog = false;\n        this.profileDialogEdit = false;\n        this.dialogChange.emit();\n        this.toastMessageService.showToastSignal('Profil erfolgreich aktualisiert');\n      } catch (error) {\n        console.error('Fehler beim Speichern der Profiländerungen:', error);\n      }\n    }\n  }\n\n\n  /**\n   * Retrieves the current user data from the AuthService.\n   * \n   * @returns The user data as a UserModel object.\n   */\n  get userData() {\n    return this.authService.userData();\n  }\n\n\n  /**\n   * Checks if the profile form data differs from the current user data.\n   *\n   * @description\n   * Compares the values in the profile form's input fields for name and email\n   * with the current user data. If either value has changed, sets the \n   * `profileDataChanged` flag to true. Otherwise, sets the flag to false.\n   */\n  profileDataChange() {\n    if (\n      (this.userData?.name ?? '') !=(this.profileForm.get('userInputName')?.value ?? '') || \n      (this.userData?.email ?? '') !=(this.profileForm.get('userInputEmail')?.value ?? '')\n    ) \n      this.profileDataChanged.set(true);\n    else \n      this.profileDataChanged.set(false);\n  }\n\n\n  /**\n   * Prevents the default event behavior and stops the event propagation.\n   * This method is used to prevent the dialog from closing when the user clicks\n   * on an element that is not supposed to close the dialog, such as a button that\n   * opens a sub-menu.\n   * @param event The event that triggered the action.\n   */\n  dontCloseDialog(event: Event) {\n    event?.preventDefault();\n    event.stopPropagation();\n  }\n\n\n  /**\n   * Logs the user out of the application, removes the token and introPlayed flag from\n   * session storage, and navigates to the login page.\n   */\n  logout() {\n    this.dialog = false;\n    sessionStorage.removeItem('token');\n    sessionStorage.removeItem('introPlayed');\n    this.auth.logout();\n  }\n\n\n  /**\n   * Checks if the user's data can be changed.\n   * \n   * If the user's provider is not 'password', the profile form is disabled,\n   * meaning the user cannot change their data. Otherwise, the form is enabled.\n   */\n  dataChangeAllowedCheck() {\n    if (this.userData?.provider != 'password') \n      this.profileForm.disable();\n    else\n      this.profileForm.enable();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserModel.html":{"url":"classes/UserModel.html","title":"class - UserModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/models/user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                channels\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                photoURL\n                            \n                            \n                                privateNoteRef\n                            \n                            \n                                provider\n                            \n                            \n                                status\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseUser: FirebaseUser | null, additionalData?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/app/models/user.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseUser\n                                                  \n                                                        \n                                                                    FirebaseUser | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        additionalData\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        channels\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        photoURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        privateNoteRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/app/models/user.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User as FirebaseUser } from '@angular/fire/auth';\n\nexport class UserModel {\n  userId: string;\n  name: string;\n  status: boolean = false;\n  photoURL: string;\n  channels: string[] = [];\n  email: string;\n  privateNoteRef: string;\n  provider: string;\n\n  constructor(firebaseUser: FirebaseUser | null, additionalData?: Partial)  {\n    this.userId = firebaseUser?.uid || '';\n    this.name = firebaseUser?.displayName || '';\n    this.photoURL = firebaseUser?.photoURL || '';\n    this.email = firebaseUser?.email || '';\n    this.status = additionalData?.status ?? false;\n    this.channels = additionalData?.channels ?? [];\n    this.privateNoteRef = additionalData?.privateNoteRef || '';\n    this.provider = additionalData?.provider || '';\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UsermenuComponent.html":{"url":"components/UsermenuComponent.html","title":"component - UsermenuComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UsermenuComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/header/usermenu/usermenu.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-usermenu\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                DialogComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./usermenu.component.html\n            \n\n\n\n            \n                styleUrl\n                ./usermenu.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                mobileDialog\n                            \n                            \n                                    Public\n                                userDialog\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                openDesktopUserMenu\n                            \n                            \n                                openMobileUserMenu\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(userDialog: UserDialogService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/header/usermenu/usermenu.component.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userDialog\n                                                  \n                                                        \n                                                                        UserDialogService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        openDesktopUserMenu\n                        \n                    \n                \n            \n            \n                \nopenDesktopUserMenu(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/header/usermenu/usermenu.component.ts:32\n                        \n                    \n\n\n            \n                \n                        Opens the user menu dialog, with the desktop dialog layout.\nThis sets mobileDialog to false, and calls openDialog on the UserDialogService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event that triggered opening the dialog, passed to openDialog.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openMobileUserMenu\n                        \n                    \n                \n            \n            \n                \nopenMobileUserMenu(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/header/usermenu/usermenu.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Opens the user menu dialog, with the mobile dialog layout.\nThis sets mobileDialog to true, and calls openDialog on the UserDialogService.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The event that triggered opening the dialog, passed to openDialog.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        mobileDialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/usermenu/usermenu.component.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        userDialog\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserDialogService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/header/usermenu/usermenu.component.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { DialogComponent } from './dialog/dialog.component';\nimport { CommonModule } from '@angular/common';\nimport { UserDialogService } from '../../services/user-dialog.service';\n\n@Component({\n  selector: 'app-usermenu',\n  standalone: true,\n  imports: [DialogComponent, CommonModule],\n  templateUrl: './usermenu.component.html',\n  styleUrl: './usermenu.component.scss',\n})\nexport class UsermenuComponent {\n  mobileDialog: boolean = false;\n  constructor(public userDialog: UserDialogService) {}\n\n  /**\n   * Opens the user menu dialog, with the mobile dialog layout.\n   * This sets `mobileDialog` to true, and calls `openDialog` on the `UserDialogService`.\n   * @param event The event that triggered opening the dialog, passed to `openDialog`.\n   */\n  openMobileUserMenu(event: Event){\n    this.mobileDialog = true;\n    this.userDialog.openDialog(event);\n  }\n\n  /**\n   * Opens the user menu dialog, with the desktop dialog layout.\n   * This sets `mobileDialog` to false, and calls `openDialog` on the `UserDialogService`.\n   * @param event The event that triggered opening the dialog, passed to `openDialog`.\n   */\n  openDesktopUserMenu(event: Event){\n    this.mobileDialog = false;\n    this.userDialog.openDialog(event);\n  }\n}\n\n\n    \n\n    \n        \n  \n    \n    \n  \n  \n    {{ userDialog.userData?.name }}\n    \n      \n      \n    \n    \n      \n    \n  \n\n\n@if (userDialog.dialog == true || userDialog.profileDialog ||\nuserDialog.profileDialogEdit){\n\n  \n\n}\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                  {{ userDialog.userData?.name }}                                    @if (userDialog.dialog == true || userDialog.profileDialog ||userDialog.profileDialogEdit){  }'\n    var COMPONENTS = [{'name': 'AddchatComponent', 'selector': 'app-addchat'},{'name': 'AddUserToChannelComponent', 'selector': 'app-add-user-to-channel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BuilderComponent', 'selector': 'app-builder'},{'name': 'ChatboxComponent', 'selector': 'app-chatbox'},{'name': 'ChatComponent', 'selector': 'app-chat'},{'name': 'ChooseAvatarComponent', 'selector': 'app-choose-avatar'},{'name': 'CreatemessageComponent', 'selector': 'app-createmessage'},{'name': 'DialogComponent', 'selector': 'app-dialog'},{'name': 'EditmessageComponent', 'selector': 'app-editmessage'},{'name': 'EmojiPickerComponent', 'selector': 'app-emoji-picker'},{'name': 'ForgetPasswordComponent', 'selector': 'app-forget-password'},{'name': 'HeaderComponent', 'selector': 'app-header'},{'name': 'ImprintComponent', 'selector': 'app-imprint'},{'name': 'LegalnoticeComponent', 'selector': 'app-legalnotice'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LogoComponent', 'selector': 'app-logo'},{'name': 'MainchatHeaderComponent', 'selector': 'app-mainchat-header'},{'name': 'MainComponent', 'selector': 'app-main'},{'name': 'MentionComponent', 'selector': 'app-mention'},{'name': 'MenuChannelsComponent', 'selector': 'app-menu-channels'},{'name': 'MenuComponent', 'selector': 'app-menu'},{'name': 'MenuDialogComponent', 'selector': 'app-menu-dialog'},{'name': 'MenuHeaderComponent', 'selector': 'app-menu-header'},{'name': 'MenuPrivateMessagesComponent', 'selector': 'app-menu-private-messages'},{'name': 'MenutogglerComponent', 'selector': 'app-menutoggler'},{'name': 'MessageboxComponent', 'selector': 'app-messagebox'},{'name': 'MessageComponent', 'selector': 'app-messages'},{'name': 'ParentMessageComponent', 'selector': 'app-parent-message'},{'name': 'ProfileviewComponent', 'selector': 'app-profileview'},{'name': 'ReactionsComponent', 'selector': 'app-reactions'},{'name': 'ResetPasswordComponent', 'selector': 'app-reset-password'},{'name': 'SearchbarComponent', 'selector': 'app-searchbar'},{'name': 'SignInComponent', 'selector': 'app-sign-in'},{'name': 'SignUpComponent', 'selector': 'app-sign-up'},{'name': 'ThreadchatHeaderComponent', 'selector': 'app-threadchat-header'},{'name': 'ThreadMessagesComponent', 'selector': 'app-thread-messages'},{'name': 'ToastMessageComponent', 'selector': 'app-toastmessage'},{'name': 'UsermenuComponent', 'selector': 'app-usermenu'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'UsermenuComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                27 %\n                (3/11)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/auth.guard.ts\n            \n            variable\n            authGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/imprint/imprint.component.ts\n            \n            component\n            ImprintComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/legalnotice/legalnotice.component.ts\n            \n            component\n            LegalnoticeComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/login/forget-password/forget-password.component.ts\n            \n            component\n            ForgetPasswordComponent\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/app/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/login/reset-password/reset-password.component.ts\n            \n            component\n            ResetPasswordComponent\n            \n                41 %\n                (5/12)\n            \n        \n        \n            \n                \n                src/app/login/sign-in/sign-in.component.ts\n            \n            component\n            SignInComponent\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/app/login/sign-up/choose-avatar/choose-avatar.component.ts\n            \n            component\n            ChooseAvatarComponent\n            \n                41 %\n                (5/12)\n            \n        \n        \n            \n                \n                src/app/login/sign-up/sign-up.component.ts\n            \n            component\n            SignUpComponent\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/app/main/addchat/addchat.component.ts\n            \n            component\n            AddchatComponent\n            \n                54 %\n                (12/22)\n            \n        \n        \n            \n                \n                src/app/main/chat/chat.component.ts\n            \n            component\n            ChatComponent\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/app/main/chat/mainchat-header/mainchat-header.component.ts\n            \n            component\n            MainchatHeaderComponent\n            \n                51 %\n                (20/39)\n            \n        \n        \n            \n                \n                src/app/main/chat/threadchat-header/threadchat-header.component.ts\n            \n            component\n            ThreadchatHeaderComponent\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/main/createmessage/createmessage.component.ts\n            \n            component\n            CreatemessageComponent\n            \n                55 %\n                (10/18)\n            \n        \n        \n            \n                \n                src/app/main/main.component.ts\n            \n            component\n            MainComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/main/menu/menu-channels/menu-channels.component.ts\n            \n            component\n            MenuChannelsComponent\n            \n                50 %\n                (7/14)\n            \n        \n        \n            \n                \n                src/app/main/menu/menu-header/menu-header.component.ts\n            \n            component\n            MenuHeaderComponent\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/app/main/menu/menu-private-messages/menu-private-messages.component.ts\n            \n            component\n            MenuPrivateMessagesComponent\n            \n                68 %\n                (20/29)\n            \n        \n        \n            \n                \n                src/app/main/menu/menu.component.ts\n            \n            component\n            MenuComponent\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/app/main/shared/add-user-to-channel/add-user-to-channel.component.ts\n            \n            component\n            AddUserToChannelComponent\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                src/app/main/shared/chatbox/chatbox.component.ts\n            \n            component\n            ChatboxComponent\n            \n                53 %\n                (23/43)\n            \n        \n        \n            \n                \n                src/app/main/shared/editmessage/editmessage.component.ts\n            \n            component\n            EditmessageComponent\n            \n                77 %\n                (14/18)\n            \n        \n        \n            \n                \n                src/app/main/shared/emoji-picker/emoji-picker.component.ts\n            \n            component\n            EmojiPickerComponent\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/main/shared/mention/mention.component.ts\n            \n            component\n            MentionComponent\n            \n                45 %\n                (5/11)\n            \n        \n        \n            \n                \n                src/app/main/shared/menutoggler/menutoggler.component.ts\n            \n            component\n            MenutogglerComponent\n            \n                42 %\n                (3/7)\n            \n        \n        \n            \n                \n                src/app/main/shared/messagebox/messagebox.component.ts\n            \n            component\n            MessageboxComponent\n            \n                62 %\n                (27/43)\n            \n        \n        \n            \n                \n                src/app/main/shared/messages/messages.component.ts\n            \n            component\n            MessageComponent\n            \n                63 %\n                (23/36)\n            \n        \n        \n            \n                \n                src/app/main/shared/parentmessage/parent-message.component.ts\n            \n            component\n            ParentMessageComponent\n            \n                57 %\n                (12/21)\n            \n        \n        \n            \n                \n                src/app/main/shared/threadmessages/threadmessages.component.ts\n            \n            component\n            ThreadMessagesComponent\n            \n                65 %\n                (19/29)\n            \n        \n        \n            \n                \n                src/app/models/channel.ts\n            \n            interface\n            Channel\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/models/message.ts\n            \n            interface\n            Message\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/app/models/message.ts\n            \n            interface\n            Reaction\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/models/message.ts\n            \n            interface\n            ThreadMessage\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/app/models/user.ts\n            \n            class\n            UserModel\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/pipes/timestamp-to-date.pipe.ts\n            \n            pipe\n            RelativeDatePipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/pipes/timestamp-to-date.pipe.ts\n            \n            pipe\n            TimestampToDatePipe\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/shared/animations.ts\n            \n            variable\n            slideAnimationLeft\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/shared/animations.ts\n            \n            variable\n            slideAnimationRight\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/builder/builder.component.ts\n            \n            component\n            BuilderComponent\n            \n                35 %\n                (6/17)\n            \n        \n        \n            \n                \n                src/app/shared/header/header.component.ts\n            \n            component\n            HeaderComponent\n            \n                46 %\n                (6/13)\n            \n        \n        \n            \n                \n                src/app/shared/header/searchbar/searchbar.component.ts\n            \n            component\n            SearchbarComponent\n            \n                56 %\n                (13/23)\n            \n        \n        \n            \n                \n                src/app/shared/header/usermenu/dialog/dialog.component.ts\n            \n            component\n            DialogComponent\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/app/shared/header/usermenu/usermenu.component.ts\n            \n            component\n            UsermenuComponent\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/app/shared/logo/logo.component.ts\n            \n            component\n            LogoComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/shared/menu-dialog/menu-dialog.component.ts\n            \n            component\n            MenuDialogComponent\n            \n                55 %\n                (24/43)\n            \n        \n        \n            \n                \n                src/app/shared/profileview/profileview.component.ts\n            \n            component\n            ProfileviewComponent\n            \n                71 %\n                (10/14)\n            \n        \n        \n            \n                \n                src/app/shared/reactions/reactions.component.ts\n            \n            component\n            ReactionsComponent\n            \n                41 %\n                (5/12)\n            \n        \n        \n            \n                \n                src/app/shared/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                68 %\n                (20/29)\n            \n        \n        \n            \n                \n                src/app/shared/services/channels.service.ts\n            \n            injectable\n            ChannelsService\n            \n                67 %\n                (23/34)\n            \n        \n        \n            \n                \n                src/app/shared/services/emoji-picker.service.ts\n            \n            injectable\n            EmojiPickerService\n            \n                62 %\n                (23/37)\n            \n        \n        \n            \n                \n                src/app/shared/services/emoji-storage.service.ts\n            \n            injectable\n            EmojiStorageService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                src/app/shared/services/mention.service.ts\n            \n            injectable\n            MentionService\n            \n                60 %\n                (9/15)\n            \n        \n        \n            \n                \n                src/app/shared/services/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                59 %\n                (22/37)\n            \n        \n        \n            \n                \n                src/app/shared/services/newmessage.service.ts\n            \n            injectable\n            SharedService\n            \n                57 %\n                (15/26)\n            \n        \n        \n            \n                \n                src/app/shared/services/save-edit-message.service.ts\n            \n            injectable\n            SaveEditMessageService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/app/shared/services/search.service.ts\n            \n            injectable\n            SearchService\n            \n                33 %\n                (10/30)\n            \n        \n        \n            \n                \n                src/app/shared/services/state.service.ts\n            \n            injectable\n            StateService\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/app/shared/services/toastmessage.service.ts\n            \n            injectable\n            ToastMessageService\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/app/shared/services/toastmessage.service.ts\n            \n            interface\n            ToastMessage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/shared/services/user-dialog.service.ts\n            \n            injectable\n            UserDialogService\n            \n                61 %\n                (13/21)\n            \n        \n        \n            \n                \n                src/app/shared/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                81 %\n                (22/27)\n            \n        \n        \n            \n                \n                src/app/shared/services/user.service.ts\n            \n            interface\n            CustomUser\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/shared/toastmessage/toastmessage.component.ts\n            \n            component\n            ToastMessageComponent\n            \n                33 %\n                (1/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 18.2.13\n        \n            @angular/cdk : 18.0.0\n        \n            @angular/common : 18.2.13\n        \n            @angular/compiler : 18.2.13\n        \n            @angular/core : 18.2.13\n        \n            @angular/fire : ^18.0.1\n        \n            @angular/forms : 18.2.13\n        \n            @angular/material : 18.0.0\n        \n            @angular/platform-browser : 18.2.13\n        \n            @angular/platform-browser-dynamic : 18.2.13\n        \n            @angular/router : 18.2.13\n        \n            @ctrl/ngx-emoji-mart : ^9.2.0\n        \n            firebase : ^10.14.1\n        \n            firebase-tools : ^13.29.0\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.14.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    39 Components\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            authGuard   (src/.../auth.guard.ts)\n                        \n                        \n                            slideAnimationLeft   (src/.../animations.ts)\n                        \n                        \n                            slideAnimationRight   (src/.../animations.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    importProvidersFrom(ReactiveFormsModule),\n    provideRouter(routes),\n    provideAnimations(),\n    provideAnimationsAsync(),\n    provideFirebaseApp(() => initializeApp(data)),\n    provideFirestore(() => getFirestore()),\n    provideAuth(() => getAuth()),\n    provideDatabase(() => getDatabase()),\n    provideHttpClient(),\n    { provide: LOCALE_ID, useValue: 'de-DE' },\n  ],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authGuard\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CanActivateFn\n\n                    \n                \n                \n                    \n                        Default value : async (route, state) => {\n  const userService = inject(UserService);\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const localUserData = sessionStorage.getItem('userData');\n  const localUserId = JSON.parse(localUserData || '{}');\n  const userIdIsValid = await userService.checkUserId(localUserId.userId);\n\n  if (authService.isAuthenticated() && userIdIsValid) {\n    if (state.url === '/') {\n      setTimeout(() => {router.navigateByUrl('/board');}, 6000);\n      return false;\n    }\n    return true;\n  }\n  router.navigate(['/']);\n  return false;\n}\n                    \n                \n\n\n        \n    \n\n    src/app/shared/animations.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        slideAnimationLeft\n                        \n                    \n                \n            \n                \n                    \n                        Default value : trigger('slideAnimationLeft', [\n  state('in', style({width: '{{width}}','min-width': '{{width}}',transform: 'translateX(0)',overflow: 'hidden'}), { params: { width: '366px' }}),\n  state('out', style({width: '0',transform: 'translateX(-100%)',overflow: 'hidden'})),\n  transition('in => out', [\n    animate('300ms ease-in-out', \n      style({ transform: 'translateX(-100%)', width: '0' }))\n  ]),\n  transition('out => in', [\n    animate('300ms ease-in-out', \n      style({ width: '0', transform: 'translateX(-100%)' })),\n    animate('300ms ease-in-out', \n      style({ width: '{{width}}', transform: 'translateX(0)' }))\n  ])\n])\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        slideAnimationRight\n                        \n                    \n                \n            \n                \n                    \n                        Default value : trigger('slideAnimationRight', [\n  state('in',\n    style({width: '{{width}}',transform: 'translateX(0)',overflow: 'hidden',}),{ params: { width: '485px' }}),\n  state('out',\n    style({width: '0',transform: 'translateX(100%)',overflow: 'hidden',})\n  ),\n  transition('in => out', [\n    animate('300ms ease-in-out',\n      style({transform: 'translateX({{width}})',width: '0px',})\n    ),\n    animate('300ms ease-in-out'),\n  ]),\n  transition('out => in', [\n    animate('300ms ease-in-out', \n      style({width: '0',transform: 'translateX(100%)',})\n    ),\n    animate('300ms ease-in-out',\n      style({width: '{{width}}',transform: 'translateX(0)',})\n    ),\n  ]),\n])\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
